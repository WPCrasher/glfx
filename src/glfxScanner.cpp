#line 2 "glfxScanner.cpp"

#line 4 "glfxScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer glfx_create_buffer
#define yy_delete_buffer glfx_delete_buffer
#define yy_flex_debug glfx_flex_debug
#define yy_init_buffer glfx_init_buffer
#define yy_flush_buffer glfx_flush_buffer
#define yy_load_buffer_state glfx_load_buffer_state
#define yy_switch_to_buffer glfx_switch_to_buffer
#define yyin glfxin
#define yyleng glfxleng
#define yylex glfxlex
#define yylineno glfxlineno
#define yyout glfxout
#define yyrestart glfxrestart
#define yytext glfxtext
#define yywrap glfxwrap
#define yyalloc glfxalloc
#define yyrealloc glfxrealloc
#define yyfree glfxfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE glfxrestart(glfxin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t glfxleng;

extern FILE *glfxin, *glfxout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE glfxlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-glfxlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < glfxleng; ++yyl )\
                    if ( glfxtext[yyl] == '\n' )\
                        --glfxlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up glfxtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via glfxrestart()), so that the user can continue scanning by
	 * just pointing glfxin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when glfxtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t glfxleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow glfxwrap()'s to do buffer switches
 * instead of setting up a fresh glfxin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void glfxrestart (FILE *input_file  );
void glfx_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE glfx_create_buffer (FILE *file,int size  );
void glfx_delete_buffer (YY_BUFFER_STATE b  );
void glfx_flush_buffer (YY_BUFFER_STATE b  );
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void glfxpop_buffer_state (void );

static void glfxensure_buffer_stack (void );
static void glfx_load_buffer_state (void );
static void glfx_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER glfx_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE glfx_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE glfx_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE glfx_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *glfxalloc (yy_size_t  );
void *glfxrealloc (void *,yy_size_t  );
void glfxfree (void *  );

#define yy_new_buffer glfx_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define glfxwrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *glfxin = (FILE *) 0, *glfxout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int glfxlineno;

int glfxlineno = 1;

extern char *glfxtext;
#define yytext_ptr glfxtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up glfxtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	glfxleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[4299] =
    {
 {   0,   0 }, {   0,4256 }, {   0,   0 }, {   0,4254 }, {   1,  90 },
 {   2,  92 }, {   3,  94 }, {   4,  90 }, {   5,  90 }, {   6,  96 },
 {   7,  98 }, {   8,  90 }, {   9, 100 }, {  10, 102 }, {  11, 145 },
 {  12, 147 }, {  13, 151 }, {  14, 155 }, {  15, 171 }, {  16, 176 },
 {  17, 198 }, {  18, 198 }, {  19, 198 }, {  20, 241 }, {  21,  90 },
 {  22,  90 }, {  23,  90 }, {  24, 198 }, {  25, 247 }, {  26, 198 },
 {  27, 198 }, {  28, 290 }, {  29, 333 }, {  30, 198 }, {  31, 376 },
 {  32, 198 }, {  33, 198 }, {  34, 198 }, {  35, 419 }, {  36, 462 },
 {  37, 198 }, {  38, 505 }, {  39, 548 }, {  40, 198 }, {  41, 591 },
 {  42, 245 }, {  43, 249 }, {   0,   0 }, {   0,4209 }, {   1,  45 },

 {   2,  47 }, {   3,  49 }, {   4,  45 }, {   5, 223 }, {   6,  51 },
 {   7,  53 }, {   8,  45 }, {   9,  55 }, {  10,  57 }, {  11, 100 },
 {  12, 102 }, {  13, 106 }, {  14, 110 }, {  15, 126 }, {  16, 131 },
 {  17, 153 }, {  18, 153 }, {  19, 153 }, {  20, 196 }, {  21,  45 },
 {  22,  45 }, {  23,  45 }, {  24, 153 }, {  25, 202 }, {  26, 153 },
 {  27, 153 }, {  28, 245 }, {  29, 288 }, {  30, 153 }, {  31, 331 },
 {  32, 153 }, {  33, 153 }, {  34, 153 }, {  35, 374 }, {  36, 417 },
 {  37, 153 }, {  38, 460 }, {  39, 503 }, {  40, 153 }, {  41, 546 },
 {  42, 200 }, {  43, 204 }, {   0,  33 }, {   0,4164 }, {   0,  32 },
 {   0,4162 }, {   0,  32 }, {   0,4160 }, {   0,  21 }, {   0,4158 },

 {   0,  22 }, {   0,4156 }, {   0,  26 }, {   0,4154 }, {   0,  20 },
 {   0,4152 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10, 532 }, {   0,   0 }, {  12, 575 }, {  13, 575 }, {  14, 532 },
 {   0,   0 }, {   0,   0 }, {  17, 532 }, {  18, 532 }, {  19, 532 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 532 }, {  24, 532 },
 {  25, 532 }, {  26, 532 }, {  27, 532 }, {  28, 532 }, {  29, 532 },
 {  30, 532 }, {  31, 532 }, {  32, 532 }, {  33, 532 }, {  34, 532 },
 {  35, 532 }, {  36, 532 }, {  37, 532 }, {  38, 532 }, {  39, 532 },
 {  40, 532 }, {  41, 532 }, {   0,  33 }, {   0,4109 }, {   0,  14 },

 {   0,4107 }, {   0,   0 }, {   0,   0 }, {   0,  14 }, {   0,4103 },
 {   0,   0 }, {   8, 575 }, {   0,  20 }, {   0,4099 }, {  11, 620 },
 {  10, 146 }, {   0,   0 }, {  12, 663 }, {  13, 663 }, {  10, 142 },
 {   0,   0 }, {  12, 663 }, {  13, 663 }, {  10, 479 }, {   0,   0 },
 {  12, 479 }, {  13, 479 }, {  14, 479 }, {   0,  28 }, {   0,4083 },
 {  17, 479 }, {  18, 479 }, {  19, 479 }, {   0,  27 }, {   0,4078 },
 {   0,   0 }, {  23, 479 }, {  24, 479 }, {  25, 479 }, {  26, 479 },
 {  27, 479 }, {  28, 479 }, {  29, 479 }, {  30, 479 }, {  31, 479 },
 {  32, 479 }, {  33, 479 }, {  34, 479 }, {  35, 479 }, {  36, 479 },
 {  37, 479 }, {  38, 479 }, {  39, 479 }, {  40, 479 }, {  41, 479 },

 {   0,  20 }, {   0,4056 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10, 436 }, {   0,   0 }, {  12, 436 }, {  13, 436 },
 {  14, 436 }, {   0,   0 }, {   0,   0 }, {  17, 436 }, {  18, 436 },
 {  19, 436 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 436 },
 {  24, 436 }, {  25, 436 }, {  26, 436 }, {  27, 436 }, {  28, 436 },
 {  29, 436 }, {  30, 436 }, {  31, 436 }, {  32, 436 }, {  33, 436 },
 {  34, 436 }, {  35, 436 }, {  36, 436 }, {  37, 436 }, {  38, 436 },
 {  39, 436 }, {  40, 436 }, {  41, 436 }, {   0,  33 }, {   0,4013 },
 {   0,   0 }, {   2, 575 }, {   0,  23 }, {   0,4009 }, {   0,  20 },

 {   0,4007 }, {   0,  24 }, {   0,4005 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10, 387 }, {   0,   0 }, {  12, 387 }, {  13, 387 }, {  14, 387 },
 {   0,   0 }, {  22, 588 }, {  17, 387 }, {  18, 387 }, {  19, 387 },
 {   0,  33 }, {   0,3986 }, {   0,   0 }, {  23, 387 }, {  24, 387 },
 {  25, 387 }, {  26, 387 }, {  27, 584 }, {  28, 387 }, {  29, 387 },
 {  30, 387 }, {  31, 387 }, {  32, 387 }, {  33, 387 }, {  34, 387 },
 {  35, 387 }, {  36, 387 }, {  37, 387 }, {  38, 627 }, {  39, 387 },
 {  40, 387 }, {  41, 387 }, {   0,  20 }, {   0,3964 }, {   0,   0 },
 {   0,  15 }, {   0,3961 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31, 579 }, {  10, 344 }, {   0,   0 },
 {  12, 344 }, {  13, 344 }, {  14, 344 }, {  12, 584 }, {  13, 584 },
 {  17, 344 }, {  18, 344 }, {  19, 344 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23, 344 }, {  24, 627 }, {  25, 344 }, {  26, 344 },
 {  27, 344 }, {  28, 344 }, {  29, 344 }, {  30, 344 }, {  31, 344 },
 {  32, 344 }, {  33, 344 }, {  34, 344 }, {  35, 344 }, {  36, 344 },
 {  37, 344 }, {  38, 670 }, {  39, 344 }, {  40, 344 }, {  41, 344 },
 {   0,  20 }, {   0,3921 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10, 301 }, {   0,   0 }, {  12, 301 }, {  13, 301 },

 {  14, 301 }, {   0,   0 }, {   0,   0 }, {  17, 301 }, {  18, 301 },
 {  19, 301 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 301 },
 {  24, 301 }, {  25, 301 }, {  26, 301 }, {  27, 301 }, {  28, 301 },
 {  29, 301 }, {  30, 301 }, {  31, 301 }, {  32, 670 }, {  33, 301 },
 {  34, 301 }, {  35, 301 }, {  36, 301 }, {  37, 301 }, {  38, 713 },
 {  39, 301 }, {  40, 301 }, {  41, 301 }, {   0,  20 }, {   0,3878 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 258 },
 {   0,   0 }, {  12, 258 }, {  13, 258 }, {  14, 258 }, {   0,   0 },
 {   0,   0 }, {  17, 258 }, {  18, 258 }, {  19, 258 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  23, 258 }, {  24, 258 }, {  25, 258 },
 {  26, 258 }, {  27, 258 }, {  28, 258 }, {  29, 258 }, {  30, 258 },
 {  31, 258 }, {  32, 258 }, {  33, 258 }, {  34, 713 }, {  35, 258 },
 {  36, 258 }, {  37, 258 }, {  38, 258 }, {  39, 258 }, {  40, 258 },
 {  41, 258 }, {   0,  20 }, {   0,3835 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10, 215 }, {   0,   0 }, {  12, 215 },
 {  13, 215 }, {  14, 215 }, {   0,   0 }, {   0,   0 }, {  17, 215 },
 {  18, 215 }, {  19, 215 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23, 215 }, {  24, 215 }, {  25, 215 }, {  26, 215 }, {  27, 215 },

 {  28, 215 }, {  29, 215 }, {  30, 215 }, {  31, 215 }, {  32, 215 },
 {  33, 215 }, {  34, 215 }, {  35, 215 }, {  36, 215 }, {  37, 215 },
 {  38, 215 }, {  39, 215 }, {  40, 713 }, {  41, 215 }, {   0,  20 },
 {   0,3792 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10, 172 }, {   0,   0 }, {  12, 172 }, {  13, 172 }, {  14, 172 },
 {   0,   0 }, {   0,   0 }, {  17, 172 }, {  18, 172 }, {  19, 172 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, 172 }, {  24, 713 },
 {  25, 172 }, {  26, 172 }, {  27, 172 }, {  28, 172 }, {  29, 172 },
 {  30, 172 }, {  31, 172 }, {  32, 172 }, {  33, 172 }, {  34, 172 },

 {  35, 172 }, {  36, 172 }, {  37, 756 }, {  38, 172 }, {  39, 172 },
 {  40, 172 }, {  41, 172 }, {   0,  20 }, {   0,3749 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 129 }, {   0,   0 },
 {  12, 129 }, {  13, 129 }, {  14, 129 }, {   0,   0 }, {   0,   0 },
 {  17, 129 }, {  18, 129 }, {  19, 129 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23, 129 }, {  24, 756 }, {  25, 129 }, {  26, 129 },
 {  27, 129 }, {  28, 129 }, {  29, 129 }, {  30, 799 }, {  31, 129 },
 {  32, 129 }, {  33, 129 }, {  34, 129 }, {  35, 129 }, {  36, 129 },
 {  37, 129 }, {  38, 129 }, {  39, 842 }, {  40, 129 }, {  41, 129 },

 {   0,  20 }, {   0,3706 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,  86 }, {   0,   0 }, {  12,  86 }, {  13,  86 },
 {  14,  86 }, {   0,   0 }, {   0,   0 }, {  17,  86 }, {  18,  86 },
 {  19,  86 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,  86 },
 {  24,  86 }, {  25, 842 }, {  26,  86 }, {  27, 885 }, {  28,  86 },
 {  29,  86 }, {  30,  86 }, {  31,  86 }, {  32,  86 }, {  33,  86 },
 {  34,  86 }, {  35,  86 }, {  36,  86 }, {  37, 928 }, {  38,  86 },
 {  39,  86 }, {  40,  86 }, {  41,  86 }, {   0,  20 }, {   0,3663 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,  43 },
 {   0,   0 }, {  12,  43 }, {  13,  43 }, {  14,  43 }, {   0,   0 },
 {   0,   0 }, {  17,  43 }, {  18,  43 }, {  19,  43 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,  43 }, {  24,  43 }, {  25,  43 },
 {  26,  43 }, {  27,  43 }, {  28,  43 }, {  29,  43 }, {  30,  43 },
 {  31,  43 }, {  32,  43 }, {  33,  43 }, {  34,  43 }, {  35,  43 },
 {  36,  43 }, {  37,  43 }, {  38, 928 }, {  39,  43 }, {  40,  43 },
 {  41,  43 }, {   0,  20 }, {   0,3620 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,   0 }, {   0,   0 }, {  12,   0 },

 {  13,   0 }, {  14,   0 }, {   0,   0 }, {   0,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {   0,  15 },
 {   0,3577 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10, -43 }, {   0,   0 }, {  12, 885 }, {  13, 885 }, {  14, -43 },
 {   0,   0 }, {   0,   0 }, {  17, -43 }, {  18, -43 }, {  19, -43 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23, -43 }, {  24, -43 },
 {  25, -43 }, {  26, -43 }, {  27, -43 }, {  28, -43 }, {  29, -43 },
 {  30, -43 }, {  31, -43 }, {  32, -43 }, {  33, -43 }, {  34, -43 },
 {  35, -43 }, {  36, -43 }, {  37, -43 }, {  38, -43 }, {  39, -43 },
 {  40, -43 }, {  41, -43 }, {   0,   0 }, {   0,3534 }, {   1, 885 },
 {   2, 885 }, {   3, 885 }, {   4, 885 }, {   5, 885 }, {   6, 885 },
 {   7, 885 }, {   8, 930 }, {   9, 885 }, {  10, 885 }, {  11, 885 },
 {  12, 885 }, {  13, 885 }, {  14, 885 }, {  15, 885 }, {  16, 885 },
 {  17, 885 }, {  18, 885 }, {  19, 885 }, {  20, 885 }, {  21, 885 },
 {  22, 885 }, {  23, 885 }, {  24, 885 }, {  25, 885 }, {  26, 885 },

 {  27, 885 }, {  28, 885 }, {  29, 885 }, {  30, 885 }, {  31, 885 },
 {  32, 885 }, {  33, 885 }, {  34, 885 }, {  35, 885 }, {  36, 885 },
 {  37, 885 }, {  38, 885 }, {  39, 885 }, {  40, 885 }, {  41, 885 },
 {  42, 885 }, {  43, 885 }, {   0,   0 }, {   0,3489 }, {   1, 930 },
 {   2, 930 }, {   3,  87 }, {   4, 930 }, {   5, 930 }, {   6, 930 },
 {   7, 930 }, {   8, 930 }, {   9, 930 }, {  10, 930 }, {  11, 930 },
 {  12, 930 }, {  13, 930 }, {  14, 930 }, {  15, 930 }, {  16, 930 },
 {  17, 930 }, {  18, 930 }, {  19, 930 }, {  20, 930 }, {  21, 975 },
 {  22, 930 }, {  23, 930 }, {  24, 930 }, {  25, 930 }, {  26, 930 },
 {  27, 930 }, {  28, 930 }, {  29, 930 }, {  30, 930 }, {  31, 930 },

 {  32, 930 }, {  33, 930 }, {  34, 930 }, {  35, 930 }, {  36, 930 },
 {  37, 930 }, {  38, 930 }, {  39, 930 }, {  40, 930 }, {  41, 930 },
 {  42, 930 }, {  43, 930 }, {   0,   0 }, {   0,3444 }, {   0,   0 },
 {   0,   0 }, {   0,  14 }, {   0,3440 }, {   0,   0 }, {   0,3438 },
 {   0,   0 }, {   2,   0 }, {   0,   0 }, {  10,-517 }, {   0,   0 },
 {  12,   0 }, {  13,   0 }, {  10,-521 }, {   0,   0 }, {  12,   0 },
 {  13,   0 }, {   0,  25 }, {   0,3425 }, {   0,  20 }, {   0,3423 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  22,  13 }, {   0,   0 }, {   0,   0 }, {  10,-197 },
 {   0,   0 }, {  12,-197 }, {  13,-197 }, {  14,-197 }, {   0,   0 },

 {   0,3407 }, {  17,-197 }, {  18,-197 }, {  19,-197 }, {   0,  30 },
 {   0,3402 }, {   0,   0 }, {  23,-197 }, {  24,-197 }, {  25,-197 },
 {  26,-197 }, {  27,-197 }, {  28,-197 }, {  29,-197 }, {  30,-197 },
 {  31,-197 }, {  32,-197 }, {  33,-197 }, {  34, 954 }, {  35,-197 },
 {  36,-197 }, {  37,-197 }, {  38,-197 }, {  39,-197 }, {  40,-197 },
 {  41,-197 }, {   0,  13 }, {   0,3380 }, {   0,   0 }, {   0,  15 },
 {   0,3377 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  34,  48 },
 {   0,   0 }, {   0,   0 }, {  10,-240 }, {   0,   0 }, {  12,-240 },
 {  13,-240 }, {  14,-240 }, {  12,  48 }, {  13,  48 }, {  17,-240 },
 {  18,-240 }, {  19,-240 }, {   0,   0 }, {   0,3359 }, {   0,   0 },

 {  23,-240 }, {  24,-240 }, {  25,-240 }, {  26,-240 }, {  27,-240 },
 {  28,-240 }, {  29,-240 }, {  30,-240 }, {  31,-240 }, {  32,-240 },
 {  33,-240 }, {  34,-240 }, {  35,-240 }, {  36,-240 }, {  37,-240 },
 {  38,-240 }, {  39,-240 }, {  40,-240 }, {  41,-240 }, {   0,  20 },
 {   0,3337 }, {   0,  31 }, {   0,3335 }, {  25,  38 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  15 }, {   0,3329 }, {   0,   0 },
 {  10,-283 }, {   0,   0 }, {  12,-283 }, {  13,-283 }, {  14,-283 },
 {   0,   0 }, {   0,3321 }, {  17,-283 }, {  18,-283 }, {  19,-283 },
 {  12,   0 }, {  13,   0 }, {   0,   0 }, {  23,-283 }, {  24,-283 },
 {  25,-283 }, {  26,-283 }, {  27,-283 }, {  28,-283 }, {  29,-283 },

 {  30,-283 }, {  31,-283 }, {  32, 911 }, {  33,-283 }, {  34,-283 },
 {  35,-283 }, {  36,-283 }, {  37,-283 }, {  38,-283 }, {  39,-283 },
 {  40,-283 }, {  41,-283 }, {   0,  12 }, {   0,3294 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,3290 }, {  32,  31 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-326 }, {   0,   0 },
 {  12,-326 }, {  13,-326 }, {  14,-326 }, {   0,   0 }, {   0,   0 },
 {  17,-326 }, {  18,-326 }, {  19,-326 }, {   0,   0 }, {   0,3273 },
 {   0,   0 }, {  23,-326 }, {  24,-326 }, {  25,-326 }, {  26,-326 },
 {  27,-326 }, {  28,-326 }, {  29,-326 }, {  30,-326 }, {  31,-326 },
 {  32,-326 }, {  33,-326 }, {  34,-326 }, {  35,-326 }, {  36,-326 },

 {  37,-326 }, {  38,-326 }, {  39,-326 }, {  40,-326 }, {  41,-326 },
 {   0,  20 }, {   0,3251 }, {  40,  17 }, {   0,   0 }, {   0,   0 },
 {  26,  43 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-369 }, {   0,   0 }, {  12,-369 }, {  13,-369 },
 {  14,-369 }, {   0,   0 }, {   0,   0 }, {  17,-369 }, {  18,-369 },
 {  19,-369 }, {   0,   0 }, {   0,3230 }, {   0,   0 }, {  23, 868 },
 {  24,-369 }, {  25,-369 }, {  26,-369 }, {  27,-369 }, {  28,-369 },
 {  29,-369 }, {  30,-369 }, {  31,-369 }, {  32,-369 }, {  33,-369 },
 {  34,-369 }, {  35,-369 }, {  36,-369 }, {  37,-369 }, {  38,-369 },
 {  39,-369 }, {  40,-369 }, {  41,-369 }, {   0,  11 }, {   0,3208 },

 {   0,   0 }, {   0,3206 }, {   0,   0 }, {   2,   5 }, {  27,  24 },
 {   0,   0 }, {   0,3201 }, {   0,   0 }, {   2,   0 }, {  10,-412 },
 {   4,3023 }, {  12,-412 }, {  13,-412 }, {  14,-412 }, {   0,   0 },
 {   0,   0 }, {  17,-412 }, {  18,-412 }, {  19,-412 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-412 }, {  24,-412 }, {  25,-412 },
 {  26,-412 }, {  27,-412 }, {  28,-412 }, {  29,-412 }, {  30,-412 },
 {  31,-412 }, {  32,-412 }, {  33,-412 }, {  34,-412 }, {  35,-412 },
 {  36,-412 }, {  37,-412 }, {  38,-412 }, {  39,-412 }, {  40,-412 },
 {  41,-412 }, {   0,  16 }, {   0,3165 }, {   0,   0 }, {   0,3163 },
 {   0,   0 }, {   2,  43 }, {   3,  48 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  10,-455 }, {   0,   0 }, {  12,-455 },
 {  13,-455 }, {  14,-455 }, {   0,   0 }, {   0,   0 }, {  17,-455 },
 {  18,-455 }, {  19,-455 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-455 }, {  24,-455 }, {  25,-455 }, {  26,-455 }, {  27,-455 },
 {  28,-455 }, {  29,-455 }, {  30,-455 }, {  31,-455 }, {  32,-455 },
 {  33,-455 }, {  34,-455 }, {  35,-455 }, {  36,-455 }, {  37,-455 },
 {  38,-455 }, {  39, 825 }, {  40,-455 }, {  41,-455 }, {   0,  20 },
 {   0,3122 }, {   0,   0 }, {   0,3120 }, {   0,   0 }, {   2,   0 },
 {   3,   5 }, {   0,   6 }, {   0,3115 }, {   0,   0 }, {   0,   0 },
 {  10,-498 }, {   0,   0 }, {  12,-498 }, {  13,-498 }, {  14,-498 },

 {   0,   0 }, {   0,   0 }, {  17,-498 }, {  18,-498 }, {  19,-498 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-498 }, {  24,-498 },
 {  25,-498 }, {  26,-498 }, {  27,-498 }, {  28,-498 }, {  29,-498 },
 {  30,-498 }, {  31,-498 }, {  32,-498 }, {  33,-498 }, {  34,-498 },
 {  35,-498 }, {  36,-498 }, {  37,-498 }, {  38,-498 }, {  39, 825 },
 {  40,-498 }, {  41,-498 }, {   0,  20 }, {   0,3079 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-541 }, {   0,   0 },
 {  12,-541 }, {  13,-541 }, {  14,-541 }, {   0,   0 }, {   0,   0 },
 {  17,-541 }, {  18,-541 }, {  19,-541 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  23,-541 }, {  24,-541 }, {  25,-541 }, {  26,-541 },
 {  27,-541 }, {  28,-541 }, {  29,-541 }, {  30,-541 }, {  31,-541 },
 {  32,-541 }, {  33,-541 }, {  34,-541 }, {  35,-541 }, {  36,-541 },
 {  37,-541 }, {  38,-541 }, {  39, 825 }, {  40,-541 }, {  41,-541 },
 {   0,  20 }, {   0,3036 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-584 }, {   0,   0 }, {  12,-584 }, {  13,-584 },
 {  14,-584 }, {   0,   0 }, {   0,   0 }, {  17,-584 }, {  18,-584 },
 {  19,-584 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-584 },
 {  24,-584 }, {  25,-584 }, {  26,-584 }, {  27,-584 }, {  28,-584 },

 {  29,-584 }, {  30,-584 }, {  31,-584 }, {  32,-584 }, {  33,-584 },
 {  34,-584 }, {  35, 825 }, {  36,-584 }, {  37,-584 }, {  38,-584 },
 {  39,-584 }, {  40,-584 }, {  41,-584 }, {   0,  20 }, {   0,2993 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-627 },
 {   0,   0 }, {  12,-627 }, {  13,-627 }, {  14,-627 }, {   0,   0 },
 {   0,   0 }, {  17,-627 }, {  18,-627 }, {  19,-627 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-627 }, {  24,-627 }, {  25,-627 },
 {  26,-627 }, {  27,-627 }, {  28,-627 }, {  29,-627 }, {  30,-627 },
 {  31,-627 }, {  32,-627 }, {  33, 825 }, {  34,-627 }, {  35,-627 },

 {  36,-627 }, {  37,-627 }, {  38,-627 }, {  39,-627 }, {  40,-627 },
 {  41,-627 }, {   0,  20 }, {   0,2950 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-670 }, {   0,   0 }, {  12,-670 },
 {  13,-670 }, {  14,-670 }, {   0,   0 }, {   0,   0 }, {  17,-670 },
 {  18,-670 }, {  19,-670 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-670 }, {  24, 825 }, {  25,-670 }, {  26,-670 }, {  27,-670 },
 {  28,-670 }, {  29,-670 }, {  30,-670 }, {  31,-670 }, {  32,-670 },
 {  33,-670 }, {  34,-670 }, {  35,-670 }, {  36,-670 }, {  37,-670 },
 {  38,-670 }, {  39,-670 }, {  40,-670 }, {  41,-670 }, {   0,  20 },

 {   0,2907 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-713 }, {   0,   0 }, {  12,-713 }, {  13,-713 }, {  14,-713 },
 {   0,   0 }, {   0,   0 }, {  17,-713 }, {  18,-713 }, {  19,-713 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-713 }, {  24, 825 },
 {  25,-713 }, {  26,-713 }, {  27,-713 }, {  28,-713 }, {  29,-713 },
 {  30,-713 }, {  31,-713 }, {  32,-713 }, {  33,-713 }, {  34,-713 },
 {  35,-713 }, {  36,-713 }, {  37,-713 }, {  38,-713 }, {  39,-713 },
 {  40,-713 }, {  41,-713 }, {   0,   9 }, {   0,2864 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-756 }, {   0,   0 },
 {  12,-756 }, {  13,-756 }, {  14,-756 }, {   0,   0 }, {   0,   0 },
 {  17,-756 }, {  18,-756 }, {  19,-756 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-756 }, {  24,-756 }, {  25,-756 }, {  26,-756 },
 {  27,-756 }, {  28,-756 }, {  29,-756 }, {  30,-756 }, {  31,-756 },
 {  32,-756 }, {  33,-756 }, {  34,-756 }, {  35,-756 }, {  36,-756 },
 {  37,-756 }, {  38,-756 }, {  39,-756 }, {  40,-756 }, {  41,-756 },
 {   0,  10 }, {   0,2821 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-799 }, {   0,   0 }, {  12,-799 }, {  13,-799 },

 {  14,-799 }, {   0,   0 }, {   0,   0 }, {  17,-799 }, {  18,-799 },
 {  19,-799 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-799 },
 {  24,-799 }, {  25,-799 }, {  26,-799 }, {  27,-799 }, {  28,-799 },
 {  29,-799 }, {  30,-799 }, {  31,-799 }, {  32,-799 }, {  33,-799 },
 {  34,-799 }, {  35,-799 }, {  36,-799 }, {  37,-799 }, {  38,-799 },
 {  39,-799 }, {  40,-799 }, {  41,-799 }, {   0,  20 }, {   0,2778 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-842 },
 {   0,   0 }, {  12,-842 }, {  13,-842 }, {  14,-842 }, {   0,   0 },
 {   0,   0 }, {  17,-842 }, {  18,-842 }, {  19,-842 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  23,-842 }, {  24,-842 }, {  25,-842 },
 {  26,-842 }, {  27,-842 }, {  28,-842 }, {  29,-842 }, {  30,-842 },
 {  31,-842 }, {  32,-842 }, {  33,-842 }, {  34,-842 }, {  35,-842 },
 {  36,-842 }, {  37,-842 }, {  38,-842 }, {  39,-842 }, {  40, 739 },
 {  41,-842 }, {   0,   8 }, {   0,2735 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-885 }, {   0,   0 }, {  12,-885 },
 {  13,-885 }, {  14,-885 }, {   0,   0 }, {   0,   0 }, {  17,-885 },
 {  18,-885 }, {  19,-885 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-885 }, {  24,-885 }, {  25,-885 }, {  26,-885 }, {  27,-885 },

 {  28,-885 }, {  29,-885 }, {  30,-885 }, {  31,-885 }, {  32,-885 },
 {  33,-885 }, {  34,-885 }, {  35,-885 }, {  36,-885 }, {  37,-885 },
 {  38,-885 }, {  39,-885 }, {  40,-885 }, {  41,-885 }, {   0,  15 },
 {   0,2692 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-928 }, {   0,   0 }, {  12,   0 }, {  13,   0 }, {  14,-928 },
 {   0,   0 }, {   0,   0 }, {  17,-928 }, {  18,-928 }, {  19,-928 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-928 }, {  24,-928 },
 {  25,-928 }, {  26,-928 }, {  27,-928 }, {  28,-928 }, {  29,-928 },
 {  30,-928 }, {  31,-928 }, {  32,-928 }, {  33,-928 }, {  34,-928 },

 {  35,-928 }, {  36,-928 }, {  37,-928 }, {  38,-928 }, {  39,-928 },
 {  40,-928 }, {  41,-928 }, {   0,   0 }, {   0,2649 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,  45 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },

 {  42,   0 }, {  43,   0 }, {   0,   0 }, {   0,2604 }, {   1, 608 },
 {   2, 608 }, {   3, 608 }, {   4, 608 }, {   5, 608 }, {   6, 608 },
 {   7, 608 }, {   8, 653 }, {   9, 608 }, {  10, 608 }, {  11,-731 },
 {  12, 608 }, {  13, 608 }, {  14, 608 }, {  15, 608 }, {  16, 608 },
 {  17, 608 }, {  18, 608 }, {  19, 608 }, {  20, 608 }, {  21, 608 },
 {  22, 608 }, {  23, 608 }, {  24, 608 }, {  25, 608 }, {  26, 608 },
 {  27, 608 }, {  28, 608 }, {  29, 608 }, {  30, 608 }, {  31, 608 },
 {  32, 608 }, {  33, 608 }, {  34, 608 }, {  35, 608 }, {  36, 608 },
 {  37, 608 }, {  38, 608 }, {  39, 608 }, {  40, 608 }, {  41, 608 },
 {  42, 608 }, {  43, 608 }, {   0,   0 }, {   0,2559 }, {   1,   0 },

 {   2,   0 }, {   3,-843 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,  45 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {   0,   0 }, {   0,2514 }, {   1, 608 },
 {   2, 608 }, {   3, 608 }, {   4, 608 }, {   5, 608 }, {   6, 608 },

 {   7, 608 }, {   8, 608 }, {   9, 608 }, {  10, 608 }, {  11, 608 },
 {  12, 608 }, {  13, 608 }, {  14, 608 }, {  15, 608 }, {  16, 608 },
 {  17, 608 }, {  18, 608 }, {  19, 608 }, {  20, 608 }, {  21,   0 },
 {  22, 608 }, {  23, 608 }, {  24, 608 }, {  25, 608 }, {  26, 608 },
 {  27, 608 }, {  28, 608 }, {  29, 608 }, {  30, 608 }, {  31, 608 },
 {  32, 608 }, {  33, 608 }, {  34, 608 }, {  35, 608 }, {  36, 608 },
 {  37, 608 }, {  38, 608 }, {  39, 608 }, {  40, 608 }, {  41, 608 },
 {  42, 608 }, {  43, 608 }, {   0,  20 }, {   0,2469 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1151 }, {   0,   0 },

 {  12,-1151 }, {  13,-1151 }, {  14,-1151 }, {   0,   0 }, {   0,   0 },
 {  17,-1151 }, {  18,-1151 }, {  19,-1151 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-1151 }, {  24,-1151 }, {  25,-1151 }, {  26,-1151 },
 {  27,-1151 }, {  28,-1151 }, {  29,-1151 }, {  30,-1151 }, {  31,-1151 },
 {  32,-1151 }, {  33,-1151 }, {  34,-1151 }, {  35,-1151 }, {  36,-1151 },
 {  37,-1151 }, {  38,-1151 }, {  39, 608 }, {  40,-1151 }, {  41,-1151 },
 {   0,  20 }, {   0,2426 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1194 }, {   0,   0 }, {  12,-1194 }, {  13,-1194 },
 {  14,-1194 }, {   0,   0 }, {   0,   0 }, {  17,-1194 }, {  18,-1194 },

 {  19,-1194 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1194 },
 {  24,-1194 }, {  25,-1194 }, {  26,-1194 }, {  27,-1194 }, {  28,-1194 },
 {  29,-1194 }, {  30,-1194 }, {  31,-1194 }, {  32,-1194 }, {  33,-1194 },
 {  34,-1194 }, {  35,-1194 }, {  36,-1194 }, {  37,-1194 }, {  38, 608 },
 {  39,-1194 }, {  40,-1194 }, {  41,-1194 }, {   0,  20 }, {   0,2383 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1237 },
 {   0,   0 }, {  12,-1237 }, {  13,-1237 }, {  14,-1237 }, {   0,   0 },
 {   0,   0 }, {  17,-1237 }, {  18,-1237 }, {  19, 608 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-1237 }, {  24,-1237 }, {  25,-1237 },

 {  26,-1237 }, {  27,-1237 }, {  28,-1237 }, {  29,-1237 }, {  30,-1237 },
 {  31,-1237 }, {  32,-1237 }, {  33,-1237 }, {  34,-1237 }, {  35,-1237 },
 {  36,-1237 }, {  37,-1237 }, {  38,-1237 }, {  39,-1237 }, {  40,-1237 },
 {  41,-1237 }, {   0,  20 }, {   0,2340 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1280 }, {   0,   0 }, {  12,-1280 },
 {  13,-1280 }, {  14,-1280 }, {   0,   0 }, {   0,   0 }, {  17,-1280 },
 {  18,-1280 }, {  19,-1280 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-1280 }, {  24,-1280 }, {  25,-1280 }, {  26,-1280 }, {  27, 608 },
 {  28,-1280 }, {  29,-1280 }, {  30,-1280 }, {  31,-1280 }, {  32,-1280 },

 {  33,-1280 }, {  34,-1280 }, {  35,-1280 }, {  36,-1280 }, {  37,-1280 },
 {  38,-1280 }, {  39,-1280 }, {  40,-1280 }, {  41,-1280 }, {   0,  16 },
 {   0,2297 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1323 }, {   0,   0 }, {  12,-1323 }, {  13,-1323 }, {  14,-1323 },
 {   0,   0 }, {   0,   0 }, {  17,-1323 }, {  18,-1323 }, {  19,-1323 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1323 }, {  24,-1323 },
 {  25,-1323 }, {  26,-1323 }, {  27,-1323 }, {  28,-1323 }, {  29,-1323 },
 {  30,-1323 }, {  31,-1323 }, {  32,-1323 }, {  33,-1323 }, {  34,-1323 },
 {  35,-1323 }, {  36,-1323 }, {  37,-1323 }, {  38,-1323 }, {  39,-1323 },

 {  40,-1323 }, {  41,-1323 }, {   0,  20 }, {   0,2254 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1366 }, {   0,   0 },
 {  12,-1366 }, {  13,-1366 }, {  14,-1366 }, {   0,   0 }, {   0,   0 },
 {  17,-1366 }, {  18,-1366 }, {  19,-1366 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-1366 }, {  24,-1366 }, {  25, 565 }, {  26,-1366 },
 {  27,-1366 }, {  28,-1366 }, {  29,-1366 }, {  30,-1366 }, {  31,-1366 },
 {  32,-1366 }, {  33,-1366 }, {  34,-1366 }, {  35,-1366 }, {  36,-1366 },
 {  37,-1366 }, {  38,-1366 }, {  39,-1366 }, {  40,-1366 }, {  41,-1366 },
 {   0,  20 }, {   0,2211 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1409 }, {   0,   0 }, {  12,-1409 }, {  13,-1409 },
 {  14,-1409 }, {   0,   0 }, {   0,   0 }, {  17,-1409 }, {  18,-1409 },
 {  19,-1409 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1409 },
 {  24,-1409 }, {  25,-1409 }, {  26,-1409 }, {  27,-1409 }, {  28,-1409 },
 {  29, 565 }, {  30,-1409 }, {  31,-1409 }, {  32,-1409 }, {  33,-1409 },
 {  34,-1409 }, {  35,-1409 }, {  36,-1409 }, {  37,-1409 }, {  38,-1409 },
 {  39,-1409 }, {  40,-1409 }, {  41,-1409 }, {   0,  20 }, {   0,2168 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1452 },

 {   0,   0 }, {  12,-1452 }, {  13,-1452 }, {  14,-1452 }, {   0,   0 },
 {   0,   0 }, {  17,-1452 }, {  18,-1452 }, {  19,-1452 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-1452 }, {  24,-1452 }, {  25,-1452 },
 {  26,-1452 }, {  27,-1452 }, {  28,-1452 }, {  29,-1452 }, {  30,-1452 },
 {  31,-1452 }, {  32,-1452 }, {  33,-1452 }, {  34,-1452 }, {  35,-1452 },
 {  36, 565 }, {  37,-1452 }, {  38,-1452 }, {  39,-1452 }, {  40,-1452 },
 {  41,-1452 }, {   0,  20 }, {   0,2125 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1495 }, {   0,   0 }, {  12,-1495 },
 {  13,-1495 }, {  14,-1495 }, {   0,   0 }, {   0,   0 }, {  17,-1495 },

 {  18,-1495 }, {  19,-1495 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-1495 }, {  24,-1495 }, {  25,-1495 }, {  26, 565 }, {  27,-1495 },
 {  28,-1495 }, {  29,-1495 }, {  30,-1495 }, {  31,-1495 }, {  32,-1495 },
 {  33,-1495 }, {  34,-1495 }, {  35,-1495 }, {  36,-1495 }, {  37,-1495 },
 {  38,-1495 }, {  39,-1495 }, {  40,-1495 }, {  41,-1495 }, {   0,  20 },
 {   0,2082 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1538 }, {   0,   0 }, {  12,-1538 }, {  13,-1538 }, {  14,-1538 },
 {   0,   0 }, {   0,   0 }, {  17,-1538 }, {  18,-1538 }, {  19,-1538 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1538 }, {  24,-1538 },

 {  25,-1538 }, {  26,-1538 }, {  27,-1538 }, {  28,-1538 }, {  29, 565 },
 {  30,-1538 }, {  31,-1538 }, {  32,-1538 }, {  33,-1538 }, {  34,-1538 },
 {  35,-1538 }, {  36,-1538 }, {  37,-1538 }, {  38,-1538 }, {  39,-1538 },
 {  40,-1538 }, {  41,-1538 }, {   0,  20 }, {   0,2039 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1581 }, {   0,   0 },
 {  12,-1581 }, {  13,-1581 }, {  14,-1581 }, {   0,   0 }, {   0,   0 },
 {  17,-1581 }, {  18,-1581 }, {  19,-1581 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-1581 }, {  24,-1581 }, {  25,-1581 }, {  26,-1581 },
 {  27, 565 }, {  28,-1581 }, {  29,-1581 }, {  30,-1581 }, {  31,-1581 },

 {  32,-1581 }, {  33,-1581 }, {  34,-1581 }, {  35,-1581 }, {  36,-1581 },
 {  37,-1581 }, {  38,-1581 }, {  39,-1581 }, {  40,-1581 }, {  41,-1581 },
 {   0,   0 }, {   0,1996 }, {   1, 565 }, {   2, 565 }, {   3, 565 },
 {   4, 565 }, {   5, 565 }, {   6, 565 }, {   7, 565 }, {   8,  45 },
 {   9, 565 }, {  10, 565 }, {  11, 610 }, {  12, 565 }, {  13, 565 },
 {  14, 565 }, {  15, 565 }, {  16, 565 }, {  17, 565 }, {  18, 565 },
 {  19, 565 }, {  20, 565 }, {  21, 565 }, {  22, 565 }, {  23, 565 },
 {  24, 565 }, {  25, 565 }, {  26, 565 }, {  27, 565 }, {  28, 565 },
 {  29, 565 }, {  30, 565 }, {  31, 565 }, {  32, 565 }, {  33, 565 },
 {  34, 565 }, {  35, 565 }, {  36, 565 }, {  37, 565 }, {  38, 565 },

 {  39, 565 }, {  40, 565 }, {  41, 565 }, {  42, 565 }, {  43, 565 },
 {   0,   0 }, {   0,1951 }, {   1, -45 }, {   2, -45 }, {   3, -45 },
 {   4, -45 }, {   5, -45 }, {   6, -45 }, {   7, -45 }, {   8,   0 },
 {   9, -45 }, {  10, -45 }, {  11,-1384 }, {  12, -45 }, {  13, -45 },
 {  14, -45 }, {  15, -45 }, {  16, -45 }, {  17, -45 }, {  18, -45 },
 {  19, -45 }, {  20, -45 }, {  21, -45 }, {  22, -45 }, {  23, -45 },
 {  24, -45 }, {  25, -45 }, {  26, -45 }, {  27, -45 }, {  28, -45 },
 {  29, -45 }, {  30, -45 }, {  31, -45 }, {  32, -45 }, {  33, -45 },
 {  34, -45 }, {  35, -45 }, {  36, -45 }, {  37, -45 }, {  38, -45 },
 {  39, -45 }, {  40, -45 }, {  41, -45 }, {  42, -45 }, {  43, -45 },

 {   0,   0 }, {   0,1906 }, {   1, 565 }, {   2, 565 }, {   3,-1496 },
 {   4, 565 }, {   5, 565 }, {   6, 565 }, {   7, 565 }, {   8, 565 },
 {   9, 565 }, {  10, 565 }, {  11, 565 }, {  12, 565 }, {  13, 565 },
 {  14, 565 }, {  15, 565 }, {  16, 565 }, {  17, 565 }, {  18, 565 },
 {  19, 565 }, {  20, 565 }, {  21,-608 }, {  22, 565 }, {  23, 565 },
 {  24, 565 }, {  25, 565 }, {  26, 565 }, {  27, 565 }, {  28, 565 },
 {  29, 565 }, {  30, 565 }, {  31, 565 }, {  32, 565 }, {  33, 565 },
 {  34, 565 }, {  35, 565 }, {  36, 565 }, {  37, 565 }, {  38, 565 },
 {  39, 565 }, {  40, 565 }, {  41, 565 }, {  42, 565 }, {  43, 565 },
 {   0,  20 }, {   0,1861 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1759 }, {   0,   0 }, {  12,-1759 }, {  13,-1759 },
 {  14,-1759 }, {   0,   0 }, {   0,   0 }, {  17,-1759 }, {  18,-1759 },
 {  19,-1759 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1759 },
 {  24,-1759 }, {  25,-1759 }, {  26,-1759 }, {  27,-1759 }, {  28,-1759 },
 {  29,-1759 }, {  30,-1759 }, {  31,-1759 }, {  32,-1759 }, {  33,-1759 },
 {  34,-1759 }, {  35,-1759 }, {  36,-1759 }, {  37, 565 }, {  38,-1759 },
 {  39,-1759 }, {  40,-1759 }, {  41,-1759 }, {   0,  20 }, {   0,1818 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1802 },

 {   0,   0 }, {  12,-1802 }, {  13,-1802 }, {  14,-1802 }, {   0,   0 },
 {   0,   0 }, {  17,-1802 }, {  18,-1802 }, {  19,-1802 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-1802 }, {  24,-1802 }, {  25,-1802 },
 {  26,-1802 }, {  27, 565 }, {  28,-1802 }, {  29,-1802 }, {  30,-1802 },
 {  31,-1802 }, {  32,-1802 }, {  33,-1802 }, {  34,-1802 }, {  35,-1802 },
 {  36,-1802 }, {  37,-1802 }, {  38,-1802 }, {  39,-1802 }, {  40,-1802 },
 {  41,-1802 }, {   0,  20 }, {   0,1775 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1845 }, {   0,   0 }, {  12,-1845 },
 {  13,-1845 }, {  14,-1845 }, {   0,   0 }, {   0,   0 }, {  17,-1845 },

 {  18,-1845 }, {  19,-1845 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-1845 }, {  24,-1845 }, {  25,-1845 }, {  26,-1845 }, {  27,-1845 },
 {  28,-1845 }, {  29,-1845 }, {  30,-1845 }, {  31,-1845 }, {  32,-1845 },
 {  33,-1845 }, {  34,-1845 }, {  35,-1845 }, {  36,-1845 }, {  37, 565 },
 {  38,-1845 }, {  39,-1845 }, {  40,-1845 }, {  41,-1845 }, {   0,  20 },
 {   0,1732 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1888 }, {   0,   0 }, {  12,-1888 }, {  13,-1888 }, {  14,-1888 },
 {   0,   0 }, {   0,   0 }, {  17,-1888 }, {  18,-1888 }, {  19,-1888 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1888 }, {  24,-1888 },

 {  25,-1888 }, {  26,-1888 }, {  27,-1888 }, {  28,-1888 }, {  29,-1888 },
 {  30,-1888 }, {  31,-1888 }, {  32,-1888 }, {  33,-1888 }, {  34,-1888 },
 {  35,-1888 }, {  36,-1888 }, {  37, 565 }, {  38,-1888 }, {  39,-1888 },
 {  40,-1888 }, {  41,-1888 }, {   0,  20 }, {   0,1689 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1931 }, {   0,   0 },
 {  12,-1931 }, {  13,-1931 }, {  14,-1931 }, {   0,   0 }, {   0,   0 },
 {  17,-1931 }, {  18,-1931 }, {  19,-1931 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-1931 }, {  24,-1931 }, {  25,-1931 }, {  26,-1931 },
 {  27,-1931 }, {  28,-1931 }, {  29,-1931 }, {  30, 565 }, {  31,-1931 },

 {  32,-1931 }, {  33,-1931 }, {  34,-1931 }, {  35,-1931 }, {  36,-1931 },
 {  37,-1931 }, {  38,-1931 }, {  39,-1931 }, {  40,-1931 }, {  41,-1931 },
 {   0,  20 }, {   0,1646 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1974 }, {   0,   0 }, {  12,-1974 }, {  13,-1974 },
 {  14,-1974 }, {   0,   0 }, {   0,   0 }, {  17,-1974 }, {  18,-1974 },
 {  19,-1974 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-1974 },
 {  24,-1974 }, {  25,-1974 }, {  26,-1974 }, {  27,-1974 }, {  28,-1974 },
 {  29,-1974 }, {  30,-1974 }, {  31,-1974 }, {  32,-1974 }, {  33,-1974 },
 {  34,-1974 }, {  35,-1974 }, {  36,-1974 }, {  37, 565 }, {  38,-1974 },

 {  39,-1974 }, {  40,-1974 }, {  41,-1974 }, {   0,  20 }, {   0,1603 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2017 },
 {   0,   0 }, {  12,-2017 }, {  13,-2017 }, {  14,-2017 }, {   0,   0 },
 {   0,   0 }, {  17,-2017 }, {  18,-2017 }, {  19,-2017 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-2017 }, {  24,-2017 }, {  25,-2017 },
 {  26,-2017 }, {  27,-2017 }, {  28,-2017 }, {  29,-2017 }, {  30,-2017 },
 {  31,-2017 }, {  32, 565 }, {  33,-2017 }, {  34,-2017 }, {  35,-2017 },
 {  36,-2017 }, {  37,-2017 }, {  38,-2017 }, {  39,-2017 }, {  40,-2017 },
 {  41,-2017 }, {   0,  20 }, {   0,1560 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2060 }, {   0,   0 }, {  12,-2060 },
 {  13,-2060 }, {  14,-2060 }, {   0,   0 }, {   0,   0 }, {  17,-2060 },
 {  18,-2060 }, {  19,-2060 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-2060 }, {  24,-2060 }, {  25,-2060 }, {  26,-2060 }, {  27, 565 },
 {  28,-2060 }, {  29,-2060 }, {  30,-2060 }, {  31,-2060 }, {  32,-2060 },
 {  33,-2060 }, {  34,-2060 }, {  35,-2060 }, {  36,-2060 }, {  37,-2060 },
 {  38,-2060 }, {  39,-2060 }, {  40,-2060 }, {  41,-2060 }, {   0,  20 },
 {   0,1517 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  10,-2103 }, {   0,   0 }, {  12,-2103 }, {  13,-2103 }, {  14,-2103 },
 {   0,   0 }, {   0,   0 }, {  17,-2103 }, {  18,-2103 }, {  19,-2103 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2103 }, {  24,-2103 },
 {  25,-2103 }, {  26,-2103 }, {  27, 565 }, {  28,-2103 }, {  29,-2103 },
 {  30,-2103 }, {  31,-2103 }, {  32,-2103 }, {  33,-2103 }, {  34,-2103 },
 {  35,-2103 }, {  36,-2103 }, {  37,-2103 }, {  38,-2103 }, {  39,-2103 },
 {  40,-2103 }, {  41,-2103 }, {   0,  18 }, {   0,1474 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2146 }, {   0,   0 },
 {  12,-2146 }, {  13,-2146 }, {  14,-2146 }, {   0,   0 }, {   0,   0 },

 {  17,-2146 }, {  18,-2146 }, {  19,-2146 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2146 }, {  24,-2146 }, {  25,-2146 }, {  26,-2146 },
 {  27,-2146 }, {  28,-2146 }, {  29,-2146 }, {  30,-2146 }, {  31,-2146 },
 {  32,-2146 }, {  33,-2146 }, {  34,-2146 }, {  35,-2146 }, {  36,-2146 },
 {  37,-2146 }, {  38,-2146 }, {  39,-2146 }, {  40,-2146 }, {  41,-2146 },
 {   0,   0 }, {   0,1431 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,-520 },
 {   9,   0 }, {  10,   0 }, {  11,  45 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },

 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {   0,   0 }, {   0,1386 }, {   1, -45 }, {   2, -45 }, {   3, -45 },
 {   4, -45 }, {   5, -45 }, {   6, -45 }, {   7, -45 }, {   8,-565 },
 {   9, -45 }, {  10, -45 }, {  11,   0 }, {  12, -45 }, {  13, -45 },
 {  14, -45 }, {  15, -45 }, {  16, -45 }, {  17, -45 }, {  18, -45 },
 {  19, -45 }, {  20, -45 }, {  21, -45 }, {  22, -45 }, {  23, -45 },
 {  24, -45 }, {  25, -45 }, {  26, -45 }, {  27, -45 }, {  28, -45 },

 {  29, -45 }, {  30, -45 }, {  31, -45 }, {  32, -45 }, {  33, -45 },
 {  34, -45 }, {  35, -45 }, {  36, -45 }, {  37, -45 }, {  38, -45 },
 {  39, -45 }, {  40, -45 }, {  41, -45 }, {  42, -45 }, {  43, -45 },
 {   0,   0 }, {   0,1341 }, {   1,   0 }, {   2,   0 }, {   3,-2061 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,-1173 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },

 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {   0,  20 }, {   0,1296 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-2324 }, {   0,   0 }, {  12,-2324 }, {  13,-2324 },
 {  14,-2324 }, {   0,   0 }, {   0,   0 }, {  17,-2324 }, {  18,-2324 },
 {  19,-2324 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2324 },
 {  24,-2324 }, {  25,-2324 }, {  26,-2324 }, {  27,-2324 }, {  28,-2324 },
 {  29,-2324 }, {  30,-2324 }, {  31,-2324 }, {  32,-2324 }, {  33,-2324 },
 {  34,-2324 }, {  35, 387 }, {  36,-2324 }, {  37,-2324 }, {  38,-2324 },

 {  39,-2324 }, {  40,-2324 }, {  41,-2324 }, {   0,  19 }, {   0,1253 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2367 },
 {   0,   0 }, {  12,-2367 }, {  13,-2367 }, {  14,-2367 }, {   0,   0 },
 {   0,   0 }, {  17,-2367 }, {  18,-2367 }, {  19,-2367 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-2367 }, {  24,-2367 }, {  25,-2367 },
 {  26,-2367 }, {  27,-2367 }, {  28,-2367 }, {  29,-2367 }, {  30,-2367 },
 {  31,-2367 }, {  32,-2367 }, {  33,-2367 }, {  34,-2367 }, {  35,-2367 },
 {  36,-2367 }, {  37,-2367 }, {  38,-2367 }, {  39,-2367 }, {  40,-2367 },
 {  41,-2367 }, {   0,  20 }, {   0,1210 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2410 }, {   0,   0 }, {  12,-2410 },
 {  13,-2410 }, {  14,-2410 }, {   0,   0 }, {   0,   0 }, {  17,-2410 },
 {  18,-2410 }, {  19,-2410 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-2410 }, {  24, 344 }, {  25,-2410 }, {  26,-2410 }, {  27,-2410 },
 {  28,-2410 }, {  29,-2410 }, {  30,-2410 }, {  31,-2410 }, {  32,-2410 },
 {  33,-2410 }, {  34,-2410 }, {  35,-2410 }, {  36,-2410 }, {  37,-2410 },
 {  38,-2410 }, {  39,-2410 }, {  40,-2410 }, {  41,-2410 }, {   0,  20 },
 {   0,1167 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  10,-2453 }, {   0,   0 }, {  12,-2453 }, {  13,-2453 }, {  14,-2453 },
 {   0,   0 }, {   0,   0 }, {  17,-2453 }, {  18,-2453 }, {  19,-2453 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2453 }, {  24,-2453 },
 {  25,-2453 }, {  26,-2453 }, {  27,-2453 }, {  28, 344 }, {  29,-2453 },
 {  30,-2453 }, {  31,-2453 }, {  32,-2453 }, {  33,-2453 }, {  34,-2453 },
 {  35,-2453 }, {  36,-2453 }, {  37,-2453 }, {  38,-2453 }, {  39,-2453 },
 {  40,-2453 }, {  41,-2453 }, {   0,   7 }, {   0,1124 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2496 }, {   0,   0 },
 {  12,-2496 }, {  13,-2496 }, {  14,-2496 }, {   0,   0 }, {   0,   0 },

 {  17,-2496 }, {  18,-2496 }, {  19,-2496 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2496 }, {  24,-2496 }, {  25,-2496 }, {  26,-2496 },
 {  27,-2496 }, {  28,-2496 }, {  29,-2496 }, {  30,-2496 }, {  31,-2496 },
 {  32,-2496 }, {  33,-2496 }, {  34,-2496 }, {  35,-2496 }, {  36,-2496 },
 {  37,-2496 }, {  38,-2496 }, {  39,-2496 }, {  40,-2496 }, {  41,-2496 },
 {   0,  20 }, {   0,1081 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-2539 }, {   0,   0 }, {  12,-2539 }, {  13,-2539 },
 {  14,-2539 }, {   0,   0 }, {   0,   0 }, {  17,-2539 }, {  18,-2539 },
 {  19,-2539 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2539 },

 {  24, 301 }, {  25,-2539 }, {  26,-2539 }, {  27,-2539 }, {  28,-2539 },
 {  29,-2539 }, {  30,-2539 }, {  31,-2539 }, {  32,-2539 }, {  33,-2539 },
 {  34,-2539 }, {  35,-2539 }, {  36,-2539 }, {  37,-2539 }, {  38,-2539 },
 {  39,-2539 }, {  40,-2539 }, {  41,-2539 }, {   0,  20 }, {   0,1038 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2582 },
 {   0,   0 }, {  12,-2582 }, {  13,-2582 }, {  14,-2582 }, {   0,   0 },
 {   0,   0 }, {  17,-2582 }, {  18,-2582 }, {  19,-2582 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-2582 }, {  24,-2582 }, {  25,-2582 },
 {  26,-2582 }, {  27, 301 }, {  28,-2582 }, {  29,-2582 }, {  30,-2582 },

 {  31,-2582 }, {  32,-2582 }, {  33,-2582 }, {  34,-2582 }, {  35,-2582 },
 {  36,-2582 }, {  37,-2582 }, {  38,-2582 }, {  39,-2582 }, {  40,-2582 },
 {  41,-2582 }, {   0,  20 }, {   0, 995 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2625 }, {   0,   0 }, {  12,-2625 },
 {  13,-2625 }, {  14,-2625 }, {   0,   0 }, {   0,   0 }, {  17,-2625 },
 {  18,-2625 }, {  19,-2625 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-2625 }, {  24,-2625 }, {  25,-2625 }, {  26,-2625 }, {  27,-2625 },
 {  28,-2625 }, {  29,-2625 }, {  30,-2625 }, {  31,-2625 }, {  32,-2625 },
 {  33,-2625 }, {  34,-2625 }, {  35,-2625 }, {  36,-2625 }, {  37, 301 },

 {  38,-2625 }, {  39,-2625 }, {  40,-2625 }, {  41,-2625 }, {   0,  20 },
 {   0, 952 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2668 }, {   0,   0 }, {  12,-2668 }, {  13,-2668 }, {  14,-2668 },
 {   0,   0 }, {   0,   0 }, {  17,-2668 }, {  18,-2668 }, {  19,-2668 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2668 }, {  24,-2668 },
 {  25,-2668 }, {  26,-2668 }, {  27,-2668 }, {  28,-2668 }, {  29,-2668 },
 {  30,-2668 }, {  31,-2668 }, {  32,-2668 }, {  33,-2668 }, {  34,-2668 },
 {  35,-2668 }, {  36,-2668 }, {  37,-2668 }, {  38, 301 }, {  39,-2668 },
 {  40,-2668 }, {  41,-2668 }, {   0,  20 }, {   0, 909 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2711 }, {   0,   0 },
 {  12,-2711 }, {  13,-2711 }, {  14,-2711 }, {   0,   0 }, {   0,   0 },
 {  17,-2711 }, {  18,-2711 }, {  19,-2711 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2711 }, {  24,-2711 }, {  25,-2711 }, {  26,-2711 },
 {  27,-2711 }, {  28,-2711 }, {  29,-2711 }, {  30,-2711 }, {  31, 301 },
 {  32,-2711 }, {  33,-2711 }, {  34,-2711 }, {  35,-2711 }, {  36,-2711 },
 {  37,-2711 }, {  38,-2711 }, {  39,-2711 }, {  40,-2711 }, {  41,-2711 },
 {   0,  20 }, {   0, 866 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  10,-2754 }, {   0,   0 }, {  12,-2754 }, {  13,-2754 },
 {  14,-2754 }, {   0,   0 }, {   0,   0 }, {  17,-2754 }, {  18,-2754 },
 {  19,-2754 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2754 },
 {  24,-2754 }, {  25,-2754 }, {  26,-2754 }, {  27,-2754 }, {  28,-2754 },
 {  29, 301 }, {  30,-2754 }, {  31,-2754 }, {  32,-2754 }, {  33,-2754 },
 {  34,-2754 }, {  35,-2754 }, {  36,-2754 }, {  37,-2754 }, {  38,-2754 },
 {  39,-2754 }, {  40,-2754 }, {  41,-2754 }, {   0,  20 }, {   0, 823 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2797 },
 {   0,   0 }, {  12,-2797 }, {  13,-2797 }, {  14,-2797 }, {   0,   0 },

 {   0,   0 }, {  17,-2797 }, {  18,-2797 }, {  19,-2797 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-2797 }, {  24, 301 }, {  25,-2797 },
 {  26,-2797 }, {  27,-2797 }, {  28,-2797 }, {  29,-2797 }, {  30,-2797 },
 {  31,-2797 }, {  32,-2797 }, {  33,-2797 }, {  34,-2797 }, {  35,-2797 },
 {  36,-2797 }, {  37,-2797 }, {  38,-2797 }, {  39,-2797 }, {  40,-2797 },
 {  41,-2797 }, {   0,  20 }, {   0, 780 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2840 }, {   0,   0 }, {  12,-2840 },
 {  13,-2840 }, {  14,-2840 }, {   0,   0 }, {   0,   0 }, {  17,-2840 },
 {  18,-2840 }, {  19,-2840 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  23,-2840 }, {  24,-2840 }, {  25,-2840 }, {  26,-2840 }, {  27,-2840 },
 {  28,-2840 }, {  29,-2840 }, {  30,-2840 }, {  31,-2840 }, {  32,-2840 },
 {  33, 301 }, {  34,-2840 }, {  35,-2840 }, {  36,-2840 }, {  37,-2840 },
 {  38,-2840 }, {  39,-2840 }, {  40,-2840 }, {  41,-2840 }, {   0,  20 },
 {   0, 737 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2883 }, {   0,   0 }, {  12,-2883 }, {  13,-2883 }, {  14,-2883 },
 {   0,   0 }, {   0,   0 }, {  17,-2883 }, {  18,-2883 }, {  19,-2883 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2883 }, {  24,-2883 },
 {  25,-2883 }, {  26,-2883 }, {  27,-2883 }, {  28,-2883 }, {  29,-2883 },

 {  30,-2883 }, {  31,-2883 }, {  32,-2883 }, {  33,-2883 }, {  34,-2883 },
 {  35,-2883 }, {  36,-2883 }, {  37, 301 }, {  38,-2883 }, {  39,-2883 },
 {  40,-2883 }, {  41,-2883 }, {   0,   3 }, {   0, 694 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2926 }, {   0,   0 },
 {  12,-2926 }, {  13,-2926 }, {  14,-2926 }, {   0,   0 }, {   0,   0 },
 {  17,-2926 }, {  18,-2926 }, {  19,-2926 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-2926 }, {  24,-2926 }, {  25,-2926 }, {  26,-2926 },
 {  27,-2926 }, {  28,-2926 }, {  29,-2926 }, {  30,-2926 }, {  31,-2926 },
 {  32,-2926 }, {  33,-2926 }, {  34,-2926 }, {  35,-2926 }, {  36,-2926 },

 {  37,-2926 }, {  38,-2926 }, {  39,-2926 }, {  40,-2926 }, {  41,-2926 },
 {   0,   2 }, {   0, 651 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-2969 }, {   0,   0 }, {  12,-2969 }, {  13,-2969 },
 {  14,-2969 }, {   0,   0 }, {   0,   0 }, {  17,-2969 }, {  18,-2969 },
 {  19,-2969 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-2969 },
 {  24,-2969 }, {  25,-2969 }, {  26,-2969 }, {  27,-2969 }, {  28,-2969 },
 {  29,-2969 }, {  30,-2969 }, {  31,-2969 }, {  32,-2969 }, {  33,-2969 },
 {  34,-2969 }, {  35,-2969 }, {  36,-2969 }, {  37,-2969 }, {  38,-2969 },
 {  39,-2969 }, {  40,-2969 }, {  41,-2969 }, {   0,  20 }, {   0, 608 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3012 },
 {   0,   0 }, {  12,-3012 }, {  13,-3012 }, {  14,-3012 }, {   0,   0 },
 {   0,   0 }, {  17,-3012 }, {  18,-3012 }, {  19,-3012 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-3012 }, {  24,-3012 }, {  25,-3012 },
 {  26,-516 }, {  27,-3012 }, {  28,-3012 }, {  29,-3012 }, {  30,-3012 },
 {  31,-3012 }, {  32,-3012 }, {  33,-3012 }, {  34,-3012 }, {  35,-3012 },
 {  36,-3012 }, {  37,-3012 }, {  38,-3012 }, {  39,-3012 }, {  40,-3012 },
 {  41,-3012 }, {   0,  20 }, {   0, 565 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  10,-3055 }, {   0,   0 }, {  12,-3055 },
 {  13,-3055 }, {  14,-3055 }, {   0,   0 }, {   0,   0 }, {  17,-3055 },
 {  18, 172 }, {  19,-3055 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-3055 }, {  24,-3055 }, {  25,-3055 }, {  26,-3055 }, {  27,-3055 },
 {  28,-3055 }, {  29,-3055 }, {  30,-3055 }, {  31,-3055 }, {  32,-3055 },
 {  33,-3055 }, {  34,-3055 }, {  35,-3055 }, {  36,-3055 }, {  37,-3055 },
 {  38,-3055 }, {  39,-3055 }, {  40,-3055 }, {  41,-3055 }, {   0,  20 },
 {   0, 522 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3098 }, {   0,   0 }, {  12,-3098 }, {  13,-3098 }, {  14,-3098 },

 {   0,   0 }, {   0,   0 }, {  17,-3098 }, {  18,-3098 }, {  19,-3098 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-3098 }, {  24,-3098 },
 {  25, 172 }, {  26,-3098 }, {  27,-3098 }, {  28,-3098 }, {  29,-3098 },
 {  30,-3098 }, {  31,-3098 }, {  32,-3098 }, {  33,-3098 }, {  34,-3098 },
 {  35,-3098 }, {  36,-3098 }, {  37,-3098 }, {  38,-3098 }, {  39,-3098 },
 {  40,-3098 }, {  41,-3098 }, {   0,   1 }, {   0, 479 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3141 }, {   0,   0 },
 {  12,-3141 }, {  13,-3141 }, {  14,-3141 }, {   0,   0 }, {   0,   0 },
 {  17,-3141 }, {  18,-3141 }, {  19,-3141 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  23,-3141 }, {  24,-3141 }, {  25,-3141 }, {  26,-3141 },
 {  27,-3141 }, {  28,-3141 }, {  29,-3141 }, {  30,-3141 }, {  31,-3141 },
 {  32,-3141 }, {  33,-3141 }, {  34,-3141 }, {  35,-3141 }, {  36,-3141 },
 {  37,-3141 }, {  38,-3141 }, {  39,-3141 }, {  40,-3141 }, {  41,-3141 },
 {   0,   5 }, {   0, 436 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3184 }, {   0,   0 }, {  12,-3184 }, {  13,-3184 },
 {  14,-3184 }, {   0,   0 }, {   0,   0 }, {  17,-3184 }, {  18,-3184 },
 {  19,-3184 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-3184 },
 {  24,-3184 }, {  25,-3184 }, {  26,-3184 }, {  27,-3184 }, {  28,-3184 },

 {  29,-3184 }, {  30,-3184 }, {  31,-3184 }, {  32,-3184 }, {  33,-3184 },
 {  34,-3184 }, {  35,-3184 }, {  36,-3184 }, {  37,-3184 }, {  38,-3184 },
 {  39,-3184 }, {  40,-3184 }, {  41,-3184 }, {   0,  20 }, {   0, 393 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3227 },
 {   0,   0 }, {  12,-3227 }, {  13,-3227 }, {  14,-3227 }, {   0,   0 },
 {   0,   0 }, {  17,-3227 }, {  18,-3227 }, {  19,-3227 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-3227 }, {  24,-3227 }, {  25,-3227 },
 {  26,-3227 }, {  27,  86 }, {  28,-3227 }, {  29,-3227 }, {  30,-3227 },
 {  31,-3227 }, {  32,-3227 }, {  33,-3227 }, {  34,-3227 }, {  35,-3227 },

 {  36,-3227 }, {  37,-3227 }, {  38,-3227 }, {  39,-3227 }, {  40,-3227 },
 {  41,-3227 }, {   0,  20 }, {   0, 350 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3270 }, {   0,   0 }, {  12,-3270 },
 {  13,-3270 }, {  14,-3270 }, {   0,   0 }, {   0,   0 }, {  17,-3270 },
 {  18,-3270 }, {  19,-3270 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-3270 }, {  24,-3270 }, {  25,-3270 }, {  26,-3270 }, {  27,  86 },
 {  28,-3270 }, {  29,-3270 }, {  30,-3270 }, {  31,-3270 }, {  32,-3270 },
 {  33,-3270 }, {  34,-3270 }, {  35,-3270 }, {  36,-3270 }, {  37,-3270 },
 {  38,-3270 }, {  39,-3270 }, {  40,-3270 }, {  41,-3270 }, {   0,  20 },

 {   0, 307 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3313 }, {   0,   0 }, {  12,-3313 }, {  13,-3313 }, {  14,-3313 },
 {   0,   0 }, {   0,   0 }, {  17,-3313 }, {  18,-3313 }, {  19,-3313 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-3313 }, {  24,-3313 },
 {  25,-3313 }, {  26,-3313 }, {  27,-3313 }, {  28,-3313 }, {  29,-3313 },
 {  30,-3313 }, {  31,-3313 }, {  32,-3313 }, {  33,-3313 }, {  34,-3313 },
 {  35,-3313 }, {  36,  86 }, {  37,-3313 }, {  38,-3313 }, {  39,-3313 },
 {  40,-3313 }, {  41,-3313 }, {   0,   4 }, {   0, 264 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3356 }, {   0,   0 },
 {  12,-3356 }, {  13,-3356 }, {  14,-3356 }, {   0,   0 }, {   0,   0 },
 {  17,-3356 }, {  18,-3356 }, {  19,-3356 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  23,-3356 }, {  24,-3356 }, {  25,-3356 }, {  26,-3356 },
 {  27,-3356 }, {  28,-3356 }, {  29,-3356 }, {  30,-3356 }, {  31,-3356 },
 {  32,-3356 }, {  33,-3356 }, {  34,-3356 }, {  35,-3356 }, {  36,-3356 },
 {  37,-3356 }, {  38,-3356 }, {  39,-3356 }, {  40,-3356 }, {  41,-3356 },
 {   0,  20 }, {   0, 221 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3399 }, {   0,   0 }, {  12,-3399 }, {  13,-3399 },

 {  14,-3399 }, {   0,   0 }, {   0,   0 }, {  17,-3399 }, {  18,-3399 },
 {  19,-3399 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  23,-3399 },
 {  24,-3399 }, {  25,-3399 }, {  26,-3399 }, {  27,-3399 }, {  28,-3399 },
 {  29,-3399 }, {  30,-3399 }, {  31,-3399 }, {  32,-3399 }, {  33,-3399 },
 {  34,-3399 }, {  35,-3399 }, {  36,-3399 }, {  37,-3399 }, {  38,-3399 },
 {  39,  88 }, {  40,-3399 }, {  41,-3399 }, {   0,   0 }, {   0, 178 },
 {   1,  88 }, {   2,  88 }, {   0,   0 }, {   4,-2985 }, {   5,  88 },
 {   6,  88 }, {   7,  88 }, {   8,  88 }, {   9,  88 }, {  10,  88 },
 {  11,  88 }, {  12,  88 }, {  13,  88 }, {  14,  88 }, {  15,  88 },
 {  16,  88 }, {  17,  88 }, {  18,  88 }, {  19,  88 }, {  20,  88 },

 {  21,  88 }, {  22,  88 }, {  23,  88 }, {  24,  88 }, {  25,  88 },
 {  26,  88 }, {  27,  88 }, {  28,  88 }, {  29,  88 }, {  30,  88 },
 {  31,  88 }, {  32,  88 }, {  33,  88 }, {  34,  88 }, {  35,  88 },
 {  36,  88 }, {  37,  88 }, {  38,  88 }, {  39,  88 }, {  40,  88 },
 {  41,  88 }, {  42,  88 }, {  43,  88 }, {   0,  20 }, {   0, 133 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3487 },
 {   0,   0 }, {  12,-3487 }, {  13,-3487 }, {  14,-3487 }, {   0,   0 },
 {   0,   0 }, {  17,-3487 }, {  18,-3487 }, {  19,-3487 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  23,-3487 }, {  24,-3487 }, {  25,-3487 },

 {  26,-3487 }, {  27,-3487 }, {  28,-3487 }, {  29,-3487 }, {  30,  88 },
 {  31,-3487 }, {  32,-3487 }, {  33,-3487 }, {  34,-3487 }, {  35,-3487 },
 {  36,-3487 }, {  37,-3487 }, {  38,-3487 }, {  39,-3487 }, {  40,-3487 },
 {  41,-3487 }, {   0,   0 }, {   0,  90 }, {   1,   0 }, {   2,   0 },
 {   0,   0 }, {   4,-3073 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },

 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },
 {  43,   0 }, {   0,  17 }, {   0,  45 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3575 }, {   0,   0 }, {  12,-3575 },
 {  13,-3575 }, {  14,-3575 }, {   0,   0 }, {   0,   0 }, {  17,-3575 },
 {  18,-3575 }, {  19,-3575 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  23,-3575 }, {  24,-3575 }, {  25,-3575 }, {  26,-3575 }, {  27,-3575 },
 {  28,-3575 }, {  29,-3575 }, {  30,-3575 }, {  31,-3575 }, {  32,-3575 },
 {  33,-3575 }, {  34,-3575 }, {  35,-3575 }, {  36,-3575 }, {  37,-3575 },

 {  38,-3575 }, {  39,-3575 }, {  40,-3575 }, {  41,-3575 }, {   0,   0 },
 {   0,   0 }, {  44,  35 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[48],

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        7,    8,    1,    9,    1,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    1,
       16,    1,    1,    1,   17,   17,   17,   18,   17,   19,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       20,   21,   22,    1,   23,    1,   24,   17,   25,   26,

       27,   28,   29,   30,   31,   17,   17,   32,   33,   34,
       35,   36,   17,   37,   38,   39,   40,   41,   17,   17,
       17,   17,   42,    1,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[35] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int glfx_flex_debug;
int glfx_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *glfxtext;
#line 1 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
/*
Flex and Bison files have three sections:

the first is sort of "control" information,
the second is the actual token/grammar definitions,
the last is C code to be copied verbatim to the output.
*/
#line 16 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
    #ifdef _MSC_VER
    // MS's C++ compiler is more strict than gcc

    // No unistd.h
    #define YY_NO_UNISTD_H

    // Direct IO functions (read and such)
    #include <io.h>

    // Disable the warning for glfxwrap
    #pragma warning( disable: 4003 )

    // Disable the warning about depracted naming of _read and friends
    #pragma warning( disable: 4996 )

    #endif

    #ifdef _M_X64
    // flex is (still) incompatible with x64
    // it makes some casts from pointers to integers (pointer casts seem to be fixed in the latest version) and from size_t to integers
    // it should work though, nothing too serious
    #pragma warning( disable:4267 )
    #pragma warning( disable:4244 )
    #endif

    #include <iostream>
    #include <string>
    #include <sstream>

    #include "glfxParser.h"
    #include "glfxClasses.h"

    // tokens from parser generator
    #include "glfxLALRParser.hpp"

    static void errLex(const char* tok);

    using namespace std;
    using namespace glfxParser;
#line 1455 "glfxScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int glfxlex_destroy (void );

int glfxget_debug (void );

void glfxset_debug (int debug_flag  );

YY_EXTRA_TYPE glfxget_extra (void );

void glfxset_extra (YY_EXTRA_TYPE user_defined  );

FILE *glfxget_in (void );

void glfxset_in  (FILE * in_str  );

FILE *glfxget_out (void );

void glfxset_out  (FILE * out_str  );

yy_size_t glfxget_leng (void );

char *glfxget_text (void );

int glfxget_lineno (void );

void glfxset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int glfxwrap (void );
#else
extern int glfxwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( glfxtext, glfxleng, 1, glfxout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(glfxin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(glfxin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int glfxlex (void);

#define YY_DECL int glfxlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after glfxtext and glfxleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( glfxleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(glfxtext[glfxleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 62 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"

#line 1626 "glfxScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! glfxin )
			glfxin = stdin;

		if ( ! glfxout )
			glfxout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			glfxensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				glfx_create_buffer(glfxin,YY_BUF_SIZE );
		}

		glfx_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of glfxtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = yy_ec[YY_SC_TO_UI(*++yy_cp)]  )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < glfxleng; ++yyl )
				if ( glfxtext[yyl] == '\n' )
					   
    glfxlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=false; return PROGRAM;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 64 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=true; return PROGRAM;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 65 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; return SHADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 66 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; return INTERFACE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return SAMPLER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 68 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
{
									    string tmp(glfxtext);
									    size_t firstLoc=tmp.find('"')+1;
									    size_t secondLoc=tmp.find('"', firstLoc);
									    glfxlval.strs[0]=tmp.substr(firstLoc, secondLoc-firstLoc);
									    glfxlval.lineno=glfxlineno-1; // flex has already jumped one line, since \n was eaten
									    return INCLUDE;
									}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.strs[0]=glfxtext; return STORAGET;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=VS; return SHADER_TYPE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TC; return SHADER_TYPE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TE; return SHADER_TYPE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=GS; return SHADER_TYPE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=FS; return SHADER_TYPE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=CS; return SHADER_TYPE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=atoi(glfxtext); return NUM;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.fnum=(float)atof(glfxtext); return FLOAT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 85 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return STORAGEQ;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 86 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return GL_FRAGDEPTH;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 87 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=1; return NUM;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 88 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=0; return NUM;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 89 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return IDENTIFIER;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 90 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 91 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 92 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LB;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 93 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RB;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 94 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EMPTY_ARRAY_BRACKETS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 95 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COMMA;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 96 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EQUALS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 97 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return SC;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 98 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COLON;}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 99 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Single line comment (with possible continuation)
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 100 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Multiline comment
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 101 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 102 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {errLex(glfxtext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 103 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"
ECHO;
	YY_BREAK
#line 1895 "glfxScanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed glfxin at a new source and called
			 * glfxlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = glfxin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( glfxwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * glfxtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of glfxlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glfxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			glfxrestart(glfxin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glfxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 1;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up glfxtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --glfxlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					glfxrestart(glfxin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( glfxwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve glfxtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    glfxlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void glfxrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        glfxensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            glfx_create_buffer(glfxin,YY_BUF_SIZE );
	}

	glfx_init_buffer(YY_CURRENT_BUFFER,input_file );
	glfx_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void glfx_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		glfxpop_buffer_state();
	 *		glfxpush_buffer_state(new_buffer);
     */
	glfxensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	glfx_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (glfxwrap()) processing, but the only time this flag
	 * is looked at is after glfxwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void glfx_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	glfxin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE glfx_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glfxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_is_our_buffer = 1;

	glfx_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with glfx_create_buffer()
 * 
 */
    void glfx_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glfxfree((void *) b->yy_ch_buf  );

	glfxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a glfxrestart() or at EOF.
 */
    static void glfx_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	glfx_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then glfx_init_buffer was _probably_
     * called from glfxrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void glfx_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		glfx_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	glfxensure_buffer_stack();

	/* This block is copied from glfx_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from glfx_switch_to_buffer. */
	glfx_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void glfxpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	glfx_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		glfx_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void glfxensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE glfx_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	glfx_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to glfxlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       glfx_scan_bytes() instead.
 */
YY_BUFFER_STATE glfx_scan_string (yyconst char * yystr )
{
    
	return glfx_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to glfxlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE glfx_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) glfxalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = glfx_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in glfx_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		glfxtext[glfxleng] = (yy_hold_char); \
		(yy_c_buf_p) = glfxtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		glfxleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int glfxget_lineno  (void)
{
        
    return glfxlineno;
}

/** Get the input stream.
 * 
 */
FILE *glfxget_in  (void)
{
        return glfxin;
}

/** Get the output stream.
 * 
 */
FILE *glfxget_out  (void)
{
        return glfxout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t glfxget_leng  (void)
{
        return glfxleng;
}

/** Get the current token.
 * 
 */

char *glfxget_text  (void)
{
        return glfxtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void glfxset_lineno (int  line_number )
{
    
    glfxlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see glfx_switch_to_buffer
 */
void glfxset_in (FILE *  in_str )
{
        glfxin = in_str ;
}

void glfxset_out (FILE *  out_str )
{
        glfxout = out_str ;
}

int glfxget_debug  (void)
{
        return glfx_flex_debug;
}

void glfxset_debug (int  bdebug )
{
        glfx_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from glfxlex_destroy(), so don't allocate here.
     */

    /* We do not touch glfxlineno unless the option is enabled. */
    glfxlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    glfxin = stdin;
    glfxout = stdout;
#else
    glfxin = (FILE *) 0;
    glfxout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * glfxlex_init()
     */
    return 0;
}

/* glfxlex_destroy is for both reentrant and non-reentrant scanners. */
int glfxlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		glfx_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		glfxpop_buffer_state();
	}

	/* Destroy the stack itself. */
	glfxfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * glfxlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glfxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glfxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glfxfree (void * ptr )
{
	free( (char *) ptr );	/* see glfxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 103 "C:\\Simul\\dev\\Simul\\External\\glfx\\src\\glfx.lpp"



void errLex(const char* tok)
{
    ostringstream errMsg;
    
    errMsg<<"0("<<glfxlineno<<") : error: Unkown token '"<<tok<<'\'';
    throw errMsg.str();
}

string glfxreadblock(unsigned char openChar, unsigned char closeChar)
{
    string str;
    int braceBalance=0;
    unsigned char c;
    bool done=false;
    do {
        c=(unsigned char)yyinput();
        str+=c;
        if(c==0)
            throw "Brace balance error\n";
        else if(c==openChar)
            braceBalance++;
        else if(c==closeChar) {
            braceBalance--;
            if(braceBalance<0)
                throw "Brace balance error\n";
            else if(braceBalance==0)
                done=true;
        }
    } while(!done);
    return str;
}

