#line 2 "src/glfxScanner.cpp"

#line 4 "src/glfxScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer glfx_create_buffer
#define yy_delete_buffer glfx_delete_buffer
#define yy_flex_debug glfx_flex_debug
#define yy_init_buffer glfx_init_buffer
#define yy_flush_buffer glfx_flush_buffer
#define yy_load_buffer_state glfx_load_buffer_state
#define yy_switch_to_buffer glfx_switch_to_buffer
#define yyin glfxin
#define yyleng glfxleng
#define yylex glfxlex
#define yylineno glfxlineno
#define yyout glfxout
#define yyrestart glfxrestart
#define yytext glfxtext
#define yywrap glfxwrap
#define yyalloc glfxalloc
#define yyrealloc glfxrealloc
#define yyfree glfxfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE glfxrestart(glfxin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t glfxleng;

extern FILE *glfxin, *glfxout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE glfxlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-glfxlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < glfxleng; ++yyl )\
                    if ( glfxtext[yyl] == '\n' )\
                        --glfxlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up glfxtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via glfxrestart()), so that the user can continue scanning by
	 * just pointing glfxin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when glfxtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t glfxleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow glfxwrap()'s to do buffer switches
 * instead of setting up a fresh glfxin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void glfxrestart (FILE *input_file  );
void glfx_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE glfx_create_buffer (FILE *file,int size  );
void glfx_delete_buffer (YY_BUFFER_STATE b  );
void glfx_flush_buffer (YY_BUFFER_STATE b  );
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void glfxpop_buffer_state (void );

static void glfxensure_buffer_stack (void );
static void glfx_load_buffer_state (void );
static void glfx_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER glfx_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE glfx_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE glfx_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE glfx_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *glfxalloc (yy_size_t  );
void *glfxrealloc (void *,yy_size_t  );
void glfxfree (void *  );

#define yy_new_buffer glfx_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define glfxwrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *glfxin = (FILE *) 0, *glfxout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int glfxlineno;

int glfxlineno = 1;

extern char *glfxtext;
#define yytext_ptr glfxtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up glfxtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	glfxleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[5554] =
    {
 {   0,   0 }, {   0,5503 }, {   0,   0 }, {   0,5501 }, {   1, 106 },
 {   2, 108 }, {   3, 110 }, {   4, 106 }, {   5, 106 }, {   6, 112 },
 {   7, 114 }, {   8, 106 }, {   9, 116 }, {  10, 118 }, {  11, 169 },
 {  12, 171 }, {  13, 175 }, {  14, 179 }, {  15, 195 }, {  16, 208 },
 {  17, 230 }, {  18, 230 }, {  19, 281 }, {  20, 230 }, {  21, 230 },
 {  22, 230 }, {  23, 230 }, {  24, 230 }, {  25, 230 }, {  26, 230 },
 {  27, 230 }, {  28, 332 }, {  29, 106 }, {  30, 106 }, {  31, 106 },
 {  32, 230 }, {  33, 346 }, {  34, 230 }, {  35, 230 }, {  36, 397 },
 {  37, 448 }, {  38, 230 }, {  39, 499 }, {  40, 230 }, {  41, 230 },
 {  42, 230 }, {  43, 550 }, {  44, 601 }, {  45, 230 }, {  46, 652 },

 {  47, 703 }, {  48, 230 }, {  49, 754 }, {  50, 336 }, {  51, 338 },
 {   0,   0 }, {   0,5448 }, {   1,  53 }, {   2,  55 }, {   3,  57 },
 {   4,  53 }, {   5, 360 }, {   6,  59 }, {   7,  61 }, {   8,  53 },
 {   9,  63 }, {  10,  65 }, {  11, 116 }, {  12, 118 }, {  13, 122 },
 {  14, 126 }, {  15, 142 }, {  16, 155 }, {  17, 177 }, {  18, 177 },
 {  19, 228 }, {  20, 177 }, {  21, 177 }, {  22, 177 }, {  23, 177 },
 {  24, 177 }, {  25, 177 }, {  26, 177 }, {  27, 177 }, {  28, 279 },
 {  29,  53 }, {  30,  53 }, {  31,  53 }, {  32, 177 }, {  33, 293 },
 {  34, 177 }, {  35, 177 }, {  36, 344 }, {  37, 395 }, {  38, 177 },
 {  39, 446 }, {  40, 177 }, {  41, 177 }, {  42, 177 }, {  43, 497 },

 {  44, 548 }, {  45, 177 }, {  46, 599 }, {  47, 650 }, {  48, 177 },
 {  49, 701 }, {  50, 283 }, {  51, 285 }, {   0,  34 }, {   0,5395 },
 {   0,  33 }, {   0,5393 }, {   0,  33 }, {   0,5391 }, {   0,  22 },
 {   0,5389 }, {   0,  23 }, {   0,5387 }, {   0,  27 }, {   0,5385 },
 {   0,  21 }, {   0,5383 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10, 687 }, {   0,   0 }, {  12, 738 }, {  13, 738 },
 {  14, 687 }, {   0,   0 }, {   0,   0 }, {  17, 687 }, {  18, 687 },
 {  19, 687 }, {  20, 687 }, {  21, 687 }, {  22, 687 }, {  23, 687 },
 {  24, 687 }, {  25, 687 }, {  26, 687 }, {  27, 687 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31, 687 }, {  32, 687 }, {  33, 687 },
 {  34, 687 }, {  35, 687 }, {  36, 687 }, {  37, 687 }, {  38, 687 },
 {  39, 687 }, {  40, 687 }, {  41, 687 }, {  42, 687 }, {  43, 687 },
 {  44, 687 }, {  45, 687 }, {  46, 687 }, {  47, 687 }, {  48, 687 },
 {  49, 687 }, {   0,  34 }, {   0,5332 }, {   0,  15 }, {   0,5330 },
 {   0,   0 }, {   0,   0 }, {   0,  15 }, {   0,5326 }, {   0,   0 },
 {   8, 738 }, {   0,  21 }, {   0,5322 }, {  11, 791 }, {  10, 280 },
 {   0,   0 }, {  12, 842 }, {  13, 842 }, {  10, 276 }, {   0,   0 },
 {  12, 842 }, {  13, 842 }, {  10, 626 }, {   0,   0 }, {  12, 626 },
 {  13, 626 }, {  14, 626 }, {   0,  29 }, {   0,5306 }, {  17, 626 },

 {  18, 626 }, {  19, 626 }, {  20, 626 }, {  21, 626 }, {  22, 626 },
 {  23, 626 }, {  24, 626 }, {  25, 626 }, {  26, 626 }, {  27, 626 },
 {   0,  28 }, {   0,5293 }, {   0,   0 }, {  31, 626 }, {  32, 626 },
 {  33, 626 }, {  34, 626 }, {  35, 626 }, {  36, 626 }, {  37, 626 },
 {  38, 626 }, {  39, 626 }, {  40, 626 }, {  41, 626 }, {  42, 626 },
 {  43, 626 }, {  44, 626 }, {  45, 626 }, {  46, 626 }, {  47, 626 },
 {  48, 626 }, {  49, 626 }, {   0,  21 }, {   0,5271 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 575 }, {   0,   0 },
 {  12, 575 }, {  13, 575 }, {  14, 575 }, {   0,   0 }, {   0,   0 },

 {  17, 575 }, {  18, 575 }, {  19, 575 }, {  20, 575 }, {  21, 575 },
 {  22, 575 }, {  23, 575 }, {  24, 575 }, {  25, 575 }, {  26, 575 },
 {  27, 575 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, 575 },
 {  32, 575 }, {  33, 575 }, {  34, 575 }, {  35, 575 }, {  36, 575 },
 {  37, 575 }, {  38, 575 }, {  39, 575 }, {  40, 575 }, {  41, 575 },
 {  42, 575 }, {  43, 575 }, {  44, 575 }, {  45, 575 }, {  46, 575 },
 {  47, 575 }, {  48, 575 }, {  49, 575 }, {   0,  21 }, {   0,5220 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 524 },
 {   0,   0 }, {  12, 524 }, {  13, 524 }, {  14, 524 }, {   0,   0 },

 {   0,   0 }, {  17, 524 }, {  18, 524 }, {  19, 524 }, {  20, 524 },
 {  21, 524 }, {  22, 524 }, {  23, 524 }, {  24, 740 }, {  25, 524 },
 {  26, 524 }, {  27, 524 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31, 524 }, {  32, 524 }, {  33, 524 }, {  34, 524 }, {  35, 524 },
 {  36, 524 }, {  37, 524 }, {  38, 524 }, {  39, 524 }, {  40, 524 },
 {  41, 524 }, {  42, 524 }, {  43, 524 }, {  44, 524 }, {  45, 524 },
 {  46, 524 }, {  47, 524 }, {  48, 524 }, {  49, 524 }, {   0,  34 },
 {   0,5169 }, {   0,   0 }, {   2, 740 }, {   0,  24 }, {   0,5165 },
 {   0,  25 }, {   0,5163 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  21 }, {   0,5155 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 459 },
 {   0,   0 }, {  12, 459 }, {  13, 459 }, {  14, 459 }, {   0,   0 },
 {  30, 744 }, {  17, 459 }, {  18, 459 }, {  19, 459 }, {  20, 459 },
 {  21, 459 }, {  22, 459 }, {  23, 459 }, {  24, 459 }, {  25, 459 },
 {  26, 459 }, {  27, 459 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31, 459 }, {  32, 459 }, {  33, 459 }, {  34, 459 }, {  35, 740 },
 {  36, 459 }, {  37, 459 }, {  38, 459 }, {  39, 459 }, {  40, 459 },
 {  41, 459 }, {  42, 459 }, {  43, 459 }, {  44, 459 }, {  45, 459 },
 {  46, 791 }, {  47, 459 }, {  48, 459 }, {  49, 459 }, {   0,  21 },

 {   0,5104 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10, 408 }, {   0,   0 }, {  12, 408 }, {  13, 408 }, {  14, 408 },
 {   0,  34 }, {   0,5088 }, {  17, 408 }, {  18, 408 }, {  19, 408 },
 {  20, 408 }, {  21, 408 }, {  22, 408 }, {  23, 408 }, {  24, 408 },
 {  25, 408 }, {  26, 408 }, {  27, 408 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31, 408 }, {  32, 791 }, {  33, 408 }, {  34, 408 },
 {  35, 408 }, {  36, 408 }, {  37, 408 }, {  38, 408 }, {  39, 408 },
 {  40, 408 }, {  41, 408 }, {  42, 408 }, {  43, 408 }, {  44, 408 },
 {  45, 408 }, {  46, 842 }, {  47, 408 }, {  48, 408 }, {  49, 408 },

 {   0,  21 }, {   0,5053 }, {   0,   0 }, {   0,  16 }, {   0,5050 },
 {  39, 740 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10, 357 }, {   0,   0 }, {  12, 357 }, {  13, 357 },
 {  14, 357 }, {  12, 740 }, {  13, 740 }, {  17, 357 }, {  18, 357 },
 {  19, 357 }, {  20, 357 }, {  21, 357 }, {  22, 357 }, {  23, 357 },
 {  24, 357 }, {  25, 357 }, {  26, 357 }, {  27, 357 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31, 357 }, {  32, 357 }, {  33, 357 },
 {  34, 357 }, {  35, 357 }, {  36, 357 }, {  37, 357 }, {  38, 357 },
 {  39, 357 }, {  40, 842 }, {  41, 357 }, {  42, 357 }, {  43, 357 },
 {  44, 357 }, {  45, 357 }, {  46, 893 }, {  47, 357 }, {  48, 357 },

 {  49, 357 }, {   0,  21 }, {   0,5002 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10, 306 }, {   0,   0 }, {  12, 306 },
 {  13, 306 }, {  14, 306 }, {   0,   0 }, {   0,   0 }, {  17, 306 },
 {  18, 306 }, {  19, 306 }, {  20, 306 }, {  21, 306 }, {  22, 306 },
 {  23, 306 }, {  24, 306 }, {  25, 306 }, {  26, 306 }, {  27, 306 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, 306 }, {  32, 306 },
 {  33, 306 }, {  34, 306 }, {  35, 306 }, {  36, 306 }, {  37, 306 },
 {  38, 306 }, {  39, 306 }, {  40, 306 }, {  41, 306 }, {  42, 893 },
 {  43, 306 }, {  44, 306 }, {  45, 306 }, {  46, 306 }, {  47, 306 },

 {  48, 306 }, {  49, 306 }, {   0,  21 }, {   0,4951 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 255 }, {   0,   0 },
 {  12, 255 }, {  13, 255 }, {  14, 255 }, {   0,   0 }, {   0,   0 },
 {  17, 255 }, {  18, 255 }, {  19, 255 }, {  20, 255 }, {  21, 255 },
 {  22, 255 }, {  23, 255 }, {  24, 255 }, {  25, 255 }, {  26, 255 },
 {  27, 255 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, 255 },
 {  32, 255 }, {  33, 255 }, {  34, 255 }, {  35, 255 }, {  36, 255 },
 {  37, 255 }, {  38, 255 }, {  39, 255 }, {  40, 255 }, {  41, 255 },
 {  42, 255 }, {  43, 255 }, {  44, 255 }, {  45, 255 }, {  46, 255 },

 {  47, 255 }, {  48, 893 }, {  49, 255 }, {   0,  21 }, {   0,4900 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 204 },
 {   0,   0 }, {  12, 204 }, {  13, 204 }, {  14, 204 }, {   0,   0 },
 {   0,   0 }, {  17, 204 }, {  18, 204 }, {  19, 204 }, {  20, 204 },
 {  21, 204 }, {  22, 204 }, {  23, 204 }, {  24, 204 }, {  25, 204 },
 {  26, 204 }, {  27, 204 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31, 204 }, {  32, 893 }, {  33, 204 }, {  34, 204 }, {  35, 204 },
 {  36, 204 }, {  37, 204 }, {  38, 204 }, {  39, 204 }, {  40, 204 },
 {  41, 204 }, {  42, 204 }, {  43, 204 }, {  44, 204 }, {  45, 944 },

 {  46, 204 }, {  47, 204 }, {  48, 204 }, {  49, 204 }, {   0,  21 },
 {   0,4849 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10, 153 }, {   0,   0 }, {  12, 153 }, {  13, 153 }, {  14, 153 },
 {   0,   0 }, {   0,   0 }, {  17, 153 }, {  18, 153 }, {  19, 153 },
 {  20, 153 }, {  21, 153 }, {  22, 153 }, {  23, 153 }, {  24, 153 },
 {  25, 153 }, {  26, 153 }, {  27, 153 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31, 153 }, {  32, 944 }, {  33, 153 }, {  34, 153 },
 {  35, 153 }, {  36, 153 }, {  37, 153 }, {  38, 995 }, {  39, 153 },
 {  40, 153 }, {  41, 153 }, {  42, 153 }, {  43, 153 }, {  44, 153 },

 {  45, 153 }, {  46, 153 }, {  47,1046 }, {  48, 153 }, {  49, 153 },
 {   0,  21 }, {   0,4798 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10, 102 }, {   0,   0 }, {  12, 102 }, {  13, 102 },
 {  14, 102 }, {   0,   0 }, {   0,   0 }, {  17, 102 }, {  18, 102 },
 {  19, 102 }, {  20, 102 }, {  21, 102 }, {  22, 102 }, {  23, 102 },
 {  24, 102 }, {  25, 102 }, {  26, 102 }, {  27, 102 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31, 102 }, {  32, 102 }, {  33,1046 },
 {  34, 102 }, {  35,1097 }, {  36, 102 }, {  37, 102 }, {  38, 102 },
 {  39, 102 }, {  40, 102 }, {  41, 102 }, {  42, 102 }, {  43, 102 },

 {  44, 102 }, {  45,1148 }, {  46, 102 }, {  47, 102 }, {  48, 102 },
 {  49, 102 }, {   0,  21 }, {   0,4747 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,  51 }, {   0,   0 }, {  12,  51 },
 {  13,  51 }, {  14,  51 }, {   0,   0 }, {   0,   0 }, {  17,  51 },
 {  18,  51 }, {  19,  51 }, {  20,  51 }, {  21,  51 }, {  22,  51 },
 {  23,  51 }, {  24,  51 }, {  25,  51 }, {  26,  51 }, {  27,  51 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,  51 }, {  32,  51 },
 {  33,  51 }, {  34,  51 }, {  35,  51 }, {  36,  51 }, {  37,  51 },
 {  38,  51 }, {  39,  51 }, {  40,  51 }, {  41,  51 }, {  42,  51 },

 {  43,  51 }, {  44,  51 }, {  45,  51 }, {  46,1148 }, {  47,  51 },
 {  48,  51 }, {  49,  51 }, {   0,  21 }, {   0,4696 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,   0 }, {   0,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {   0,   0 }, {   0,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },

 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {   0,  16 }, {   0,4645 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, -51 },
 {   0,   0 }, {  12,1097 }, {  13,1097 }, {  14, -51 }, {   0,   0 },
 {   0,   0 }, {  17, -51 }, {  18, -51 }, {  19, -51 }, {  20, -51 },
 {  21, -51 }, {  22, -51 }, {  23, -51 }, {  24, -51 }, {  25, -51 },
 {  26, -51 }, {  27, -51 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31, -51 }, {  32, -51 }, {  33, -51 }, {  34, -51 }, {  35, -51 },
 {  36, -51 }, {  37, -51 }, {  38, -51 }, {  39, -51 }, {  40, -51 },

 {  41, -51 }, {  42, -51 }, {  43, -51 }, {  44, -51 }, {  45, -51 },
 {  46, -51 }, {  47, -51 }, {  48, -51 }, {  49, -51 }, {   0,   0 },
 {   0,4594 }, {   1,1097 }, {   2,1097 }, {   3,1097 }, {   4,1097 },
 {   5,1097 }, {   6,1097 }, {   7,1097 }, {   8,1150 }, {   9,1097 },
 {  10,1097 }, {  11,1097 }, {  12,1097 }, {  13,1097 }, {  14,1097 },
 {  15,1097 }, {  16,1097 }, {  17,1097 }, {  18,1097 }, {  19,1097 },
 {  20,1097 }, {  21,1097 }, {  22,1097 }, {  23,1097 }, {  24,1097 },
 {  25,1097 }, {  26,1097 }, {  27,1097 }, {  28,1097 }, {  29,1097 },
 {  30,1097 }, {  31,1097 }, {  32,1097 }, {  33,1097 }, {  34,1097 },
 {  35,1097 }, {  36,1097 }, {  37,1097 }, {  38,1097 }, {  39,1097 },

 {  40,1097 }, {  41,1097 }, {  42,1097 }, {  43,1097 }, {  44,1097 },
 {  45,1097 }, {  46,1097 }, {  47,1097 }, {  48,1097 }, {  49,1097 },
 {  50,1097 }, {  51,1097 }, {   0,   0 }, {   0,4541 }, {   1,1150 },
 {   2,1150 }, {   3, 206 }, {   4,1150 }, {   5,1150 }, {   6,1150 },
 {   7,1150 }, {   8,1150 }, {   9,1150 }, {  10,1150 }, {  11,1150 },
 {  12,1150 }, {  13,1150 }, {  14,1150 }, {  15,1150 }, {  16,1150 },
 {  17,1150 }, {  18,1150 }, {  19,1150 }, {  20,1150 }, {  21,1150 },
 {  22,1150 }, {  23,1150 }, {  24,1150 }, {  25,1150 }, {  26,1150 },
 {  27,1150 }, {  28,1150 }, {  29,1203 }, {  30,1150 }, {  31,1150 },
 {  32,1150 }, {  33,1150 }, {  34,1150 }, {  35,1150 }, {  36,1150 },

 {  37,1150 }, {  38,1150 }, {  39,1150 }, {  40,1150 }, {  41,1150 },
 {  42,1150 }, {  43,1150 }, {  44,1150 }, {  45,1150 }, {  46,1150 },
 {  47,1150 }, {  48,1150 }, {  49,1150 }, {  50,1150 }, {  51,1150 },
 {   0,   0 }, {   0,4488 }, {   0,   0 }, {   0,   0 }, {   0,  15 },
 {   0,4484 }, {   0,   0 }, {   0,   0 }, {   0,  21 }, {   0,4480 },
 {   0,   0 }, {  10,-562 }, {   0,   0 }, {  12,   0 }, {  13,   0 },
 {  10,-566 }, {   0,   0 }, {  12,   0 }, {  13,   0 }, {  10,-216 },
 {   0,   0 }, {  12,-216 }, {  13,-216 }, {  14,-216 }, {   0,   0 },
 {   0,   0 }, {  17,-216 }, {  18,-216 }, {  19,-216 }, {  20,-216 },
 {  21,-216 }, {  22,-216 }, {  23,-216 }, {  24,-216 }, {  25,-216 },

 {  26,-216 }, {  27,-216 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,1195 }, {  32,-216 }, {  33,-216 }, {  34,-216 }, {  35,-216 },
 {  36,-216 }, {  37,-216 }, {  38,-216 }, {  39,-216 }, {  40,-216 },
 {  41,-216 }, {  42,-216 }, {  43,-216 }, {  44,-216 }, {  45,-216 },
 {  46,-216 }, {  47,-216 }, {  48,-216 }, {  49,-216 }, {   0,   0 },
 {   0,4429 }, {   0,   0 }, {   2,   0 }, {   0,  26 }, {   0,4425 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  21 }, {   0,4415 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-281 },

 {   0,   0 }, {  12,-281 }, {  13,-281 }, {  14,-281 }, {   0,   0 },
 {  30,   4 }, {  17,-281 }, {  18,-281 }, {  19,-281 }, {  20,-281 },
 {  21,-281 }, {  22,-281 }, {  23,-281 }, {  24,-281 }, {  25,-281 },
 {  26,-281 }, {  27,-281 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-281 }, {  32,-281 }, {  33,-281 }, {  34,-281 }, {  35,-281 },
 {  36,-281 }, {  37,-281 }, {  38,-281 }, {  39,-281 }, {  40,-281 },
 {  41,-281 }, {  42,1181 }, {  43,-281 }, {  44,-281 }, {  45,-281 },
 {  46,-281 }, {  47,-281 }, {  48,-281 }, {  49,-281 }, {   0,  14 },
 {   0,4364 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  10,-332 }, {   0,   0 }, {  12,-332 }, {  13,-332 }, {  14,-332 },
 {   0,   0 }, {   0,4348 }, {  17,-332 }, {  18,-332 }, {  19,-332 },
 {  20,-332 }, {  21,-332 }, {  22,-332 }, {  23,-332 }, {  24,-332 },
 {  25,-332 }, {  26,-332 }, {  27,-332 }, {   0,  31 }, {   0,4335 },
 {   0,   0 }, {  31,-332 }, {  32,-332 }, {  33,-332 }, {  34,-332 },
 {  35,-332 }, {  36,-332 }, {  37,-332 }, {  38,-332 }, {  39,-332 },
 {  40,-332 }, {  41,-332 }, {  42,-332 }, {  43,-332 }, {  44,-332 },
 {  45,-332 }, {  46,-332 }, {  47,-332 }, {  48,-332 }, {  49,-332 },
 {   0,  21 }, {   0,4313 }, {   0,   0 }, {   0,  16 }, {   0,4310 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  42,  64 }, {   0,   0 },

 {   0,   0 }, {  10,-383 }, {   0,   0 }, {  12,-383 }, {  13,-383 },
 {  14,-383 }, {  12,  64 }, {  13,  64 }, {  17,-383 }, {  18,-383 },
 {  19,-383 }, {  20,-383 }, {  21,-383 }, {  22,-383 }, {  23,-383 },
 {  24,-383 }, {  25,-383 }, {  26,-383 }, {  27,-383 }, {   0,   0 },
 {   0,4284 }, {   0,   0 }, {  31,-383 }, {  32,-383 }, {  33,-383 },
 {  34,-383 }, {  35,-383 }, {  36,-383 }, {  37,-383 }, {  38,-383 },
 {  39,-383 }, {  40,1130 }, {  41,-383 }, {  42,-383 }, {  43,-383 },
 {  44,-383 }, {  45,-383 }, {  46,-383 }, {  47,-383 }, {  48,-383 },
 {  49,-383 }, {   0,  13 }, {   0,4262 }, {   0,  32 }, {   0,4260 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  10,-434 }, {  33,  89 }, {  12,-434 },
 {  13,-434 }, {  14,-434 }, {   0,  16 }, {   0,4246 }, {  17,-434 },
 {  18,-434 }, {  19,-434 }, {  20,-434 }, {  21,-434 }, {  22,-434 },
 {  23,-434 }, {  24,-434 }, {  25,-434 }, {  26,-434 }, {  27,-434 },
 {  12,   0 }, {  13,   0 }, {   0,   0 }, {  31,-434 }, {  32,-434 },
 {  33,-434 }, {  34,-434 }, {  35,-434 }, {  36,-434 }, {  37,-434 },
 {  38,-434 }, {  39,-434 }, {  40,-434 }, {  41,-434 }, {  42,-434 },
 {  43,-434 }, {  44,-434 }, {  45,-434 }, {  46,-434 }, {  47,-434 },
 {  48,-434 }, {  49,-434 }, {   0,  21 }, {   0,4211 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-485 }, {   0,   0 },
 {  12,-485 }, {  13,-485 }, {  14,-485 }, {   0,   0 }, {   0,4195 },
 {  17,-485 }, {  18,-485 }, {  19,-485 }, {  20,-485 }, {  21,-485 },
 {  22,-485 }, {  23,-485 }, {  24,-485 }, {  25,-485 }, {  26,-485 },
 {  27,-485 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,1079 },
 {  32,-485 }, {  33,-485 }, {  34,-485 }, {  35,-485 }, {  36,-485 },
 {  37,-485 }, {  38,-485 }, {  39,-485 }, {  40,-485 }, {  41,-485 },
 {  42,-485 }, {  43,-485 }, {  44,-485 }, {  45,-485 }, {  46,-485 },
 {  47,-485 }, {  48,-485 }, {  49,-485 }, {   0,  12 }, {   0,4160 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,4156 }, {  40,  39 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-536 },
 {   0,   0 }, {  12,-536 }, {  13,-536 }, {  14,-536 }, {   0,   0 },
 {   0,   0 }, {  17,-536 }, {  18,-536 }, {  19,-536 }, {  20,-536 },
 {  21,-536 }, {  22,-536 }, {  23,-536 }, {  24,-536 }, {  25,-536 },
 {  26,-536 }, {  27,-536 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-536 }, {  32,-536 }, {  33,-536 }, {  34,-536 }, {  35,-536 },
 {  36,-536 }, {  37,-536 }, {  38,-536 }, {  39,-536 }, {  40,-536 },
 {  41,-536 }, {  42,-536 }, {  43,-536 }, {  44,-536 }, {  45,-536 },
 {  46,-536 }, {  47,-536 }, {  48,-536 }, {  49,-536 }, {   0,  17 },
 {   0,4109 }, {  48,3245 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-587 }, {   0,   0 }, {  12,-587 }, {  13,-587 }, {  14,-587 },
 {   0,   0 }, {   0,   0 }, {  17,-587 }, {  18,-587 }, {  19,-587 },
 {  20,-587 }, {  21,-587 }, {  22,-587 }, {  23,-587 }, {  24,-587 },
 {  25,-587 }, {  26,-587 }, {  27,-587 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-587 }, {  32,-587 }, {  33,-587 }, {  34,-587 },
 {  35,-587 }, {  36,-587 }, {  37,-587 }, {  38,-587 }, {  39,-587 },
 {  40,-587 }, {  41,-587 }, {  42,-587 }, {  43,-587 }, {  44,-587 },
 {  45,-587 }, {  46,-587 }, {  47,1028 }, {  48,-587 }, {  49,-587 },
 {   0,  21 }, {   0,4058 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-638 }, {   0,   0 }, {  12,-638 }, {  13,-638 },
 {  14,-638 }, {   0,   0 }, {   0,   0 }, {  17,-638 }, {  18,-638 },
 {  19,-638 }, {  20,-638 }, {  21,-638 }, {  22,-638 }, {  23,-638 },
 {  24,-638 }, {  25,-638 }, {  26,-638 }, {  27,-638 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-638 }, {  32,-638 }, {  33,-638 },
 {  34,-638 }, {  35,-638 }, {  36,-638 }, {  37,-638 }, {  38,-638 },
 {  39,-638 }, {  40,-638 }, {  41,-638 }, {  42,-638 }, {  43,-638 },
 {  44,-638 }, {  45,-638 }, {  46,-638 }, {  47,1028 }, {  48,-638 },
 {  49,-638 }, {   0,  21 }, {   0,4007 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-689 }, {   0,   0 }, {  12,-689 },
 {  13,-689 }, {  14,-689 }, {   0,   0 }, {   0,   0 }, {  17,-689 },
 {  18,-689 }, {  19,-689 }, {  20,-689 }, {  21,-689 }, {  22,-689 },
 {  23,-689 }, {  24,-689 }, {  25,-689 }, {  26,-689 }, {  27,-689 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-689 }, {  32,-689 },
 {  33,-689 }, {  34,-689 }, {  35,-689 }, {  36,-689 }, {  37,-689 },
 {  38,-689 }, {  39,-689 }, {  40,-689 }, {  41,-689 }, {  42,-689 },
 {  43,-689 }, {  44,-689 }, {  45,-689 }, {  46,-689 }, {  47,1028 },
 {  48,-689 }, {  49,-689 }, {   0,  21 }, {   0,3956 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-740 }, {   0,   0 },
 {  12,-740 }, {  13,-740 }, {  14,-740 }, {   0,   0 }, {   0,   0 },
 {  17,-740 }, {  18,-740 }, {  19,-740 }, {  20,-740 }, {  21,-740 },
 {  22,-740 }, {  23,-740 }, {  24,-740 }, {  25,-740 }, {  26,-740 },
 {  27,-740 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-740 },
 {  32,-740 }, {  33,-740 }, {  34,-740 }, {  35,-740 }, {  36,-740 },
 {  37,-740 }, {  38,-740 }, {  39,-740 }, {  40,-740 }, {  41,-740 },
 {  42,-740 }, {  43,1028 }, {  44,-740 }, {  45,-740 }, {  46,-740 },
 {  47,-740 }, {  48,-740 }, {  49,-740 }, {   0,  21 }, {   0,3905 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-791 },
 {   0,   0 }, {  12,-791 }, {  13,-791 }, {  14,-791 }, {   0,   0 },
 {   0,   0 }, {  17,-791 }, {  18,-791 }, {  19,-791 }, {  20,-791 },
 {  21,-791 }, {  22,-791 }, {  23,-791 }, {  24,-791 }, {  25,-791 },
 {  26,-791 }, {  27,-791 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-791 }, {  32,-791 }, {  33,-791 }, {  34,-791 }, {  35,-791 },
 {  36,-791 }, {  37,-791 }, {  38,-791 }, {  39,-791 }, {  40,-791 },
 {  41,1028 }, {  42,-791 }, {  43,-791 }, {  44,-791 }, {  45,-791 },
 {  46,-791 }, {  47,-791 }, {  48,-791 }, {  49,-791 }, {   0,  21 },

 {   0,3854 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-842 }, {   0,   0 }, {  12,-842 }, {  13,-842 }, {  14,-842 },
 {   0,   0 }, {   0,   0 }, {  17,-842 }, {  18,-842 }, {  19,-842 },
 {  20,-842 }, {  21,-842 }, {  22,-842 }, {  23,-842 }, {  24,-842 },
 {  25,-842 }, {  26,-842 }, {  27,-842 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-842 }, {  32,1028 }, {  33,-842 }, {  34,-842 },
 {  35,-842 }, {  36,-842 }, {  37,-842 }, {  38,-842 }, {  39,-842 },
 {  40,-842 }, {  41,-842 }, {  42,-842 }, {  43,-842 }, {  44,-842 },
 {  45,-842 }, {  46,-842 }, {  47,-842 }, {  48,-842 }, {  49,-842 },

 {   0,  21 }, {   0,3803 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-893 }, {   0,   0 }, {  12,-893 }, {  13,-893 },
 {  14,-893 }, {   0,   0 }, {   0,   0 }, {  17,-893 }, {  18,-893 },
 {  19,-893 }, {  20,-893 }, {  21,-893 }, {  22,-893 }, {  23,-893 },
 {  24,-893 }, {  25,-893 }, {  26,-893 }, {  27,-893 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-893 }, {  32,1028 }, {  33,-893 },
 {  34,-893 }, {  35,-893 }, {  36,-893 }, {  37,-893 }, {  38,-893 },
 {  39,-893 }, {  40,-893 }, {  41,-893 }, {  42,-893 }, {  43,-893 },
 {  44,-893 }, {  45,-893 }, {  46,-893 }, {  47,-893 }, {  48,-893 },

 {  49,-893 }, {   0,  10 }, {   0,3752 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-944 }, {   0,   0 }, {  12,-944 },
 {  13,-944 }, {  14,-944 }, {   0,   0 }, {   0,   0 }, {  17,-944 },
 {  18,-944 }, {  19,-944 }, {  20,-944 }, {  21,-944 }, {  22,-944 },
 {  23,-944 }, {  24,-944 }, {  25,-944 }, {  26,-944 }, {  27,-944 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-944 }, {  32,-944 },
 {  33,-944 }, {  34,-944 }, {  35,-944 }, {  36,-944 }, {  37,-944 },
 {  38,-944 }, {  39,-944 }, {  40,-944 }, {  41,-944 }, {  42,-944 },
 {  43,-944 }, {  44,-944 }, {  45,-944 }, {  46,-944 }, {  47,-944 },

 {  48,-944 }, {  49,-944 }, {   0,  11 }, {   0,3701 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-995 }, {   0,   0 },
 {  12,-995 }, {  13,-995 }, {  14,-995 }, {   0,   0 }, {   0,   0 },
 {  17,-995 }, {  18,-995 }, {  19,-995 }, {  20,-995 }, {  21,-995 },
 {  22,-995 }, {  23,-995 }, {  24,-995 }, {  25,-995 }, {  26,-995 },
 {  27,-995 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-995 },
 {  32,-995 }, {  33,-995 }, {  34,-995 }, {  35,-995 }, {  36,-995 },
 {  37,-995 }, {  38,-995 }, {  39,-995 }, {  40,-995 }, {  41,-995 },
 {  42,-995 }, {  43,-995 }, {  44,-995 }, {  45,-995 }, {  46,-995 },

 {  47,-995 }, {  48,-995 }, {  49,-995 }, {   0,  21 }, {   0,3650 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1046 },
 {   0,   0 }, {  12,-1046 }, {  13,-1046 }, {  14,-1046 }, {   0,   0 },
 {   0,   0 }, {  17,-1046 }, {  18,-1046 }, {  19,-1046 }, {  20,-1046 },
 {  21,-1046 }, {  22,-1046 }, {  23,-1046 }, {  24,-1046 }, {  25,-1046 },
 {  26,-1046 }, {  27,-1046 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-1046 }, {  32,-1046 }, {  33,-1046 }, {  34,-1046 }, {  35,-1046 },
 {  36,-1046 }, {  37,-1046 }, {  38,-1046 }, {  39,-1046 }, {  40,-1046 },
 {  41,-1046 }, {  42,-1046 }, {  43,-1046 }, {  44,-1046 }, {  45,-1046 },

 {  46,-1046 }, {  47,-1046 }, {  48, 926 }, {  49,-1046 }, {   0,   9 },
 {   0,3599 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1097 }, {   0,   0 }, {  12,-1097 }, {  13,-1097 }, {  14,-1097 },
 {   0,   0 }, {   0,   0 }, {  17,-1097 }, {  18,-1097 }, {  19,-1097 },
 {  20,-1097 }, {  21,-1097 }, {  22,-1097 }, {  23,-1097 }, {  24,-1097 },
 {  25,-1097 }, {  26,-1097 }, {  27,-1097 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-1097 }, {  32,-1097 }, {  33,-1097 }, {  34,-1097 },
 {  35,-1097 }, {  36,-1097 }, {  37,-1097 }, {  38,-1097 }, {  39,-1097 },
 {  40,-1097 }, {  41,-1097 }, {  42,-1097 }, {  43,-1097 }, {  44,-1097 },

 {  45,-1097 }, {  46,-1097 }, {  47,-1097 }, {  48,-1097 }, {  49,-1097 },
 {   0,  16 }, {   0,3548 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1148 }, {   0,   0 }, {  12,   0 }, {  13,   0 },
 {  14,-1148 }, {   0,   0 }, {   0,   0 }, {  17,-1148 }, {  18,-1148 },
 {  19,-1148 }, {  20,-1148 }, {  21,-1148 }, {  22,-1148 }, {  23,-1148 },
 {  24,-1148 }, {  25,-1148 }, {  26,-1148 }, {  27,-1148 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-1148 }, {  32,-1148 }, {  33,-1148 },
 {  34,-1148 }, {  35,-1148 }, {  36,-1148 }, {  37,-1148 }, {  38,-1148 },
 {  39,-1148 }, {  40,-1148 }, {  41,-1148 }, {  42,-1148 }, {  43,-1148 },

 {  44,-1148 }, {  45,-1148 }, {  46,-1148 }, {  47,-1148 }, {  48,-1148 },
 {  49,-1148 }, {   0,   0 }, {   0,3497 }, {   1,   0 }, {   2,   0 },
 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,  53 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },

 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {   0,   0 },
 {   0,3444 }, {   1, 771 }, {   2, 771 }, {   3, 771 }, {   4, 771 },
 {   5, 771 }, {   6, 771 }, {   7, 771 }, {   8, 824 }, {   9, 771 },
 {  10, 771 }, {  11,-816 }, {  12, 771 }, {  13, 771 }, {  14, 771 },
 {  15, 771 }, {  16, 771 }, {  17, 771 }, {  18, 771 }, {  19, 771 },
 {  20, 771 }, {  21, 771 }, {  22, 771 }, {  23, 771 }, {  24, 771 },
 {  25, 771 }, {  26, 771 }, {  27, 771 }, {  28, 771 }, {  29, 771 },
 {  30, 771 }, {  31, 771 }, {  32, 771 }, {  33, 771 }, {  34, 771 },
 {  35, 771 }, {  36, 771 }, {  37, 771 }, {  38, 771 }, {  39, 771 },

 {  40, 771 }, {  41, 771 }, {  42, 771 }, {  43, 771 }, {  44, 771 },
 {  45, 771 }, {  46, 771 }, {  47, 771 }, {  48, 771 }, {  49, 771 },
 {  50, 771 }, {  51, 771 }, {   0,   0 }, {   0,3391 }, {   1,   0 },
 {   2,   0 }, {   3,-944 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,  53 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },

 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {   0,   0 }, {   0,3338 }, {   1, 771 }, {   2, 771 }, {   3, 771 },
 {   4, 771 }, {   5, 771 }, {   6, 771 }, {   7, 771 }, {   8, 771 },
 {   9, 771 }, {  10, 771 }, {  11, 771 }, {  12, 771 }, {  13, 771 },
 {  14, 771 }, {  15, 771 }, {  16, 771 }, {  17, 771 }, {  18, 771 },
 {  19, 771 }, {  20, 771 }, {  21, 771 }, {  22, 771 }, {  23, 771 },
 {  24, 771 }, {  25, 771 }, {  26, 771 }, {  27, 771 }, {  28, 771 },
 {  29,   0 }, {  30, 771 }, {  31, 771 }, {  32, 771 }, {  33, 771 },

 {  34, 771 }, {  35, 771 }, {  36, 771 }, {  37, 771 }, {  38, 771 },
 {  39, 771 }, {  40, 771 }, {  41, 771 }, {  42, 771 }, {  43, 771 },
 {  44, 771 }, {  45, 771 }, {  46, 771 }, {  47, 771 }, {  48, 771 },
 {  49, 771 }, {  50, 771 }, {  51, 771 }, {   0,  21 }, {   0,3285 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1411 },
 {   0,   0 }, {  12,-1411 }, {  13,-1411 }, {  14,-1411 }, {   0,   0 },
 {   0,   0 }, {  17,-1411 }, {  18,-1411 }, {  19,-1411 }, {  20,-1411 },
 {  21,-1411 }, {  22, 771 }, {  23,-1411 }, {  24,-1411 }, {  25,-1411 },
 {  26,-1411 }, {  27,-1411 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  31,-1411 }, {  32,-1411 }, {  33,-1411 }, {  34,-1411 }, {  35,-1411 },
 {  36,-1411 }, {  37,-1411 }, {  38,-1411 }, {  39,-1411 }, {  40,-1411 },
 {  41,-1411 }, {  42,-1411 }, {  43,-1411 }, {  44,-1411 }, {  45,-1411 },
 {  46,-1411 }, {  47,-1411 }, {  48,-1411 }, {  49,-1411 }, {   0,  21 },
 {   0,3234 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1462 }, {   0,   0 }, {  12,-1462 }, {  13,-1462 }, {  14,-1462 },
 {   0,   0 }, {   0,   0 }, {  17,-1462 }, {  18,-1462 }, {  19,-1462 },
 {  20,-1462 }, {  21,-1462 }, {  22,-1462 }, {  23,-1462 }, {  24,-1462 },
 {  25,-1462 }, {  26,-1462 }, {  27,-1462 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  31,-1462 }, {  32,-1462 }, {  33,-1462 }, {  34,-1462 },
 {  35,-1462 }, {  36,-1462 }, {  37,-1462 }, {  38,-1462 }, {  39,-1462 },
 {  40,-1462 }, {  41,-1462 }, {  42,-1462 }, {  43,-1462 }, {  44,-1462 },
 {  45,-1462 }, {  46,-1462 }, {  47, 771 }, {  48,-1462 }, {  49,-1462 },
 {   0,  21 }, {   0,3183 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1513 }, {   0,   0 }, {  12,-1513 }, {  13,-1513 },
 {  14,-1513 }, {   0,   0 }, {   0,   0 }, {  17,-1513 }, {  18,-1513 },
 {  19,-1513 }, {  20,-1513 }, {  21,-1513 }, {  22,-1513 }, {  23,-1513 },
 {  24,-1513 }, {  25,-1513 }, {  26,-1513 }, {  27,-1513 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31,-1513 }, {  32,-1513 }, {  33,-1513 },
 {  34,-1513 }, {  35,-1513 }, {  36,-1513 }, {  37,-1513 }, {  38,-1513 },
 {  39,-1513 }, {  40,-1513 }, {  41,-1513 }, {  42,-1513 }, {  43,-1513 },
 {  44,-1513 }, {  45,-1513 }, {  46, 771 }, {  47,-1513 }, {  48,-1513 },
 {  49,-1513 }, {   0,  21 }, {   0,3132 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1564 }, {   0,   0 }, {  12,-1564 },
 {  13,-1564 }, {  14,-1564 }, {   0,   0 }, {   0,   0 }, {  17,-1564 },
 {  18,-1564 }, {  19,-1564 }, {  20,-1564 }, {  21, 771 }, {  22,-1564 },
 {  23,-1564 }, {  24,-1564 }, {  25,-1564 }, {  26,-1564 }, {  27,-1564 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1564 }, {  32,-1564 },
 {  33,-1564 }, {  34,-1564 }, {  35,-1564 }, {  36,-1564 }, {  37,-1564 },
 {  38,-1564 }, {  39,-1564 }, {  40,-1564 }, {  41,-1564 }, {  42,-1564 },
 {  43,-1564 }, {  44,-1564 }, {  45,-1564 }, {  46,-1564 }, {  47,-1564 },
 {  48,-1564 }, {  49,-1564 }, {   0,  21 }, {   0,3081 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1615 }, {   0,   0 },
 {  12,-1615 }, {  13,-1615 }, {  14,-1615 }, {   0,   0 }, {   0,   0 },
 {  17,-1615 }, {  18,-1615 }, {  19,-1615 }, {  20,-1615 }, {  21,-1615 },
 {  22,-1615 }, {  23,-1615 }, {  24,-1615 }, {  25,-1615 }, {  26,-1615 },

 {  27,-1615 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1615 },
 {  32,-1615 }, {  33,-1615 }, {  34,-1615 }, {  35, 771 }, {  36,-1615 },
 {  37,-1615 }, {  38,-1615 }, {  39,-1615 }, {  40,-1615 }, {  41,-1615 },
 {  42,-1615 }, {  43,-1615 }, {  44,-1615 }, {  45,-1615 }, {  46,-1615 },
 {  47,-1615 }, {  48,-1615 }, {  49,-1615 }, {   0,  17 }, {   0,3030 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1666 },
 {   0,   0 }, {  12,-1666 }, {  13,-1666 }, {  14,-1666 }, {   0,   0 },
 {   0,   0 }, {  17,-1666 }, {  18,-1666 }, {  19,-1666 }, {  20,-1666 },
 {  21,-1666 }, {  22,-1666 }, {  23,-1666 }, {  24,-1666 }, {  25,-1666 },

 {  26,-1666 }, {  27,-1666 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-1666 }, {  32,-1666 }, {  33,-1666 }, {  34,-1666 }, {  35,-1666 },
 {  36,-1666 }, {  37,-1666 }, {  38,-1666 }, {  39,-1666 }, {  40,-1666 },
 {  41,-1666 }, {  42,-1666 }, {  43,-1666 }, {  44,-1666 }, {  45,-1666 },
 {  46,-1666 }, {  47,-1666 }, {  48,-1666 }, {  49,-1666 }, {   0,  21 },
 {   0,2979 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1717 }, {   0,   0 }, {  12,-1717 }, {  13,-1717 }, {  14,-1717 },
 {   0,   0 }, {   0,   0 }, {  17,-1717 }, {  18,-1717 }, {  19,-1717 },
 {  20,-1717 }, {  21,-1717 }, {  22,-1717 }, {  23,-1717 }, {  24,-1717 },

 {  25,-1717 }, {  26,-1717 }, {  27,-1717 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-1717 }, {  32,-1717 }, {  33, 720 }, {  34,-1717 },
 {  35,-1717 }, {  36,-1717 }, {  37,-1717 }, {  38,-1717 }, {  39,-1717 },
 {  40,-1717 }, {  41,-1717 }, {  42,-1717 }, {  43,-1717 }, {  44,-1717 },
 {  45,-1717 }, {  46,-1717 }, {  47,-1717 }, {  48,-1717 }, {  49,-1717 },
 {   0,  21 }, {   0,2928 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1768 }, {   0,   0 }, {  12,-1768 }, {  13,-1768 },
 {  14,-1768 }, {   0,   0 }, {   0,   0 }, {  17,-1768 }, {  18,-1768 },
 {  19,-1768 }, {  20,-1768 }, {  21,-1768 }, {  22,-1768 }, {  23,-1768 },

 {  24,-1768 }, {  25,-1768 }, {  26,-1768 }, {  27,-1768 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-1768 }, {  32,-1768 }, {  33,-1768 },
 {  34,-1768 }, {  35,-1768 }, {  36,-1768 }, {  37, 720 }, {  38,-1768 },
 {  39,-1768 }, {  40,-1768 }, {  41,-1768 }, {  42,-1768 }, {  43,-1768 },
 {  44,-1768 }, {  45,-1768 }, {  46,-1768 }, {  47,-1768 }, {  48,-1768 },
 {  49,-1768 }, {   0,  21 }, {   0,2877 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1819 }, {   0,   0 }, {  12,-1819 },
 {  13,-1819 }, {  14,-1819 }, {   0,   0 }, {   0,   0 }, {  17,-1819 },
 {  18,-1819 }, {  19,-1819 }, {  20,-1819 }, {  21,-1819 }, {  22,-1819 },

 {  23,-1819 }, {  24,-1819 }, {  25,-1819 }, {  26,-1819 }, {  27,-1819 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1819 }, {  32,-1819 },
 {  33,-1819 }, {  34,-1819 }, {  35,-1819 }, {  36,-1819 }, {  37,-1819 },
 {  38,-1819 }, {  39,-1819 }, {  40,-1819 }, {  41,-1819 }, {  42,-1819 },
 {  43,-1819 }, {  44, 720 }, {  45,-1819 }, {  46,-1819 }, {  47,-1819 },
 {  48,-1819 }, {  49,-1819 }, {   0,  21 }, {   0,2826 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1870 }, {   0,   0 },
 {  12,-1870 }, {  13,-1870 }, {  14,-1870 }, {   0,   0 }, {   0,   0 },
 {  17,-1870 }, {  18,-1870 }, {  19,-1870 }, {  20,-1870 }, {  21,-1870 },

 {  22,-1870 }, {  23,-1870 }, {  24,-1870 }, {  25,-1870 }, {  26,-1870 },
 {  27,-1870 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1870 },
 {  32,-1870 }, {  33,-1870 }, {  34, 720 }, {  35,-1870 }, {  36,-1870 },
 {  37,-1870 }, {  38,-1870 }, {  39,-1870 }, {  40,-1870 }, {  41,-1870 },
 {  42,-1870 }, {  43,-1870 }, {  44,-1870 }, {  45,-1870 }, {  46,-1870 },
 {  47,-1870 }, {  48,-1870 }, {  49,-1870 }, {   0,  21 }, {   0,2775 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1921 },
 {   0,   0 }, {  12,-1921 }, {  13,-1921 }, {  14,-1921 }, {   0,   0 },
 {   0,   0 }, {  17,-1921 }, {  18,-1921 }, {  19,-1921 }, {  20,-1921 },

 {  21,-1921 }, {  22,-1921 }, {  23,-1921 }, {  24,-1921 }, {  25,-1921 },
 {  26,-1921 }, {  27,-1921 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-1921 }, {  32,-1921 }, {  33,-1921 }, {  34,-1921 }, {  35,-1921 },
 {  36,-1921 }, {  37, 720 }, {  38,-1921 }, {  39,-1921 }, {  40,-1921 },
 {  41,-1921 }, {  42,-1921 }, {  43,-1921 }, {  44,-1921 }, {  45,-1921 },
 {  46,-1921 }, {  47,-1921 }, {  48,-1921 }, {  49,-1921 }, {   0,  21 },
 {   0,2724 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1972 }, {   0,   0 }, {  12,-1972 }, {  13,-1972 }, {  14,-1972 },
 {   0,   0 }, {   0,   0 }, {  17,-1972 }, {  18,-1972 }, {  19,-1972 },

 {  20,-1972 }, {  21,-1972 }, {  22,-1972 }, {  23,-1972 }, {  24,-1972 },
 {  25,-1972 }, {  26,-1972 }, {  27,-1972 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-1972 }, {  32,-1972 }, {  33,-1972 }, {  34,-1972 },
 {  35, 720 }, {  36,-1972 }, {  37,-1972 }, {  38,-1972 }, {  39,-1972 },
 {  40,-1972 }, {  41,-1972 }, {  42,-1972 }, {  43,-1972 }, {  44,-1972 },
 {  45,-1972 }, {  46,-1972 }, {  47,-1972 }, {  48,-1972 }, {  49,-1972 },
 {   0,   0 }, {   0,2673 }, {   1, 720 }, {   2, 720 }, {   3, 720 },
 {   4, 720 }, {   5, 720 }, {   6, 720 }, {   7, 720 }, {   8,  53 },
 {   9, 720 }, {  10, 720 }, {  11, 773 }, {  12, 720 }, {  13, 720 },
 {  14, 720 }, {  15, 720 }, {  16, 720 }, {  17, 720 }, {  18, 720 },

 {  19, 720 }, {  20, 720 }, {  21, 720 }, {  22, 720 }, {  23, 720 },
 {  24, 720 }, {  25, 720 }, {  26, 720 }, {  27, 720 }, {  28, 720 },
 {  29, 720 }, {  30, 720 }, {  31, 720 }, {  32, 720 }, {  33, 720 },
 {  34, 720 }, {  35, 720 }, {  36, 720 }, {  37, 720 }, {  38, 720 },
 {  39, 720 }, {  40, 720 }, {  41, 720 }, {  42, 720 }, {  43, 720 },
 {  44, 720 }, {  45, 720 }, {  46, 720 }, {  47, 720 }, {  48, 720 },
 {  49, 720 }, {  50, 720 }, {  51, 720 }, {   0,   0 }, {   0,2620 },
 {   1, -53 }, {   2, -53 }, {   3, -53 }, {   4, -53 }, {   5, -53 },
 {   6, -53 }, {   7, -53 }, {   8,   0 }, {   9, -53 }, {  10, -53 },
 {  11,-1640 }, {  12, -53 }, {  13, -53 }, {  14, -53 }, {  15, -53 },

 {  16, -53 }, {  17, -53 }, {  18, -53 }, {  19, -53 }, {  20, -53 },
 {  21, -53 }, {  22, -53 }, {  23, -53 }, {  24, -53 }, {  25, -53 },
 {  26, -53 }, {  27, -53 }, {  28, -53 }, {  29, -53 }, {  30, -53 },
 {  31, -53 }, {  32, -53 }, {  33, -53 }, {  34, -53 }, {  35, -53 },
 {  36, -53 }, {  37, -53 }, {  38, -53 }, {  39, -53 }, {  40, -53 },
 {  41, -53 }, {  42, -53 }, {  43, -53 }, {  44, -53 }, {  45, -53 },
 {  46, -53 }, {  47, -53 }, {  48, -53 }, {  49, -53 }, {  50, -53 },
 {  51, -53 }, {   0,   0 }, {   0,2567 }, {   1, 720 }, {   2, 720 },
 {   3,-1768 }, {   4, 720 }, {   5, 720 }, {   6, 720 }, {   7, 720 },
 {   8, 720 }, {   9, 720 }, {  10, 720 }, {  11, 720 }, {  12, 720 },

 {  13, 720 }, {  14, 720 }, {  15, 720 }, {  16, 720 }, {  17, 720 },
 {  18, 720 }, {  19, 720 }, {  20, 720 }, {  21, 720 }, {  22, 720 },
 {  23, 720 }, {  24, 720 }, {  25, 720 }, {  26, 720 }, {  27, 720 },
 {  28, 720 }, {  29,-771 }, {  30, 720 }, {  31, 720 }, {  32, 720 },
 {  33, 720 }, {  34, 720 }, {  35, 720 }, {  36, 720 }, {  37, 720 },
 {  38, 720 }, {  39, 720 }, {  40, 720 }, {  41, 720 }, {  42, 720 },
 {  43, 720 }, {  44, 720 }, {  45, 720 }, {  46, 720 }, {  47, 720 },
 {  48, 720 }, {  49, 720 }, {  50, 720 }, {  51, 720 }, {   0,  21 },
 {   0,2514 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  10,-2182 }, {   0,   0 }, {  12,-2182 }, {  13,-2182 }, {  14,-2182 },
 {   0,   0 }, {   0,   0 }, {  17, 720 }, {  18,-2182 }, {  19,-2182 },
 {  20,-2182 }, {  21,-2182 }, {  22,-2182 }, {  23,-2182 }, {  24,-2182 },
 {  25,-2182 }, {  26,-2182 }, {  27,-2182 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-2182 }, {  32,-2182 }, {  33,-2182 }, {  34,-2182 },
 {  35,-2182 }, {  36,-2182 }, {  37,-2182 }, {  38,-2182 }, {  39,-2182 },
 {  40,-2182 }, {  41,-2182 }, {  42,-2182 }, {  43,-2182 }, {  44,-2182 },
 {  45,-2182 }, {  46,-2182 }, {  47,-2182 }, {  48,-2182 }, {  49,-2182 },
 {   0,  21 }, {   0,2463 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  10,-2233 }, {   0,   0 }, {  12,-2233 }, {  13,-2233 },
 {  14,-2233 }, {   0,   0 }, {   0,   0 }, {  17,-2233 }, {  18,-2233 },
 {  19,-2233 }, {  20,-2233 }, {  21,-2233 }, {  22,-2233 }, {  23,-2233 },
 {  24,-2233 }, {  25,-2233 }, {  26,-2233 }, {  27,-2233 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-2233 }, {  32,-2233 }, {  33,-2233 },
 {  34,-2233 }, {  35,-2233 }, {  36,-2233 }, {  37,-2233 }, {  38,-2233 },
 {  39,-2233 }, {  40,-2233 }, {  41,-2233 }, {  42,-2233 }, {  43,-2233 },
 {  44,-2233 }, {  45, 720 }, {  46,-2233 }, {  47,-2233 }, {  48,-2233 },
 {  49,-2233 }, {   0,  21 }, {   0,2412 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  10,-2284 }, {   0,   0 }, {  12,-2284 },
 {  13,-2284 }, {  14,-2284 }, {   0,   0 }, {   0,   0 }, {  17,-2284 },
 {  18,-2284 }, {  19,-2284 }, {  20,-2284 }, {  21,-2284 }, {  22,-2284 },
 {  23,-2284 }, {  24,-2284 }, {  25,-2284 }, {  26,-2284 }, {  27,-2284 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2284 }, {  32,-2284 },
 {  33,-2284 }, {  34,-2284 }, {  35, 720 }, {  36,-2284 }, {  37,-2284 },
 {  38,-2284 }, {  39,-2284 }, {  40,-2284 }, {  41,-2284 }, {  42,-2284 },
 {  43,-2284 }, {  44,-2284 }, {  45,-2284 }, {  46,-2284 }, {  47,-2284 },
 {  48,-2284 }, {  49,-2284 }, {   0,  21 }, {   0,2361 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2335 }, {   0,   0 },
 {  12,-2335 }, {  13,-2335 }, {  14,-2335 }, {   0,   0 }, {   0,   0 },
 {  17,-2335 }, {  18,-2335 }, {  19,-2335 }, {  20,-2335 }, {  21,-2335 },
 {  22,-2335 }, {  23,-2335 }, {  24,-2335 }, {  25,-2335 }, {  26,-2335 },
 {  27,-2335 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2335 },
 {  32,-2335 }, {  33,-2335 }, {  34,-2335 }, {  35,-2335 }, {  36,-2335 },
 {  37,-2335 }, {  38,-2335 }, {  39,-2335 }, {  40,-2335 }, {  41,-2335 },
 {  42,-2335 }, {  43,-2335 }, {  44,-2335 }, {  45, 720 }, {  46,-2335 },
 {  47,-2335 }, {  48,-2335 }, {  49,-2335 }, {   0,  21 }, {   0,2310 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2386 },
 {   0,   0 }, {  12,-2386 }, {  13,-2386 }, {  14,-2386 }, {   0,   0 },
 {   0,   0 }, {  17,-2386 }, {  18,-2386 }, {  19,-2386 }, {  20,-2386 },
 {  21,-2386 }, {  22,-2386 }, {  23,-2386 }, {  24,-2386 }, {  25,-2386 },
 {  26,-2386 }, {  27,-2386 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-2386 }, {  32,-2386 }, {  33,-2386 }, {  34,-2386 }, {  35,-2386 },
 {  36,-2386 }, {  37,-2386 }, {  38,-2386 }, {  39,-2386 }, {  40,-2386 },
 {  41,-2386 }, {  42,-2386 }, {  43,-2386 }, {  44,-2386 }, {  45, 720 },
 {  46,-2386 }, {  47,-2386 }, {  48,-2386 }, {  49,-2386 }, {   0,  21 },
 {   0,2259 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2437 }, {   0,   0 }, {  12,-2437 }, {  13,-2437 }, {  14,-2437 },
 {   0,   0 }, {   0,   0 }, {  17,-2437 }, {  18,-2437 }, {  19,-2437 },
 {  20,-2437 }, {  21,-2437 }, {  22,-2437 }, {  23,-2437 }, {  24,-2437 },
 {  25,-2437 }, {  26,-2437 }, {  27,-2437 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-2437 }, {  32,-2437 }, {  33,-2437 }, {  34,-2437 },
 {  35,-2437 }, {  36,-2437 }, {  37,-2437 }, {  38, 720 }, {  39,-2437 },
 {  40,-2437 }, {  41,-2437 }, {  42,-2437 }, {  43,-2437 }, {  44,-2437 },
 {  45,-2437 }, {  46,-2437 }, {  47,-2437 }, {  48,-2437 }, {  49,-2437 },
 {   0,  21 }, {   0,2208 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-2488 }, {   0,   0 }, {  12,-2488 }, {  13,-2488 },
 {  14,-2488 }, {   0,   0 }, {   0,   0 }, {  17,-2488 }, {  18,-2488 },
 {  19,-2488 }, {  20,-2488 }, {  21,-2488 }, {  22,-2488 }, {  23,-2488 },
 {  24,-2488 }, {  25,-2488 }, {  26,-2488 }, {  27,-2488 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-2488 }, {  32,-2488 }, {  33,-2488 },
 {  34,-2488 }, {  35,-2488 }, {  36,-2488 }, {  37,-2488 }, {  38,-2488 },
 {  39,-2488 }, {  40,-2488 }, {  41,-2488 }, {  42,-2488 }, {  43,-2488 },
 {  44,-2488 }, {  45, 720 }, {  46,-2488 }, {  47,-2488 }, {  48,-2488 },
 {  49,-2488 }, {   0,  21 }, {   0,2157 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2539 }, {   0,   0 }, {  12,-2539 },
 {  13,-2539 }, {  14,-2539 }, {   0,   0 }, {   0,   0 }, {  17,-2539 },
 {  18,-2539 }, {  19,-2539 }, {  20,-2539 }, {  21,-2539 }, {  22,-2539 },
 {  23,-2539 }, {  24,-2539 }, {  25,-2539 }, {  26,-2539 }, {  27,-2539 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2539 }, {  32,-2539 },
 {  33,-2539 }, {  34,-2539 }, {  35,-2539 }, {  36,-2539 }, {  37,-2539 },
 {  38,-2539 }, {  39,-2539 }, {  40, 720 }, {  41,-2539 }, {  42,-2539 },
 {  43,-2539 }, {  44,-2539 }, {  45,-2539 }, {  46,-2539 }, {  47,-2539 },
 {  48,-2539 }, {  49,-2539 }, {   0,  21 }, {   0,2106 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2590 }, {   0,   0 },
 {  12,-2590 }, {  13,-2590 }, {  14,-2590 }, {   0,   0 }, {   0,   0 },
 {  17,-2590 }, {  18,-2590 }, {  19,-2590 }, {  20,-2590 }, {  21,-2590 },
 {  22,-2590 }, {  23,-2590 }, {  24,-2590 }, {  25,-2590 }, {  26,-2590 },
 {  27,-2590 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2590 },
 {  32,-2590 }, {  33,-2590 }, {  34,-2590 }, {  35, 720 }, {  36,-2590 },
 {  37,-2590 }, {  38,-2590 }, {  39,-2590 }, {  40,-2590 }, {  41,-2590 },
 {  42,-2590 }, {  43,-2590 }, {  44,-2590 }, {  45,-2590 }, {  46,-2590 },
 {  47,-2590 }, {  48,-2590 }, {  49,-2590 }, {   0,  21 }, {   0,2055 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2641 },
 {   0,   0 }, {  12,-2641 }, {  13,-2641 }, {  14,-2641 }, {   0,   0 },
 {   0,   0 }, {  17,-2641 }, {  18,-2641 }, {  19,-2641 }, {  20,-2641 },
 {  21,-2641 }, {  22,-2641 }, {  23,-2641 }, {  24,-2641 }, {  25,-2641 },
 {  26,-2641 }, {  27,-2641 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-2641 }, {  32,-2641 }, {  33,-2641 }, {  34,-2641 }, {  35, 720 },
 {  36,-2641 }, {  37,-2641 }, {  38,-2641 }, {  39,-2641 }, {  40,-2641 },
 {  41,-2641 }, {  42,-2641 }, {  43,-2641 }, {  44,-2641 }, {  45,-2641 },
 {  46,-2641 }, {  47,-2641 }, {  48,-2641 }, {  49,-2641 }, {   0,  19 },

 {   0,2004 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2692 }, {   0,   0 }, {  12,-2692 }, {  13,-2692 }, {  14,-2692 },
 {   0,   0 }, {   0,   0 }, {  17,-2692 }, {  18,-2692 }, {  19,-2692 },
 {  20,-2692 }, {  21,-2692 }, {  22,-2692 }, {  23,-2692 }, {  24,-2692 },
 {  25,-2692 }, {  26,-2692 }, {  27,-2692 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-2692 }, {  32,-2692 }, {  33,-2692 }, {  34,-2692 },
 {  35,-2692 }, {  36,-2692 }, {  37,-2692 }, {  38,-2692 }, {  39,-2692 },
 {  40,-2692 }, {  41,-2692 }, {  42,-2692 }, {  43,-2692 }, {  44,-2692 },
 {  45,-2692 }, {  46,-2692 }, {  47,-2692 }, {  48,-2692 }, {  49,-2692 },

 {   0,   0 }, {   0,1953 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,-667 },
 {   9,   0 }, {  10,   0 }, {  11,  53 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },

 {  49,   0 }, {  50,   0 }, {  51,   0 }, {   0,   0 }, {   0,1900 },
 {   1, -53 }, {   2, -53 }, {   3, -53 }, {   4, -53 }, {   5, -53 },
 {   6, -53 }, {   7, -53 }, {   8,-720 }, {   9, -53 }, {  10, -53 },
 {  11,   0 }, {  12, -53 }, {  13, -53 }, {  14, -53 }, {  15, -53 },
 {  16, -53 }, {  17, -53 }, {  18, -53 }, {  19, -53 }, {  20, -53 },
 {  21, -53 }, {  22, -53 }, {  23, -53 }, {  24, -53 }, {  25, -53 },
 {  26, -53 }, {  27, -53 }, {  28, -53 }, {  29, -53 }, {  30, -53 },
 {  31, -53 }, {  32, -53 }, {  33, -53 }, {  34, -53 }, {  35, -53 },
 {  36, -53 }, {  37, -53 }, {  38, -53 }, {  39, -53 }, {  40, -53 },
 {  41, -53 }, {  42, -53 }, {  43, -53 }, {  44, -53 }, {  45, -53 },

 {  46, -53 }, {  47, -53 }, {  48, -53 }, {  49, -53 }, {  50, -53 },
 {  51, -53 }, {   0,   0 }, {   0,1847 }, {   1,   0 }, {   2,   0 },
 {   3,-2488 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,-1491 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },

 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {   0,  21 },
 {   0,1794 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2902 }, {   0,   0 }, {  12,-2902 }, {  13,-2902 }, {  14,-2902 },
 {   0,   0 }, {   0,   0 }, {  17,-2902 }, {  18,-2902 }, {  19,-2902 },
 {  20,-2902 }, {  21,-2902 }, {  22,-2902 }, {  23,-2902 }, {  24,-2902 },
 {  25,-2902 }, {  26,-2902 }, {  27, 510 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-2902 }, {  32,-2902 }, {  33,-2902 }, {  34,-2902 },
 {  35,-2902 }, {  36,-2902 }, {  37,-2902 }, {  38,-2902 }, {  39,-2902 },

 {  40,-2902 }, {  41,-2902 }, {  42,-2902 }, {  43,-2902 }, {  44,-2902 },
 {  45,-2902 }, {  46,-2902 }, {  47,-2902 }, {  48,-2902 }, {  49,-2902 },
 {   0,  21 }, {   0,1743 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-2953 }, {   0,   0 }, {  12,-2953 }, {  13,-2953 },
 {  14,-2953 }, {   0,   0 }, {   0,   0 }, {  17,-2953 }, {  18,-2953 },
 {  19,-2953 }, {  20,-2953 }, {  21,-2953 }, {  22,-2953 }, {  23,-2953 },
 {  24,-2953 }, {  25,-2953 }, {  26,-2953 }, {  27,-2953 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-2953 }, {  32,-2953 }, {  33,-2953 },
 {  34,-2953 }, {  35,-2953 }, {  36,-2953 }, {  37,-2953 }, {  38,-2953 },

 {  39,-2953 }, {  40,-2953 }, {  41,-2953 }, {  42,-2953 }, {  43, 510 },
 {  44,-2953 }, {  45,-2953 }, {  46,-2953 }, {  47,-2953 }, {  48,-2953 },
 {  49,-2953 }, {   0,  20 }, {   0,1692 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3004 }, {   0,   0 }, {  12,-3004 },
 {  13,-3004 }, {  14,-3004 }, {   0,   0 }, {   0,   0 }, {  17,-3004 },
 {  18,-3004 }, {  19,-3004 }, {  20,-3004 }, {  21,-3004 }, {  22,-3004 },
 {  23,-3004 }, {  24,-3004 }, {  25,-3004 }, {  26,-3004 }, {  27,-3004 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3004 }, {  32,-3004 },
 {  33,-3004 }, {  34,-3004 }, {  35,-3004 }, {  36,-3004 }, {  37,-3004 },

 {  38,-3004 }, {  39,-3004 }, {  40,-3004 }, {  41,-3004 }, {  42,-3004 },
 {  43,-3004 }, {  44,-3004 }, {  45,-3004 }, {  46,-3004 }, {  47,-3004 },
 {  48,-3004 }, {  49,-3004 }, {   0,  21 }, {   0,1641 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3055 }, {   0,   0 },
 {  12,-3055 }, {  13,-3055 }, {  14,-3055 }, {   0,   0 }, {   0,   0 },
 {  17,-3055 }, {  18,-3055 }, {  19,-3055 }, {  20,-3055 }, {  21,-3055 },
 {  22,-3055 }, {  23,-3055 }, {  24,-3055 }, {  25,-3055 }, {  26,-3055 },
 {  27,-3055 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3055 },
 {  32, 459 }, {  33,-3055 }, {  34,-3055 }, {  35,-3055 }, {  36,-3055 },

 {  37,-3055 }, {  38,-3055 }, {  39,-3055 }, {  40,-3055 }, {  41,-3055 },
 {  42,-3055 }, {  43,-3055 }, {  44,-3055 }, {  45,-3055 }, {  46,-3055 },
 {  47,-3055 }, {  48,-3055 }, {  49,-3055 }, {   0,  21 }, {   0,1590 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3106 },
 {   0,   0 }, {  12,-3106 }, {  13,-3106 }, {  14,-3106 }, {   0,   0 },
 {   0,   0 }, {  17,-3106 }, {  18,-3106 }, {  19,-3106 }, {  20,-3106 },
 {  21,-3106 }, {  22,-3106 }, {  23,-3106 }, {  24,-3106 }, {  25,-3106 },
 {  26,-3106 }, {  27,-3106 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-3106 }, {  32,-3106 }, {  33,-3106 }, {  34,-3106 }, {  35,-3106 },

 {  36, 459 }, {  37,-3106 }, {  38,-3106 }, {  39,-3106 }, {  40,-3106 },
 {  41,-3106 }, {  42,-3106 }, {  43,-3106 }, {  44,-3106 }, {  45,-3106 },
 {  46,-3106 }, {  47,-3106 }, {  48,-3106 }, {  49,-3106 }, {   0,   8 },
 {   0,1539 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3157 }, {   0,   0 }, {  12,-3157 }, {  13,-3157 }, {  14,-3157 },
 {   0,   0 }, {   0,   0 }, {  17,-3157 }, {  18,-3157 }, {  19,-3157 },
 {  20,-3157 }, {  21,-3157 }, {  22,-3157 }, {  23,-3157 }, {  24,-3157 },
 {  25,-3157 }, {  26,-3157 }, {  27,-3157 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-3157 }, {  32,-3157 }, {  33,-3157 }, {  34,-3157 },

 {  35,-3157 }, {  36,-3157 }, {  37,-3157 }, {  38,-3157 }, {  39,-3157 },
 {  40,-3157 }, {  41,-3157 }, {  42,-3157 }, {  43,-3157 }, {  44,-3157 },
 {  45,-3157 }, {  46,-3157 }, {  47,-3157 }, {  48,-3157 }, {  49,-3157 },
 {   0,  21 }, {   0,1488 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3208 }, {   0,   0 }, {  12,-3208 }, {  13,-3208 },
 {  14,-3208 }, {   0,   0 }, {   0,   0 }, {  17,-3208 }, {  18,-3208 },
 {  19,-3208 }, {  20,-3208 }, {  21,-3208 }, {  22,-3208 }, {  23,-3208 },
 {  24,-3208 }, {  25,-3208 }, {  26,-3208 }, {  27,-3208 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-3208 }, {  32, 408 }, {  33,-3208 },

 {  34,-3208 }, {  35,-3208 }, {  36,-3208 }, {  37,-3208 }, {  38,-3208 },
 {  39,-3208 }, {  40,-3208 }, {  41,-3208 }, {  42,-3208 }, {  43,-3208 },
 {  44,-3208 }, {  45,-3208 }, {  46,-3208 }, {  47,-3208 }, {  48,-3208 },
 {  49,-3208 }, {   0,  21 }, {   0,1437 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3259 }, {   0,   0 }, {  12,-3259 },
 {  13,-3259 }, {  14,-3259 }, {   0,   0 }, {   0,   0 }, {  17,-3259 },
 {  18,-3259 }, {  19,-3259 }, {  20,-3259 }, {  21,-3259 }, {  22,-3259 },
 {  23,-3259 }, {  24,-3259 }, {  25,-3259 }, {  26,-3259 }, {  27,-3259 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3259 }, {  32,-3259 },

 {  33,-3259 }, {  34,-3259 }, {  35, 408 }, {  36,-3259 }, {  37,-3259 },
 {  38,-3259 }, {  39,-3259 }, {  40,-3259 }, {  41,-3259 }, {  42,-3259 },
 {  43,-3259 }, {  44,-3259 }, {  45,-3259 }, {  46,-3259 }, {  47,-3259 },
 {  48,-3259 }, {  49,-3259 }, {   0,  21 }, {   0,1386 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3310 }, {   0,   0 },
 {  12,-3310 }, {  13,-3310 }, {  14,-3310 }, {   0,   0 }, {   0,   0 },
 {  17,-3310 }, {  18,-3310 }, {  19,-3310 }, {  20,-3310 }, {  21,-3310 },
 {  22,-3310 }, {  23,-3310 }, {  24,-3310 }, {  25,-3310 }, {  26,-3310 },
 {  27,-3310 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3310 },

 {  32,-3310 }, {  33,-3310 }, {  34,-3310 }, {  35,-3310 }, {  36,-3310 },
 {  37,-3310 }, {  38,-3310 }, {  39,-3310 }, {  40,-3310 }, {  41,-3310 },
 {  42,-3310 }, {  43,-3310 }, {  44,-3310 }, {  45, 408 }, {  46,-3310 },
 {  47,-3310 }, {  48,-3310 }, {  49,-3310 }, {   0,  21 }, {   0,1335 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3361 },
 {   0,   0 }, {  12,-3361 }, {  13,-3361 }, {  14,-3361 }, {   0,   0 },
 {   0,   0 }, {  17,-3361 }, {  18,-3361 }, {  19,-3361 }, {  20,-3361 },
 {  21,-3361 }, {  22,-3361 }, {  23,-3361 }, {  24,-3361 }, {  25,-3361 },
 {  26,-3361 }, {  27,-3361 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  31,-3361 }, {  32,-3361 }, {  33,-3361 }, {  34,-3361 }, {  35,-3361 },
 {  36,-3361 }, {  37,-3361 }, {  38,-3361 }, {  39,-3361 }, {  40,-3361 },
 {  41,-3361 }, {  42,-3361 }, {  43,-3361 }, {  44,-3361 }, {  45,-3361 },
 {  46, 408 }, {  47,-3361 }, {  48,-3361 }, {  49,-3361 }, {   0,  21 },
 {   0,1284 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3412 }, {   0,   0 }, {  12,-3412 }, {  13,-3412 }, {  14,-3412 },
 {   0,   0 }, {   0,   0 }, {  17,-3412 }, {  18,-3412 }, {  19,-3412 },
 {  20,-3412 }, {  21,-3412 }, {  22,-3412 }, {  23, 409 }, {  24,-3412 },
 {  25,-3412 }, {  26,-3412 }, {  27,-3412 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  31,-3412 }, {  32,-3412 }, {  33,-3412 }, {  34,-3412 },
 {  35,-3412 }, {  36,-3412 }, {  37,-3412 }, {  38,-3412 }, {  39,-3412 },
 {  40,-3412 }, {  41,-3412 }, {  42,-3412 }, {  43,-3412 }, {  44,-3412 },
 {  45,-3412 }, {  46,-3412 }, {  47,-3412 }, {  48,-3412 }, {  49,-3412 },
 {   0,  21 }, {   0,1233 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3463 }, {   0,   0 }, {  12,-3463 }, {  13,-3463 },
 {  14,-3463 }, {   0,   0 }, {   0,   0 }, {  17,-3463 }, {  18,-3463 },
 {  19,-3463 }, {  20,-3463 }, {  21,-3463 }, {  22,-3463 }, {  23,-3463 },
 {  24,-3463 }, {  25,-3463 }, {  26,-3463 }, {  27,-3463 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31,-3463 }, {  32,-3463 }, {  33,-3463 },
 {  34,-3463 }, {  35,-3463 }, {  36,-3463 }, {  37,-3463 }, {  38,-3463 },
 {  39, 409 }, {  40,-3463 }, {  41,-3463 }, {  42,-3463 }, {  43,-3463 },
 {  44,-3463 }, {  45,-3463 }, {  46,-3463 }, {  47,-3463 }, {  48,-3463 },
 {  49,-3463 }, {   0,  21 }, {   0,1182 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3514 }, {   0,   0 }, {  12,-3514 },
 {  13,-3514 }, {  14,-3514 }, {   0,   0 }, {   0,   0 }, {  17,-3514 },
 {  18,-3514 }, {  19,-3514 }, {  20,-3514 }, {  21,-3514 }, {  22,-3514 },
 {  23,-3514 }, {  24,-3514 }, {  25,-3514 }, {  26,-3514 }, {  27,-3514 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3514 }, {  32,-3514 },
 {  33,-3514 }, {  34,-3514 }, {  35,-3514 }, {  36,-3514 }, {  37, 409 },
 {  38,-3514 }, {  39,-3514 }, {  40,-3514 }, {  41,-3514 }, {  42,-3514 },
 {  43,-3514 }, {  44,-3514 }, {  45,-3514 }, {  46,-3514 }, {  47,-3514 },
 {  48,-3514 }, {  49,-3514 }, {   0,  21 }, {   0,1131 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3565 }, {   0,   0 },
 {  12,-3565 }, {  13,-3565 }, {  14,-3565 }, {   0,   0 }, {   0,   0 },
 {  17,-3565 }, {  18,-3565 }, {  19,-3565 }, {  20,-3565 }, {  21,-3565 },
 {  22,-3565 }, {  23,-3565 }, {  24,-3565 }, {  25,-3565 }, {  26,-3565 },

 {  27,-3565 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3565 },
 {  32, 409 }, {  33,-3565 }, {  34,-3565 }, {  35,-3565 }, {  36,-3565 },
 {  37,-3565 }, {  38,-3565 }, {  39,-3565 }, {  40,-3565 }, {  41,-3565 },
 {  42,-3565 }, {  43,-3565 }, {  44,-3565 }, {  45,-3565 }, {  46,-3565 },
 {  47,-3565 }, {  48,-3565 }, {  49,-3565 }, {   0,  21 }, {   0,1080 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3616 },
 {   0,   0 }, {  12,-3616 }, {  13,-3616 }, {  14,-3616 }, {   0,   0 },
 {   0,   0 }, {  17,-3616 }, {  18,-3616 }, {  19,-3616 }, {  20,-3616 },
 {  21,-3616 }, {  22,-3616 }, {  23,-3616 }, {  24,-3616 }, {  25,-3616 },

 {  26,-3616 }, {  27,-3616 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-3616 }, {  32,-3616 }, {  33,-3616 }, {  34,-3616 }, {  35,-3616 },
 {  36,-3616 }, {  37,-3616 }, {  38,-3616 }, {  39,-3616 }, {  40,-3616 },
 {  41, 409 }, {  42,-3616 }, {  43,-3616 }, {  44,-3616 }, {  45,-3616 },
 {  46,-3616 }, {  47,-3616 }, {  48,-3616 }, {  49,-3616 }, {   0,  21 },
 {   0,1029 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3667 }, {   0,   0 }, {  12,-3667 }, {  13,-3667 }, {  14,-3667 },
 {   0,   0 }, {   0,   0 }, {  17,-3667 }, {  18,-3667 }, {  19,-3667 },
 {  20,-3667 }, {  21,-3667 }, {  22,-3667 }, {  23,-3667 }, {  24,-3667 },

 {  25,-3667 }, {  26,-3667 }, {  27,-3667 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-3667 }, {  32,-3667 }, {  33,-3667 }, {  34,-3667 },
 {  35,-3667 }, {  36,-3667 }, {  37,-3667 }, {  38,-3667 }, {  39,-3667 },
 {  40,-3667 }, {  41,-3667 }, {  42,-3667 }, {  43,-3667 }, {  44,-3667 },
 {  45, 409 }, {  46,-3667 }, {  47,-3667 }, {  48,-3667 }, {  49,-3667 },
 {   0,   4 }, {   0, 978 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3718 }, {   0,   0 }, {  12,-3718 }, {  13,-3718 },
 {  14,-3718 }, {   0,   0 }, {   0,   0 }, {  17,-3718 }, {  18,-3718 },
 {  19,-3718 }, {  20,-3718 }, {  21,-3718 }, {  22,-3718 }, {  23,-3718 },

 {  24,-3718 }, {  25,-3718 }, {  26,-3718 }, {  27,-3718 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-3718 }, {  32,-3718 }, {  33,-3718 },
 {  34,-3718 }, {  35,-3718 }, {  36,-3718 }, {  37,-3718 }, {  38,-3718 },
 {  39,-3718 }, {  40,-3718 }, {  41,-3718 }, {  42,-3718 }, {  43,-3718 },
 {  44,-3718 }, {  45,-3718 }, {  46,-3718 }, {  47,-3718 }, {  48,-3718 },
 {  49,-3718 }, {   0,   3 }, {   0, 927 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3769 }, {   0,   0 }, {  12,-3769 },
 {  13,-3769 }, {  14,-3769 }, {   0,   0 }, {   0, 911 }, {  17,-3769 },
 {  18,-3769 }, {  19,-3769 }, {  20,-3769 }, {  21,-3769 }, {  22,-3769 },

 {  23,-3769 }, {  24,-3769 }, {  25,-3769 }, {  26,-3769 }, {  27,-3769 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3769 }, {  32,-3769 },
 {  33,-3769 }, {  34,-3769 }, {  35,-3769 }, {  36,-3769 }, {  37,-3769 },
 {  38,-3769 }, {  39,-3769 }, {  40,-3769 }, {  41,-3769 }, {  42,-3769 },
 {  43,-3769 }, {  44,-3769 }, {  45,-3769 }, {  46,-3769 }, {  47,-3769 },
 {  48,-3769 }, {  49,-3769 }, {  34, 307 }, {   0,  21 }, {   0, 875 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3821 },
 {   0,   0 }, {  12,-3821 }, {  13,-3821 }, {  14,-3821 }, {   0,   0 },
 {   0,   0 }, {  17,-3821 }, {  18,-3821 }, {  19,-3821 }, {  20,-3821 },

 {  21,-3821 }, {  22,-3821 }, {  23,-3821 }, {  24,-3821 }, {  25,-3821 },
 {  26, 308 }, {  27,-3821 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-3821 }, {  32,-3821 }, {  33,-3821 }, {  34,-3821 }, {  35,-3821 },
 {  36,-3821 }, {  37,-3821 }, {  38,-3821 }, {  39,-3821 }, {  40,-3821 },
 {  41,-3821 }, {  42,-3821 }, {  43,-3821 }, {  44,-3821 }, {  45,-3821 },
 {  46,-3821 }, {  47,-3821 }, {  48,-3821 }, {  49,-3821 }, {   0,  21 },
 {   0, 824 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3872 }, {   0,   0 }, {  12,-3872 }, {  13,-3872 }, {  14,-3872 },
 {   0,   0 }, {   0,   0 }, {  17,-3872 }, {  18,-3872 }, {  19,-3872 },

 {  20,-3872 }, {  21,-3872 }, {  22,-3872 }, {  23,-3872 }, {  24,-3872 },
 {  25,-3872 }, {  26,-3872 }, {  27,-3872 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-3872 }, {  32,-3872 }, {  33,-3872 }, {  34,-715 },
 {  35,-3872 }, {  36,-3872 }, {  37,-3872 }, {  38,-3872 }, {  39,-3872 },
 {  40,-3872 }, {  41,-3872 }, {  42,-3872 }, {  43,-3872 }, {  44,-3872 },
 {  45,-3872 }, {  46,-3872 }, {  47,-3872 }, {  48,-3872 }, {  49,-3872 },
 {   0,  21 }, {   0, 773 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3923 }, {   0,   0 }, {  12,-3923 }, {  13,-3923 },
 {  14,-3923 }, {   0,   0 }, {   0,   0 }, {  17,-3923 }, {  18,-3923 },

 {  19,-3923 }, {  20, 257 }, {  21,-3923 }, {  22,-3923 }, {  23,-3923 },
 {  24,-3923 }, {  25,-3923 }, {  26,-3923 }, {  27,-3923 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-3923 }, {  32,-3923 }, {  33,-3923 },
 {  34,-3923 }, {  35,-3923 }, {  36,-3923 }, {  37,-3923 }, {  38,-3923 },
 {  39,-3923 }, {  40,-3923 }, {  41,-3923 }, {  42,-3923 }, {  43,-3923 },
 {  44,-3923 }, {  45,-3923 }, {  46,-3923 }, {  47,-3923 }, {  48,-3923 },
 {  49,-3923 }, {   0,  21 }, {   0, 722 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3974 }, {   0,   0 }, {  12,-3974 },
 {  13,-3974 }, {  14,-3974 }, {   0,   0 }, {   0,   0 }, {  17,-3974 },

 {  18,-3974 }, {  19,-3974 }, {  20,-3974 }, {  21,-3974 }, {  22,-3974 },
 {  23,-3974 }, {  24,-3974 }, {  25,-3974 }, {  26,-3974 }, {  27,-3974 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3974 }, {  32,-3974 },
 {  33, 257 }, {  34,-3974 }, {  35,-3974 }, {  36,-3974 }, {  37,-3974 },
 {  38,-3974 }, {  39,-3974 }, {  40,-3974 }, {  41,-3974 }, {  42,-3974 },
 {  43,-3974 }, {  44,-3974 }, {  45,-3974 }, {  46,-3974 }, {  47,-3974 },
 {  48,-3974 }, {  49,-3974 }, {   0,   2 }, {   0, 671 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4025 }, {   0,   0 },
 {  12,-4025 }, {  13,-4025 }, {  14,-4025 }, {   0,   0 }, {   0,   0 },

 {  17,-4025 }, {  18,-4025 }, {  19,-4025 }, {  20,-4025 }, {  21,-4025 },
 {  22,-4025 }, {  23,-4025 }, {  24,-4025 }, {  25,-4025 }, {  26,-4025 },
 {  27,-4025 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4025 },
 {  32,-4025 }, {  33,-4025 }, {  34,-4025 }, {  35,-4025 }, {  36,-4025 },
 {  37,-4025 }, {  38,-4025 }, {  39,-4025 }, {  40,-4025 }, {  41,-4025 },
 {  42,-4025 }, {  43,-4025 }, {  44,-4025 }, {  45,-4025 }, {  46,-4025 },
 {  47,-4025 }, {  48,-4025 }, {  49,-4025 }, {   0,   6 }, {   0, 620 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4076 },
 {   0,   0 }, {  12,-4076 }, {  13,-4076 }, {  14,-4076 }, {   0,   0 },

 {   0, 604 }, {  17,-4076 }, {  18,-4076 }, {  19,-4076 }, {  20,-4076 },
 {  21,-4076 }, {  22,-4076 }, {  23,-4076 }, {  24,-4076 }, {  25,-4076 },
 {  26,-4076 }, {  27,-4076 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-4076 }, {  32,-4076 }, {  33,-4076 }, {  34,-4076 }, {  35,-4076 },
 {  36,-4076 }, {  37,-4076 }, {  38,-4076 }, {  39,-4076 }, {  40,-4076 },
 {  41,-4076 }, {  42,-4076 }, {  43,-4076 }, {  44,-4076 }, {  45,-4076 },
 {  46,-4076 }, {  47,-4076 }, {  48,-4076 }, {  49,-4076 }, {   0,   0 },
 {  35,  39 }, {   0,  21 }, {   0, 567 }, {   0,   0 }, {   0, 565 },
 {   0,   0 }, {   2,   5 }, {   0,   0 }, {   0,   0 }, {   0, 560 },
 {   0,   0 }, {   2,   0 }, {  10,-4129 }, {   4, 350 }, {  12,-4129 },

 {  13,-4129 }, {  14,-4129 }, {   0,   0 }, {   0,   0 }, {  17,-4129 },
 {  18,-4129 }, {  19,-4129 }, {  20,-4129 }, {  21,-4129 }, {  22,-4129 },
 {  23,-4129 }, {  24,-4129 }, {  25, 153 }, {  26,-4129 }, {  27,-4129 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4129 }, {  32,-4129 },
 {  33,-4129 }, {  34,-4129 }, {  35,-4129 }, {  36,-4129 }, {  37,-4129 },
 {  38,-4129 }, {  39,-4129 }, {  40,-4129 }, {  41,-4129 }, {  42,-4129 },
 {  43,-4129 }, {  44,-4129 }, {  45,-4129 }, {  46,-4129 }, {  47,-4129 },
 {  48,-4129 }, {  49,-4129 }, {   0,  21 }, {   0, 516 }, {   0,   0 },
 {   0, 514 }, {   0,   0 }, {   2,  51 }, {   3,  56 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4180 }, {   0,   0 },

 {  12,-4180 }, {  13,-4180 }, {  14,-4180 }, {   0,   0 }, {   0,   0 },
 {  17,-4180 }, {  18,-4180 }, {  19,-4180 }, {  20,-4180 }, {  21,-4180 },
 {  22,-4180 }, {  23,-4180 }, {  24,-4180 }, {  25,-4180 }, {  26,-4180 },
 {  27,-4180 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4180 },
 {  32,-4180 }, {  33,-4180 }, {  34,-4180 }, {  35, 153 }, {  36,-4180 },
 {  37,-4180 }, {  38,-4180 }, {  39,-4180 }, {  40,-4180 }, {  41,-4180 },
 {  42,-4180 }, {  43,-4180 }, {  44,-4180 }, {  45,-4180 }, {  46,-4180 },
 {  47,-4180 }, {  48,-4180 }, {  49,-4180 }, {   0,  21 }, {   0, 465 },
 {   0,   0 }, {   0, 463 }, {   0,   0 }, {   2,   0 }, {   3,   5 },
 {   0,   7 }, {   0, 458 }, {   0,   0 }, {   0,   0 }, {  10,-4231 },

 {   0,   0 }, {  12,-4231 }, {  13,-4231 }, {  14,-4231 }, {   0,   0 },
 {   0,   0 }, {  17,-4231 }, {  18,-4231 }, {  19,-4231 }, {  20,-4231 },
 {  21,-4231 }, {  22,-4231 }, {  23,-4231 }, {  24,-4231 }, {  25,-4231 },
 {  26,-4231 }, {  27,-4231 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-4231 }, {  32,-4231 }, {  33,-4231 }, {  34,-4231 }, {  35, 153 },
 {  36,-4231 }, {  37,-4231 }, {  38,-4231 }, {  39,-4231 }, {  40,-4231 },
 {  41,-4231 }, {  42,-4231 }, {  43,-4231 }, {  44,-4231 }, {  45,-4231 },
 {  46,-4231 }, {  47,-4231 }, {  48,-4231 }, {  49,-4231 }, {   0,   1 },
 {   0, 414 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  10,-4282 }, {   0,   0 }, {  12,-4282 }, {  13,-4282 }, {  14,-4282 },
 {   0,   0 }, {   0,   0 }, {  17,-4282 }, {  18,-4282 }, {  19,-4282 },
 {  20,-4282 }, {  21,-4282 }, {  22,-4282 }, {  23,-4282 }, {  24,-4282 },
 {  25,-4282 }, {  26,-4282 }, {  27,-4282 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-4282 }, {  32,-4282 }, {  33,-4282 }, {  34,-4282 },
 {  35,-4282 }, {  36,-4282 }, {  37,-4282 }, {  38,-4282 }, {  39,-4282 },
 {  40,-4282 }, {  41,-4282 }, {  42,-4282 }, {  43,-4282 }, {  44,-4282 },
 {  45,-4282 }, {  46,-4282 }, {  47,-4282 }, {  48,-4282 }, {  49,-4282 },
 {   0,  21 }, {   0, 363 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  10,-4333 }, {   0,   0 }, {  12,-4333 }, {  13,-4333 },
 {  14,-4333 }, {   0,   0 }, {   0,   0 }, {  17,-4333 }, {  18,-4333 },
 {  19,-4333 }, {  20,-4333 }, {  21,-4333 }, {  22,-4333 }, {  23,-4333 },
 {  24,-4333 }, {  25,-4333 }, {  26,-4333 }, {  27,-4333 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-4333 }, {  32,-4333 }, {  33,-4333 },
 {  34,-4333 }, {  35,-4333 }, {  36,-4333 }, {  37,-4333 }, {  38,-4333 },
 {  39,-4333 }, {  40,-4333 }, {  41,-4333 }, {  42,-4333 }, {  43,-4333 },
 {  44, 102 }, {  45,-4333 }, {  46,-4333 }, {  47,-4333 }, {  48,-4333 },
 {  49,-4333 }, {   0,   5 }, {   0, 312 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  10,-4384 }, {   0,   0 }, {  12,-4384 },
 {  13,-4384 }, {  14,-4384 }, {   0,   0 }, {   0,   0 }, {  17,-4384 },
 {  18,-4384 }, {  19,-4384 }, {  20,-4384 }, {  21,-4384 }, {  22,-4384 },
 {  23,-4384 }, {  24,-4384 }, {  25,-4384 }, {  26,-4384 }, {  27,-4384 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4384 }, {  32,-4384 },
 {  33,-4384 }, {  34,-4384 }, {  35,-4384 }, {  36,-4384 }, {  37,-4384 },
 {  38,-4384 }, {  39,-4384 }, {  40,-4384 }, {  41,-4384 }, {  42,-4384 },
 {  43,-4384 }, {  44,-4384 }, {  45,-4384 }, {  46,-4384 }, {  47,-4384 },
 {  48,-4384 }, {  49,-4384 }, {   0,  21 }, {   0, 261 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4435 }, {   0,   0 },
 {  12,-4435 }, {  13,-4435 }, {  14,-4435 }, {   0,   0 }, {   0,   0 },
 {  17,-4435 }, {  18,-4435 }, {  19,-4435 }, {  20,-4435 }, {  21,-4435 },
 {  22,-4435 }, {  23,-4435 }, {  24,-4435 }, {  25,-4435 }, {  26,-4435 },
 {  27,-4435 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4435 },
 {  32,-4435 }, {  33,-4435 }, {  34,-4435 }, {  35,-4435 }, {  36,-4435 },
 {  37,-4435 }, {  38,-4435 }, {  39,-4435 }, {  40,-4435 }, {  41,-4435 },
 {  42,-4435 }, {  43,-4435 }, {  44,-4435 }, {  45,-4435 }, {  46,-4435 },
 {  47, 104 }, {  48,-4435 }, {  49,-4435 }, {   0,   0 }, {   0, 210 },
 {   1, 104 }, {   2, 104 }, {   0,   0 }, {   4,-304 }, {   5, 104 },

 {   6, 104 }, {   7, 104 }, {   8, 104 }, {   9, 104 }, {  10, 104 },
 {  11, 104 }, {  12, 104 }, {  13, 104 }, {  14, 104 }, {  15, 104 },
 {  16, 104 }, {  17, 104 }, {  18, 104 }, {  19, 104 }, {  20, 104 },
 {  21, 104 }, {  22, 104 }, {  23, 104 }, {  24, 104 }, {  25, 104 },
 {  26, 104 }, {  27, 104 }, {  28, 104 }, {  29, 104 }, {  30, 104 },
 {  31, 104 }, {  32, 104 }, {  33, 104 }, {  34, 104 }, {  35, 104 },
 {  36, 104 }, {  37, 104 }, {  38, 104 }, {  39, 104 }, {  40, 104 },
 {  41, 104 }, {  42, 104 }, {  43, 104 }, {  44, 104 }, {  45, 104 },
 {  46, 104 }, {  47, 104 }, {  48, 104 }, {  49, 104 }, {  50, 104 },
 {  51, 104 }, {   0,  21 }, {   0, 157 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-4539 }, {   0,   0 }, {  12,-4539 },
 {  13,-4539 }, {  14,-4539 }, {   0,   0 }, {   0,   0 }, {  17,-4539 },
 {  18,-4539 }, {  19,-4539 }, {  20,-4539 }, {  21,-4539 }, {  22,-4539 },
 {  23,-4539 }, {  24,-4539 }, {  25,-4539 }, {  26,-4539 }, {  27,-4539 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4539 }, {  32,-4539 },
 {  33,-4539 }, {  34,-4539 }, {  35,-4539 }, {  36,-4539 }, {  37,-4539 },
 {  38, 104 }, {  39,-4539 }, {  40,-4539 }, {  41,-4539 }, {  42,-4539 },
 {  43,-4539 }, {  44,-4539 }, {  45,-4539 }, {  46,-4539 }, {  47,-4539 },
 {  48,-4539 }, {  49,-4539 }, {   0,   0 }, {   0, 106 }, {   1,   0 },

 {   2,   0 }, {   0,   0 }, {   4,-408 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },

 {   0,  18 }, {   0,  53 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-4643 }, {   0,   0 }, {  12,-4643 }, {  13,-4643 },
 {  14,-4643 }, {   0,   0 }, {   0,   0 }, {  17,-4643 }, {  18,-4643 },
 {  19,-4643 }, {  20,-4643 }, {  21,-4643 }, {  22,-4643 }, {  23,-4643 },
 {  24,-4643 }, {  25,-4643 }, {  26,-4643 }, {  27,-4643 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-4643 }, {  32,-4643 }, {  33,-4643 },
 {  34,-4643 }, {  35,-4643 }, {  36,-4643 }, {  37,-4643 }, {  38,-4643 },
 {  39,-4643 }, {  40,-4643 }, {  41,-4643 }, {  42,-4643 }, {  43,-4643 },
 {  44,-4643 }, {  45,-4643 }, {  46,-4643 }, {  47,-4643 }, {  48,-4643 },

 {  49,-4643 }, {   0,   0 }, {   0,   0 }, {  52,  36 }, {   1,   0 },
    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[56],
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        7,    8,    1,    9,    1,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   18,   21,
       18,   18,   18,   18,   18,   22,   18,   18,   23,   18,
       18,   18,   24,   25,   26,   18,   18,   18,   27,   18,
       28,   29,   30,    1,   31,    1,   32,   18,   33,   34,

       35,   36,   37,   38,   39,   18,   18,   40,   41,   42,
       43,   44,   18,   45,   46,   47,   48,   49,   18,   18,
       18,   18,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[36] =
    {   0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int glfx_flex_debug;
int glfx_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *glfxtext;
#line 1 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
/*
Flex and Bison files have three sections:

the first is sort of "control" information,
the second is the actual token/grammar definitions,
the last is C code to be copied verbatim to the output.
*/
#line 16 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
    #ifdef _MSC_VER
    // MS's C++ compiler is more strict than gcc

    // No unistd.h
    #define YY_NO_UNISTD_H

    // Direct IO functions (read and such)
    #include <io.h>

    // Disable the warning for glfxwrap
    #pragma warning( disable: 4003 )

    // Disable the warning about depracted naming of _read and friends
    #pragma warning( disable: 4996 )

    #endif

    #ifdef _M_X64
    // flex is (still) incompatible with x64
    // it makes some casts from pointers to integers (pointer casts seem to be fixed in the latest version) and from size_t to integers
    // it should work though, nothing too serious
    #pragma warning( disable:4267 )
    #pragma warning( disable:4244 )
    #endif

    #include <iostream>
    #include <string>
    #include <sstream>

    #include "glfxParser.h"
    #include "glfxClasses.h"
    #include "glfxEffect.h"

    // tokens from parser generator
    #include "glfxLALRParser.hpp"

    static void errLex(const char* tok);

    using namespace std;
    using namespace glfxParser;
#pragma optimize("",off)
/* The %% means that we are done with the CONTROL section, and now move onto the token definitions*/
#line 1732 "src/glfxScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int glfxlex_destroy (void );

int glfxget_debug (void );

void glfxset_debug (int debug_flag  );

YY_EXTRA_TYPE glfxget_extra (void );

void glfxset_extra (YY_EXTRA_TYPE user_defined  );

FILE *glfxget_in (void );

void glfxset_in  (FILE * in_str  );

FILE *glfxget_out (void );

void glfxset_out  (FILE * out_str  );

yy_size_t glfxget_leng (void );

char *glfxget_text (void );

int glfxget_lineno (void );

void glfxset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int glfxwrap (void );
#else
extern int glfxwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( glfxtext, glfxleng, 1, glfxout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(glfxin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(glfxin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int glfxlex (void);

#define YY_DECL int glfxlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after glfxtext and glfxleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( glfxleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(glfxtext[glfxleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 65 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"

#line 1903 "src/glfxScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! glfxin )
			glfxin = stdin;

		if ( ! glfxout )
			glfxout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			glfxensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				glfx_create_buffer(glfxin,YY_BUF_SIZE );
		}

		glfx_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of glfxtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = yy_ec[YY_SC_TO_UI(*++yy_cp)]  )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < glfxleng; ++yyl )
				if ( glfxtext[yyl] == '\n' )
					   
    glfxlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 66 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else { return LAYOUT;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=false; return PROGRAM;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 68 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=true; return PROGRAM;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 69 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; return SHADER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; return INTERFACE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 71 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return SAMPLER;
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 72 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
{
									    string tmp(glfxtext);
									    size_t firstLoc=tmp.find('"')+1;
									    size_t secondLoc=tmp.find('"', firstLoc);
									    glfxlval.strs[0]=tmp.substr(firstLoc, secondLoc-firstLoc);
									    glfxlval.lineno=glfxlineno-1; // flex has already jumped one line, since \n was eaten
									    return INCLUDE;
									}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 80 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.strs[0]=glfxtext; return STORAGET;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 81 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=VS; return SHADER_TYPE;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 82 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TC; return SHADER_TYPE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 83 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TE; return SHADER_TYPE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 84 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=GS; return SHADER_TYPE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=FS; return SHADER_TYPE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 86 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=CS; return SHADER_TYPE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 87 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=atoi(glfxtext); return NUM;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 88 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.fnum=(float)atof(glfxtext); return FLOAT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 89 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return STORAGEQ;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 90 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return GL_FRAGDEPTH;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 91 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=1; return NUM;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 92 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=0; return NUM;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 93 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return IDENTIFIER;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 94 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 95 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 96 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LB;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 97 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RB;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 98 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EMPTY_ARRAY_BRACKETS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 99 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COMMA;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EQUALS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 101 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return SC;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 102 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COLON;}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 103 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Single line comment (with possible continuation)
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 104 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Multiline comment
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 105 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 106 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {errLex(glfxtext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 107 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
ECHO;
	YY_BREAK
#line 2177 "src/glfxScanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed glfxin at a new source and called
			 * glfxlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = glfxin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( glfxwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * glfxtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of glfxlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glfxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			glfxrestart(glfxin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glfxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 1;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up glfxtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --glfxlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					glfxrestart(glfxin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( glfxwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve glfxtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    glfxlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void glfxrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        glfxensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            glfx_create_buffer(glfxin,YY_BUF_SIZE );
	}

	glfx_init_buffer(YY_CURRENT_BUFFER,input_file );
	glfx_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void glfx_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		glfxpop_buffer_state();
	 *		glfxpush_buffer_state(new_buffer);
     */
	glfxensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	glfx_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (glfxwrap()) processing, but the only time this flag
	 * is looked at is after glfxwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void glfx_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	glfxin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE glfx_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glfxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_is_our_buffer = 1;

	glfx_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with glfx_create_buffer()
 * 
 */
    void glfx_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glfxfree((void *) b->yy_ch_buf  );

	glfxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a glfxrestart() or at EOF.
 */
    static void glfx_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	glfx_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then glfx_init_buffer was _probably_
     * called from glfxrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void glfx_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		glfx_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	glfxensure_buffer_stack();

	/* This block is copied from glfx_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from glfx_switch_to_buffer. */
	glfx_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void glfxpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	glfx_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		glfx_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void glfxensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE glfx_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	glfx_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to glfxlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       glfx_scan_bytes() instead.
 */
YY_BUFFER_STATE glfx_scan_string (yyconst char * yystr )
{
    
	return glfx_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to glfxlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE glfx_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) glfxalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = glfx_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in glfx_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		glfxtext[glfxleng] = (yy_hold_char); \
		(yy_c_buf_p) = glfxtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		glfxleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int glfxget_lineno  (void)
{
        
    return glfxlineno;
}

/** Get the input stream.
 * 
 */
FILE *glfxget_in  (void)
{
        return glfxin;
}

/** Get the output stream.
 * 
 */
FILE *glfxget_out  (void)
{
        return glfxout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t glfxget_leng  (void)
{
        return glfxleng;
}

/** Get the current token.
 * 
 */

char *glfxget_text  (void)
{
        return glfxtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void glfxset_lineno (int  line_number )
{
    
    glfxlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see glfx_switch_to_buffer
 */
void glfxset_in (FILE *  in_str )
{
        glfxin = in_str ;
}

void glfxset_out (FILE *  out_str )
{
        glfxout = out_str ;
}

int glfxget_debug  (void)
{
        return glfx_flex_debug;
}

void glfxset_debug (int  bdebug )
{
        glfx_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from glfxlex_destroy(), so don't allocate here.
     */

    /* We do not touch glfxlineno unless the option is enabled. */
    glfxlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    glfxin = stdin;
    glfxout = stdout;
#else
    glfxin = (FILE *) 0;
    glfxout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * glfxlex_init()
     */
    return 0;
}

/* glfxlex_destroy is for both reentrant and non-reentrant scanners. */
int glfxlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		glfx_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		glfxpop_buffer_state();
	}

	/* Destroy the stack itself. */
	glfxfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * glfxlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glfxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glfxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glfxfree (void * ptr )
{
	free( (char *) ptr );	/* see glfxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 107 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"



void errLex(const char* tok)
{
    ostringstream errMsg;
    
    errMsg<<"0("<<glfxlineno<<") : error: Unkown token '"<<tok<<'\'';
    throw errMsg.str();
}

string glfxreadblock(unsigned char openChar, unsigned char closeChar)
{
    string str;
    int braceBalance=0;
    unsigned char c;
    bool done=false;
    do {
        c=(unsigned char)yyinput();
        str+=c;
        if(c==0)
		{
            throw "Brace balance error\n";
		}
        else if(c==openChar)
		{
            braceBalance++;
		}
        else if(c==closeChar) {
            braceBalance--;
            if(braceBalance<0)
			{
                throw "Brace balance error\n";
			}
            else if(braceBalance==0)
                done=true;
        }
    } while(!done);
    return str;
}

