#line 2 "src/glfxScanner.cpp"

#line 4 "src/glfxScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer glfx_create_buffer
#define yy_delete_buffer glfx_delete_buffer
#define yy_flex_debug glfx_flex_debug
#define yy_init_buffer glfx_init_buffer
#define yy_flush_buffer glfx_flush_buffer
#define yy_load_buffer_state glfx_load_buffer_state
#define yy_switch_to_buffer glfx_switch_to_buffer
#define yyin glfxin
#define yyleng glfxleng
#define yylex glfxlex
#define yylineno glfxlineno
#define yyout glfxout
#define yyrestart glfxrestart
#define yytext glfxtext
#define yywrap glfxwrap
#define yyalloc glfxalloc
#define yyrealloc glfxrealloc
#define yyfree glfxfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE glfxrestart(glfxin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t glfxleng;

extern FILE *glfxin, *glfxout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE glfxlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-glfxlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < glfxleng; ++yyl )\
                    if ( glfxtext[yyl] == '\n' )\
                        --glfxlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up glfxtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via glfxrestart()), so that the user can continue scanning by
	 * just pointing glfxin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when glfxtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t glfxleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow glfxwrap()'s to do buffer switches
 * instead of setting up a fresh glfxin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void glfxrestart (FILE *input_file  );
void glfx_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE glfx_create_buffer (FILE *file,int size  );
void glfx_delete_buffer (YY_BUFFER_STATE b  );
void glfx_flush_buffer (YY_BUFFER_STATE b  );
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void glfxpop_buffer_state (void );

static void glfxensure_buffer_stack (void );
static void glfx_load_buffer_state (void );
static void glfx_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER glfx_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE glfx_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE glfx_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE glfx_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *glfxalloc (yy_size_t  );
void *glfxrealloc (void *,yy_size_t  );
void glfxfree (void *  );

#define yy_new_buffer glfx_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        glfxensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glfx_create_buffer(glfxin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define glfxwrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *glfxin = (FILE *) 0, *glfxout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int glfxlineno;

int glfxlineno = 1;

extern char *glfxtext;
#define yytext_ptr glfxtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up glfxtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	glfxleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[6342] =
    {
 {   0,   0 }, {   0,6290 }, {   0,   0 }, {   0,6288 }, {   1, 108 },
 {   2, 110 }, {   3, 112 }, {   4, 108 }, {   5, 114 }, {   6, 116 },
 {   7, 118 }, {   8, 108 }, {   9, 120 }, {  10, 124 }, {  11, 122 },
 {  12, 176 }, {  13, 180 }, {  14, 184 }, {  15, 182 }, {  16, 200 },
 {  17, 236 }, {  18, 236 }, {  19, 288 }, {  20, 236 }, {  21, 236 },
 {  22, 236 }, {  23, 236 }, {  24, 236 }, {  25, 236 }, {  26, 236 },
 {  27, 236 }, {  28, 340 }, {  29, 108 }, {  30, 108 }, {  31, 108 },
 {  32, 236 }, {  33, 354 }, {  34, 236 }, {  35, 236 }, {  36, 406 },
 {  37, 458 }, {  38, 236 }, {  39, 510 }, {  40, 236 }, {  41, 236 },
 {  42, 236 }, {  43, 562 }, {  44, 614 }, {  45, 236 }, {  46, 236 },

 {  47, 666 }, {  48, 718 }, {  49, 236 }, {  50, 770 }, {  51, 344 },
 {  52, 346 }, {   0,   0 }, {   0,6234 }, {   1,  54 }, {   2,  56 },
 {   3,  58 }, {   4,  54 }, {   5, 368 }, {   6,  62 }, {   7,  64 },
 {   8,  54 }, {   9,  66 }, {  10,  70 }, {  11,  68 }, {  12, 122 },
 {  13, 126 }, {  14, 130 }, {  15, 128 }, {  16, 146 }, {  17, 182 },
 {  18, 182 }, {  19, 234 }, {  20, 182 }, {  21, 182 }, {  22, 182 },
 {  23, 182 }, {  24, 182 }, {  25, 182 }, {  26, 182 }, {  27, 182 },
 {  28, 286 }, {  29,  54 }, {  30,  54 }, {  31,  54 }, {  32, 182 },
 {  33, 300 }, {  34, 182 }, {  35, 182 }, {  36, 352 }, {  37, 404 },
 {  38, 182 }, {  39, 456 }, {  40, 182 }, {  41, 182 }, {  42, 182 },

 {  43, 508 }, {  44, 560 }, {  45, 182 }, {  46, 182 }, {  47, 612 },
 {  48, 664 }, {  49, 182 }, {  50, 716 }, {  51, 290 }, {  52, 292 },
 {   0,  38 }, {   0,6180 }, {   0,  37 }, {   0,6178 }, {   0,  37 },
 {   0,6176 }, {   0,  38 }, {   0,6174 }, {   0,  26 }, {   0,6172 },
 {   0,  27 }, {   0,6170 }, {   0,  31 }, {   0,6168 }, {   0,  38 },
 {   0,6166 }, {   0,  25 }, {   0,6164 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   8, 804 }, {   0,   0 },
 {   0,   0 }, {  11, 858 }, {  10, 698 }, {   0,   0 }, {  12, 750 },
 {  13, 750 }, {  14, 698 }, {   0,   0 }, {   0,   0 }, {  17, 698 },
 {  18, 698 }, {  19, 698 }, {  20, 698 }, {  21, 698 }, {  22, 698 },

 {  23, 698 }, {  24, 698 }, {  25, 698 }, {  26, 698 }, {  27, 698 },
 {   0,   0 }, {   0,   0 }, {  40, 321 }, {  31, 698 }, {  32, 698 },
 {  33, 698 }, {  34, 698 }, {  35, 698 }, {  36, 698 }, {  37, 698 },
 {  38, 698 }, {  39, 698 }, {  40, 698 }, {  41, 698 }, {  42, 698 },
 {  43, 698 }, {  44, 698 }, {  45, 698 }, {  46, 698 }, {  47, 698 },
 {  48, 698 }, {  49, 698 }, {  50, 698 }, {   0,  19 }, {   0,6112 },
 {   0,   0 }, {   0,   0 }, {   0,  19 }, {   0,6108 }, {   0,  33 },
 {   0,6106 }, {   0,  25 }, {   0,6104 }, {   0,   0 }, {  10, 337 },
 {   0,   0 }, {  12, 858 }, {  13, 858 }, {  10, 333 }, {   0,   0 },
 {  12, 858 }, {  13, 858 }, {  10, 638 }, {   0,   0 }, {  12, 638 },

 {  13, 638 }, {  14, 638 }, {   0,  32 }, {   0,6088 }, {  17, 638 },
 {  18, 638 }, {  19, 638 }, {  20, 638 }, {  21, 638 }, {  22, 638 },
 {  23, 638 }, {  24, 638 }, {  25, 638 }, {  26, 638 }, {  27, 638 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, 638 }, {  32, 638 },
 {  33, 638 }, {  34, 638 }, {  35, 638 }, {  36, 638 }, {  37, 638 },
 {  38, 638 }, {  39, 638 }, {  40, 638 }, {  41, 638 }, {  42, 638 },
 {  43, 638 }, {  44, 638 }, {  45, 638 }, {  46, 638 }, {  47, 638 },
 {  48, 638 }, {  49, 638 }, {  50, 638 }, {   0,  25 }, {   0,6052 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 586 },

 {   0,   0 }, {  12, 586 }, {  13, 586 }, {  14, 586 }, {   0,   0 },
 {   0,   0 }, {  17, 586 }, {  18, 586 }, {  19, 586 }, {  20, 586 },
 {  21, 586 }, {  22, 586 }, {  23, 586 }, {  24, 586 }, {  25, 586 },
 {  26, 586 }, {  27, 586 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31, 586 }, {  32, 586 }, {  33, 586 }, {  34, 586 }, {  35, 586 },
 {  36, 586 }, {  37, 586 }, {  38, 586 }, {  39, 586 }, {  40, 586 },
 {  41, 586 }, {  42, 586 }, {  43, 586 }, {  44, 586 }, {  45, 586 },
 {  46, 586 }, {  47, 586 }, {  48, 586 }, {  49, 586 }, {  50, 586 },
 {   0,  25 }, {   0,6000 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  10, 534 }, {   0,   0 }, {  12, 534 }, {  13, 534 },
 {  14, 534 }, {   0,   0 }, {   0,   0 }, {  17, 534 }, {  18, 534 },
 {  19, 534 }, {  20, 534 }, {  21, 534 }, {  22, 534 }, {  23, 534 },
 {  24, 754 }, {  25, 534 }, {  26, 534 }, {  27, 534 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31, 534 }, {  32, 534 }, {  33, 534 },
 {  34, 534 }, {  35, 534 }, {  36, 534 }, {  37, 534 }, {  38, 534 },
 {  39, 534 }, {  40, 534 }, {  41, 534 }, {  42, 534 }, {  43, 534 },
 {  44, 534 }, {  45, 534 }, {  46, 534 }, {  47, 534 }, {  48, 534 },
 {  49, 534 }, {  50, 534 }, {   0,  38 }, {   0,5948 }, {   0,   0 },
 {   2, 754 }, {   0,  28 }, {   0,5944 }, {   0,  29 }, {   0,5942 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  25 }, {   0,5934 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10, 468 }, {   0,   0 }, {  12, 468 },
 {  13, 468 }, {  14, 468 }, {   0,   0 }, {  30, 758 }, {  17, 468 },
 {  18, 468 }, {  19, 468 }, {  20, 468 }, {  21, 468 }, {  22, 468 },
 {  23, 468 }, {  24, 468 }, {  25, 468 }, {  26, 468 }, {  27, 468 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, 468 }, {  32, 468 },
 {  33, 468 }, {  34, 468 }, {  35, 754 }, {  36, 468 }, {  37, 468 },
 {  38, 468 }, {  39, 468 }, {  40, 468 }, {  41, 468 }, {  42, 468 },

 {  43, 468 }, {  44, 468 }, {  45, 468 }, {  46, 468 }, {  47, 806 },
 {  48, 468 }, {  49, 468 }, {  50, 468 }, {   0,  25 }, {   0,5882 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 416 },
 {   0,   0 }, {  12, 416 }, {  13, 416 }, {  14, 416 }, {   0,  38 },
 {   0,5866 }, {  17, 416 }, {  18, 416 }, {  19, 416 }, {  20, 416 },
 {  21, 416 }, {  22, 416 }, {  23, 416 }, {  24, 416 }, {  25, 416 },
 {  26, 416 }, {  27, 416 }, {   0,   0 }, {   0,5853 }, {   0,   0 },
 {  31, 416 }, {  32, 806 }, {  33, 416 }, {  34, 416 }, {  35, 416 },
 {  36, 416 }, {  37, 416 }, {  38, 416 }, {  39, 416 }, {  40, 416 },

 {  41, 416 }, {  42, 416 }, {  43, 416 }, {  44, 416 }, {  45, 416 },
 {  46, 416 }, {  47, 858 }, {  48, 416 }, {  49, 416 }, {  50, 416 },
 {   0,  25 }, {   0,5830 }, {   0,   0 }, {   0,   0 }, {  39, 754 },
 {  40,  13 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10, 364 }, {   0,   0 }, {  12, 364 }, {  13, 364 },
 {  14, 364 }, {   0,   0 }, {  39, 793 }, {  17, 364 }, {  18, 364 },
 {  19, 364 }, {  20, 364 }, {  21, 364 }, {  22, 364 }, {  23, 364 },
 {  24, 364 }, {  25, 364 }, {  26, 364 }, {  27, 364 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31, 364 }, {  32, 364 }, {  33, 364 },
 {  34, 364 }, {  35, 364 }, {  36, 364 }, {  37, 364 }, {  38, 364 },

 {  39, 364 }, {  40, 858 }, {  41, 364 }, {  42, 364 }, {  43, 364 },
 {  44, 364 }, {  45, 364 }, {  46, 910 }, {  47, 962 }, {  48, 364 },
 {  49, 364 }, {  50, 364 }, {   0,  25 }, {   0,5778 }, {   0,   0 },
 {   0,  20 }, {   0,5775 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 312 }, {   0,   0 },
 {  12, 312 }, {  13, 312 }, {  14, 312 }, {  12, 754 }, {  13, 754 },
 {  17, 312 }, {  18, 312 }, {  19, 312 }, {  20, 312 }, {  21, 312 },
 {  22, 312 }, {  23, 312 }, {  24, 312 }, {  25, 312 }, {  26, 312 },
 {  27, 312 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, 312 },
 {  32, 312 }, {  33, 312 }, {  34, 312 }, {  35, 312 }, {  36, 312 },

 {  37, 312 }, {  38, 312 }, {  39, 312 }, {  40, 312 }, {  41, 312 },
 {  42, 962 }, {  43, 312 }, {  44, 312 }, {  45, 312 }, {  46, 312 },
 {  47, 312 }, {  48, 312 }, {  49, 312 }, {  50, 312 }, {   0,  25 },
 {   0,5726 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10, 260 }, {   0,   0 }, {  12, 260 }, {  13, 260 }, {  14, 260 },
 {   0,   0 }, {   0,   0 }, {  17, 260 }, {  18, 260 }, {  19, 260 },
 {  20, 260 }, {  21, 260 }, {  22, 260 }, {  23, 260 }, {  24, 260 },
 {  25, 260 }, {  26, 260 }, {  27, 260 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31, 260 }, {  32, 260 }, {  33, 260 }, {  34, 260 },

 {  35, 260 }, {  36, 260 }, {  37, 260 }, {  38, 260 }, {  39, 260 },
 {  40, 260 }, {  41, 260 }, {  42, 260 }, {  43, 260 }, {  44, 260 },
 {  45, 260 }, {  46, 260 }, {  47, 260 }, {  48, 260 }, {  49, 962 },
 {  50, 260 }, {   0,  25 }, {   0,5674 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10, 208 }, {   0,   0 }, {  12, 208 },
 {  13, 208 }, {  14, 208 }, {   0,   0 }, {   0,   0 }, {  17, 208 },
 {  18, 208 }, {  19, 208 }, {  20, 208 }, {  21, 208 }, {  22, 208 },
 {  23, 208 }, {  24, 208 }, {  25, 208 }, {  26, 208 }, {  27, 208 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, 208 }, {  32, 962 },

 {  33, 208 }, {  34, 208 }, {  35, 208 }, {  36, 208 }, {  37, 208 },
 {  38, 208 }, {  39, 208 }, {  40, 208 }, {  41, 208 }, {  42, 208 },
 {  43, 208 }, {  44, 208 }, {  45, 208 }, {  46,1014 }, {  47, 208 },
 {  48, 208 }, {  49, 208 }, {  50, 208 }, {   0,  25 }, {   0,5622 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10, 156 },
 {   0,   0 }, {  12, 156 }, {  13, 156 }, {  14, 156 }, {   0,   0 },
 {   0,   0 }, {  17, 156 }, {  18, 156 }, {  19, 156 }, {  20, 156 },
 {  21, 156 }, {  22, 156 }, {  23, 156 }, {  24, 156 }, {  25, 156 },
 {  26, 156 }, {  27, 156 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  31, 156 }, {  32,1014 }, {  33, 156 }, {  34, 156 }, {  35, 156 },
 {  36, 156 }, {  37, 156 }, {  38,1066 }, {  39, 156 }, {  40, 156 },
 {  41, 156 }, {  42, 156 }, {  43, 156 }, {  44, 156 }, {  45, 156 },
 {  46, 156 }, {  47, 156 }, {  48,1118 }, {  49, 156 }, {  50, 156 },
 {   0,  25 }, {   0,5570 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10, 104 }, {   0,   0 }, {  12, 104 }, {  13, 104 },
 {  14, 104 }, {   0,   0 }, {   0,   0 }, {  17, 104 }, {  18, 104 },
 {  19, 104 }, {  20, 104 }, {  21, 104 }, {  22, 104 }, {  23, 104 },
 {  24, 104 }, {  25, 104 }, {  26, 104 }, {  27, 104 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31, 104 }, {  32, 104 }, {  33,1118 },
 {  34, 104 }, {  35,1170 }, {  36, 104 }, {  37, 104 }, {  38, 104 },
 {  39, 104 }, {  40, 104 }, {  41, 104 }, {  42, 104 }, {  43, 104 },
 {  44, 104 }, {  45, 104 }, {  46,1222 }, {  47, 104 }, {  48, 104 },
 {  49, 104 }, {  50, 104 }, {   0,  25 }, {   0,5518 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,  52 }, {   0,   0 },
 {  12,  52 }, {  13,  52 }, {  14,  52 }, {   0,   0 }, {   0,   0 },
 {  17,  52 }, {  18,  52 }, {  19,  52 }, {  20,  52 }, {  21,  52 },
 {  22,  52 }, {  23,  52 }, {  24,  52 }, {  25,  52 }, {  26,  52 },

 {  27,  52 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,  52 },
 {  32,  52 }, {  33,  52 }, {  34,  52 }, {  35,  52 }, {  36,  52 },
 {  37,  52 }, {  38,  52 }, {  39,  52 }, {  40,  52 }, {  41,  52 },
 {  42,  52 }, {  43,  52 }, {  44,  52 }, {  45,  52 }, {  46,  52 },
 {  47,1222 }, {  48,  52 }, {  49,  52 }, {  50,  52 }, {   0,  25 },
 {   0,5466 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,   0 }, {   0,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {   0,   0 }, {   0,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },

 {  25,   0 }, {  26,   0 }, {  27,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {   0,  20 }, {   0,5414 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10, -52 }, {   0,   0 }, {  12,1170 },
 {  13,1170 }, {  14, -52 }, {   0,   0 }, {   0,   0 }, {  17, -52 },
 {  18, -52 }, {  19, -52 }, {  20, -52 }, {  21, -52 }, {  22, -52 },

 {  23, -52 }, {  24, -52 }, {  25, -52 }, {  26, -52 }, {  27, -52 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31, -52 }, {  32, -52 },
 {  33, -52 }, {  34, -52 }, {  35, -52 }, {  36, -52 }, {  37, -52 },
 {  38, -52 }, {  39, -52 }, {  40, -52 }, {  41, -52 }, {  42, -52 },
 {  43, -52 }, {  44, -52 }, {  45, -52 }, {  46, -52 }, {  47, -52 },
 {  48, -52 }, {  49, -52 }, {  50, -52 }, {   0,   0 }, {   0,5362 },
 {   1,1170 }, {   2,1170 }, {   3,1170 }, {   4,1170 }, {   5,1170 },
 {   6,1170 }, {   7,1170 }, {   8,1224 }, {   9,1170 }, {  10,1170 },
 {  11,1170 }, {  12,1170 }, {  13,1170 }, {  14,1170 }, {  15,1170 },
 {  16,1170 }, {  17,1170 }, {  18,1170 }, {  19,1170 }, {  20,1170 },

 {  21,1170 }, {  22,1170 }, {  23,1170 }, {  24,1170 }, {  25,1170 },
 {  26,1170 }, {  27,1170 }, {  28,1170 }, {  29,1170 }, {  30,1170 },
 {  31,1170 }, {  32,1170 }, {  33,1170 }, {  34,1170 }, {  35,1170 },
 {  36,1170 }, {  37,1170 }, {  38,1170 }, {  39,1170 }, {  40,1170 },
 {  41,1170 }, {  42,1170 }, {  43,1170 }, {  44,1170 }, {  45,1170 },
 {  46,1170 }, {  47,1170 }, {  48,1170 }, {  49,1170 }, {  50,1170 },
 {  51,1170 }, {  52,1170 }, {   0,   0 }, {   0,5308 }, {   1,1224 },
 {   2,1224 }, {   3, 261 }, {   4,1224 }, {   5,1224 }, {   6,1224 },
 {   7,1224 }, {   8,1224 }, {   9,1224 }, {  10,1224 }, {  11,1224 },
 {  12,1224 }, {  13,1224 }, {  14,1224 }, {  15,1224 }, {  16,1224 },

 {  17,1224 }, {  18,1224 }, {  19,1224 }, {  20,1224 }, {  21,1224 },
 {  22,1224 }, {  23,1224 }, {  24,1224 }, {  25,1224 }, {  26,1224 },
 {  27,1224 }, {  28,1224 }, {  29,1278 }, {  30,1224 }, {  31,1224 },
 {  32,1224 }, {  33,1224 }, {  34,1224 }, {  35,1224 }, {  36,1224 },
 {  37,1224 }, {  38,1224 }, {  39,1224 }, {  40,1224 }, {  41,1224 },
 {  42,1224 }, {  43,1224 }, {  44,1224 }, {  45,1224 }, {  46,1224 },
 {  47,1224 }, {  48,1224 }, {  49,1224 }, {  50,1224 }, {  51,1224 },
 {  52,1224 }, {   0,   0 }, {   0,5254 }, {   0,   0 }, {   0,   0 },
 {   0,  19 }, {   0,5250 }, {   0,   0 }, {   0,   0 }, {   0,  25 },
 {   0,5246 }, {   0,   0 }, {  10,-521 }, {   0,   0 }, {  12,   0 },

 {  13,   0 }, {  10,-525 }, {   0,   0 }, {  12,   0 }, {  13,   0 },
 {  10,-220 }, {   0,   0 }, {  12,-220 }, {  13,-220 }, {  14,-220 },
 {   0,   0 }, {   0,   0 }, {  17,-220 }, {  18,-220 }, {  19,-220 },
 {  20,-220 }, {  21,-220 }, {  22,-220 }, {  23,-220 }, {  24,-220 },
 {  25,-220 }, {  26,-220 }, {  27,-220 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,1270 }, {  32,-220 }, {  33,-220 }, {  34,-220 },
 {  35,-220 }, {  36,-220 }, {  37,-220 }, {  38,-220 }, {  39,-220 },
 {  40,-220 }, {  41,-220 }, {  42,-220 }, {  43,-220 }, {  44,-220 },
 {  45,-220 }, {  46,-220 }, {  47,-220 }, {  48,-220 }, {  49,-220 },
 {  50,-220 }, {   0,   0 }, {   0,5194 }, {   0,   0 }, {   2,   0 },

 {   0,  30 }, {   0,5190 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,  25 }, {   0,5180 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-286 }, {   0,   0 }, {  12,-286 }, {  13,-286 },
 {  14,-286 }, {   0,   0 }, {  30,   4 }, {  17,-286 }, {  18,-286 },
 {  19,-286 }, {  20,-286 }, {  21,-286 }, {  22,-286 }, {  23,-286 },
 {  24,-286 }, {  25,-286 }, {  26,-286 }, {  27,-286 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-286 }, {  32,-286 }, {  33,-286 },
 {  34,-286 }, {  35,-286 }, {  36,-286 }, {  37,-286 }, {  38,-286 },

 {  39,-286 }, {  40,-286 }, {  41,-286 }, {  42,1256 }, {  43,-286 },
 {  44,-286 }, {  45,-286 }, {  46,-286 }, {  47,-286 }, {  48,-286 },
 {  49,-286 }, {  50,-286 }, {   0,  18 }, {   0,5128 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-338 }, {   0,   0 },
 {  12,-338 }, {  13,-338 }, {  14,-338 }, {   0,   0 }, {   0,5112 },
 {  17,-338 }, {  18,-338 }, {  19,-338 }, {  20,-338 }, {  21,-338 },
 {  22,-338 }, {  23,-338 }, {  24,-338 }, {  25,-338 }, {  26,-338 },
 {  27,-338 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-338 },
 {  32,-338 }, {  33,-338 }, {  34,-338 }, {  35,-338 }, {  36,-338 },

 {  37,-338 }, {  38,-338 }, {  39,-338 }, {  40,-338 }, {  41,-338 },
 {  42,-338 }, {  43,-338 }, {  44,-338 }, {  45,-338 }, {  46,-338 },
 {  47,-338 }, {  48,-338 }, {  49,-338 }, {  50,-338 }, {   0,  25 },
 {   0,5076 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  42, 118 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-390 }, {   0,   0 }, {  12,-390 }, {  13,-390 }, {  14,-390 },
 {   0,   0 }, {   0,5060 }, {  17,-390 }, {  18,-390 }, {  19,-390 },
 {  20,-390 }, {  21,-390 }, {  22,-390 }, {  23,-390 }, {  24,-390 },
 {  25,-390 }, {  26,-390 }, {  27,-390 }, {   0,  35 }, {   0,5047 },
 {   0,   0 }, {  31,-390 }, {  32,-390 }, {  33,-390 }, {  34,-390 },

 {  35,-390 }, {  36,-390 }, {  37,-390 }, {  38,-390 }, {  39,-390 },
 {  40,1204 }, {  41,-390 }, {  42,-390 }, {  43,-390 }, {  44,-390 },
 {  45,-390 }, {  46,-390 }, {  47,-390 }, {  48,-390 }, {  49,-390 },
 {  50,-390 }, {   0,  17 }, {   0,5024 }, {   0,   0 }, {   0,  20 },
 {   0,5021 }, {   0,   0 }, {   0,   0 }, {  42,1828 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-442 }, {   0,   0 }, {  12,-442 },
 {  13,-442 }, {  14,-442 }, {  12,1988 }, {  13,1988 }, {  17,-442 },
 {  18,-442 }, {  19,-442 }, {  20,-442 }, {  21,-442 }, {  22,-442 },
 {  23,-442 }, {  24,-442 }, {  25,-442 }, {  26,-442 }, {  27,-442 },
 {   0,   0 }, {   0,   0 }, {   0,4994 }, {  31,-442 }, {  32,-442 },

 {  33,-442 }, {  34,-442 }, {  35,-442 }, {  36,-442 }, {  37,-442 },
 {  38,-442 }, {  39,-442 }, {  40,-442 }, {  41,-442 }, {  42,-442 },
 {  43,-442 }, {  44,-442 }, {  45,-442 }, {  46,-442 }, {  47,-442 },
 {  48,-442 }, {  49,-442 }, {  50,-442 }, {   0,  25 }, {   0,4972 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-494 },
 {  33,1981 }, {  12,-494 }, {  13,-494 }, {  14,-494 }, {   0,   0 },
 {   0,   0 }, {  17,-494 }, {  18,-494 }, {  19,-494 }, {  20,-494 },
 {  21,-494 }, {  22,-494 }, {  23,-494 }, {  24,-494 }, {  25,-494 },
 {  26,-494 }, {  27,-494 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  31,1152 }, {  32,-494 }, {  33,-494 }, {  34,-494 }, {  35,-494 },
 {  36,-494 }, {  37,-494 }, {  38,-494 }, {  39,-494 }, {  40,-494 },
 {  41,-494 }, {  42,-494 }, {  43,-494 }, {  44,-494 }, {  45,-494 },
 {  46,-494 }, {  47,-494 }, {  48,-494 }, {  49,-494 }, {  50,-494 },
 {   0,  25 }, {   0,4920 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-546 }, {   0,   0 }, {  12,-546 }, {  13,-546 },
 {  14,-546 }, {   0,   0 }, {   0,   0 }, {  17,-546 }, {  18,-546 },
 {  19,-546 }, {  20,-546 }, {  21,-546 }, {  22,-546 }, {  23,-546 },
 {  24,-546 }, {  25,-546 }, {  26,-546 }, {  27,-546 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31,-546 }, {  32,-546 }, {  33,-546 },
 {  34,-546 }, {  35,-546 }, {  36,-546 }, {  37,-546 }, {  38,-546 },
 {  39,-546 }, {  40,-546 }, {  41,-546 }, {  42,-546 }, {  43,1152 },
 {  44,-546 }, {  45,-546 }, {  46,-546 }, {  47,-546 }, {  48,-546 },
 {  49,-546 }, {  50,-546 }, {   0,  16 }, {   0,4868 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-598 }, {   0,   0 },
 {  12,-598 }, {  13,-598 }, {  14,-598 }, {   0,   0 }, {   0,   0 },
 {  17,-598 }, {  18,-598 }, {  19,-598 }, {  20,-598 }, {  21,-598 },
 {  22,-598 }, {  23,-598 }, {  24,-598 }, {  25,-598 }, {  26,-598 },

 {  27,-598 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-598 },
 {  32,-598 }, {  33,-598 }, {  34,-598 }, {  35,-598 }, {  36,-598 },
 {  37,-598 }, {  38,-598 }, {  39,-598 }, {  40,-598 }, {  41,-598 },
 {  42,-598 }, {  43,-598 }, {  44,-598 }, {  45,-598 }, {  46,-598 },
 {  47,-598 }, {  48,-598 }, {  49,-598 }, {  50,-598 }, {   0,  21 },
 {   0,4816 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-650 }, {   0,   0 }, {  12,-650 }, {  13,-650 }, {  14,-650 },
 {   0,   0 }, {   0,   0 }, {  17,-650 }, {  18,-650 }, {  19,-650 },
 {  20,-650 }, {  21,-650 }, {  22,-650 }, {  23,-650 }, {  24,-650 },

 {  25,-650 }, {  26,-650 }, {  27,-650 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-650 }, {  32,-650 }, {  33,-650 }, {  34,-650 },
 {  35,-650 }, {  36,-650 }, {  37,-650 }, {  38,-650 }, {  39,-650 },
 {  40,-650 }, {  41,-650 }, {  42,-650 }, {  43,-650 }, {  44,-650 },
 {  45,-650 }, {  46,-650 }, {  47,-650 }, {  48,1100 }, {  49,-650 },
 {  50,-650 }, {   0,  25 }, {   0,4764 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-702 }, {   0,   0 }, {  12,-702 },
 {  13,-702 }, {  14,-702 }, {   0,   0 }, {   0,   0 }, {  17,-702 },
 {  18,-702 }, {  19,-702 }, {  20,-702 }, {  21,-702 }, {  22,-702 },

 {  23,-702 }, {  24,-702 }, {  25,-702 }, {  26,-702 }, {  27,-702 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-702 }, {  32,-702 },
 {  33,-702 }, {  34,-702 }, {  35,-702 }, {  36,-702 }, {  37,-702 },
 {  38,-702 }, {  39,-702 }, {  40,-702 }, {  41,-702 }, {  42,-702 },
 {  43,-702 }, {  44,-702 }, {  45,-702 }, {  46,-702 }, {  47,-702 },
 {  48,1100 }, {  49,-702 }, {  50,-702 }, {   0,  25 }, {   0,4712 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-754 },
 {   0,   0 }, {  12,-754 }, {  13,-754 }, {  14,-754 }, {   0,   0 },
 {   0,   0 }, {  17,-754 }, {  18,-754 }, {  19,-754 }, {  20,-754 },

 {  21,-754 }, {  22,-754 }, {  23,-754 }, {  24,-754 }, {  25,-754 },
 {  26,-754 }, {  27,-754 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-754 }, {  32,-754 }, {  33,-754 }, {  34,-754 }, {  35,-754 },
 {  36,-754 }, {  37,-754 }, {  38,-754 }, {  39,-754 }, {  40,-754 },
 {  41,-754 }, {  42,-754 }, {  43,-754 }, {  44,-754 }, {  45,-754 },
 {  46,-754 }, {  47,1100 }, {  48,1152 }, {  49,-754 }, {  50,-754 },
 {   0,  25 }, {   0,4660 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-806 }, {   0,   0 }, {  12,-806 }, {  13,-806 },
 {  14,-806 }, {   0,   0 }, {   0,   0 }, {  17,-806 }, {  18,-806 },

 {  19,-806 }, {  20,-806 }, {  21,-806 }, {  22,-806 }, {  23,-806 },
 {  24,-806 }, {  25,-806 }, {  26,-806 }, {  27,-806 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-806 }, {  32,-806 }, {  33,-806 },
 {  34,-806 }, {  35,-806 }, {  36,-806 }, {  37,-806 }, {  38,-806 },
 {  39,-806 }, {  40,-806 }, {  41,-806 }, {  42,-806 }, {  43,1152 },
 {  44,-806 }, {  45,-806 }, {  46,-806 }, {  47,-806 }, {  48,-806 },
 {  49,-806 }, {  50,-806 }, {   0,  25 }, {   0,4608 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-858 }, {   0,   0 },
 {  12,-858 }, {  13,-858 }, {  14,-858 }, {   0,   0 }, {   0,   0 },

 {  17,-858 }, {  18,-858 }, {  19,-858 }, {  20,-858 }, {  21,-858 },
 {  22,-858 }, {  23,-858 }, {  24,-858 }, {  25,-858 }, {  26,-858 },
 {  27,-858 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-858 },
 {  32,-858 }, {  33,-858 }, {  34,-858 }, {  35,-858 }, {  36,-858 },
 {  37,-858 }, {  38,-858 }, {  39,-858 }, {  40,-858 }, {  41,1152 },
 {  42,-858 }, {  43,-858 }, {  44,-858 }, {  45,-858 }, {  46,-858 },
 {  47,-858 }, {  48,-858 }, {  49,-858 }, {  50,-858 }, {   0,  25 },
 {   0,4556 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-910 }, {   0,   0 }, {  12,-910 }, {  13,-910 }, {  14,-910 },

 {   0,   0 }, {   0,   0 }, {  17,-910 }, {  18,-910 }, {  19,-910 },
 {  20,-910 }, {  21,-910 }, {  22,-910 }, {  23,-910 }, {  24,-910 },
 {  25,-910 }, {  26,-910 }, {  27,-910 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-910 }, {  32,1152 }, {  33,-910 }, {  34,-910 },
 {  35,-910 }, {  36,-910 }, {  37,-910 }, {  38,-910 }, {  39,-910 },
 {  40,-910 }, {  41,-910 }, {  42,-910 }, {  43,-910 }, {  44,-910 },
 {  45,-910 }, {  46,-910 }, {  47,-910 }, {  48,-910 }, {  49,-910 },
 {  50,-910 }, {   0,  25 }, {   0,4504 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-962 }, {   0,   0 }, {  12,-962 },

 {  13,-962 }, {  14,-962 }, {   0,   0 }, {   0,   0 }, {  17,-962 },
 {  18,-962 }, {  19,-962 }, {  20,-962 }, {  21,-962 }, {  22,-962 },
 {  23,-962 }, {  24,-962 }, {  25,-962 }, {  26,-962 }, {  27,-962 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-962 }, {  32,1152 },
 {  33,-962 }, {  34,-962 }, {  35,-962 }, {  36,-962 }, {  37,-962 },
 {  38,-962 }, {  39,-962 }, {  40,-962 }, {  41,-962 }, {  42,-962 },
 {  43,-962 }, {  44,-962 }, {  45,-962 }, {  46,-962 }, {  47,-962 },
 {  48,-962 }, {  49,-962 }, {  50,-962 }, {   0,  14 }, {   0,4452 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1014 },

 {   0,   0 }, {  12,-1014 }, {  13,-1014 }, {  14,-1014 }, {   0,   0 },
 {   0,   0 }, {  17,-1014 }, {  18,-1014 }, {  19,-1014 }, {  20,-1014 },
 {  21,-1014 }, {  22,-1014 }, {  23,-1014 }, {  24,-1014 }, {  25,-1014 },
 {  26,-1014 }, {  27,-1014 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-1014 }, {  32,-1014 }, {  33,-1014 }, {  34,-1014 }, {  35,-1014 },
 {  36,-1014 }, {  37,-1014 }, {  38,-1014 }, {  39,-1014 }, {  40,-1014 },
 {  41,-1014 }, {  42,-1014 }, {  43,-1014 }, {  44,-1014 }, {  45,-1014 },
 {  46,-1014 }, {  47,-1014 }, {  48,-1014 }, {  49,-1014 }, {  50,-1014 },
 {   0,  15 }, {   0,4400 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  10,-1066 }, {   0,   0 }, {  12,-1066 }, {  13,-1066 },
 {  14,-1066 }, {   0,   0 }, {   0,   0 }, {  17,-1066 }, {  18,-1066 },
 {  19,-1066 }, {  20,-1066 }, {  21,-1066 }, {  22,-1066 }, {  23,-1066 },
 {  24,-1066 }, {  25,-1066 }, {  26,-1066 }, {  27,-1066 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-1066 }, {  32,-1066 }, {  33,1100 },
 {  34,-1066 }, {  35,-1066 }, {  36,-1066 }, {  37,-1066 }, {  38,-1066 },
 {  39,-1066 }, {  40,-1066 }, {  41,-1066 }, {  42,-1066 }, {  43,-1066 },
 {  44,-1066 }, {  45,-1066 }, {  46,-1066 }, {  47,-1066 }, {  48,-1066 },
 {  49,-1066 }, {  50,-1066 }, {   0,  25 }, {   0,4348 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1118 }, {   0,   0 },
 {  12,-1118 }, {  13,-1118 }, {  14,-1118 }, {   0,   0 }, {   0,   0 },
 {  17,-1118 }, {  18,-1118 }, {  19,-1118 }, {  20,-1118 }, {  21,-1118 },
 {  22,-1118 }, {  23,-1118 }, {  24,-1118 }, {  25,-1118 }, {  26,-1118 },
 {  27,-1118 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1118 },
 {  32,-1118 }, {  33,-1118 }, {  34,-1118 }, {  35,-1118 }, {  36,-1118 },
 {  37,-1118 }, {  38,-1118 }, {  39,-1118 }, {  40,-1118 }, {  41,-1118 },
 {  42,-1118 }, {  43,-1118 }, {  44,-1118 }, {  45,-1118 }, {  46,-1118 },
 {  47,-1118 }, {  48,-1118 }, {  49,1100 }, {  50,-1118 }, {   0,  13 },
 {   0,4296 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1170 }, {   0,   0 }, {  12,-1170 }, {  13,-1170 }, {  14,-1170 },
 {   0,   0 }, {   0,   0 }, {  17,-1170 }, {  18,-1170 }, {  19,-1170 },
 {  20,-1170 }, {  21,-1170 }, {  22,-1170 }, {  23,-1170 }, {  24,-1170 },
 {  25,-1170 }, {  26,-1170 }, {  27,-1170 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-1170 }, {  32,-1170 }, {  33,-1170 }, {  34,-1170 },
 {  35,-1170 }, {  36,-1170 }, {  37,-1170 }, {  38,-1170 }, {  39,-1170 },
 {  40,-1170 }, {  41,-1170 }, {  42,-1170 }, {  43,-1170 }, {  44,-1170 },
 {  45,-1170 }, {  46,-1170 }, {  47,-1170 }, {  48,-1170 }, {  49,-1170 },
 {  50,-1170 }, {   0,  20 }, {   0,4244 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1222 }, {   0,   0 }, {  12,   0 },
 {  13,   0 }, {  14,-1222 }, {   0,   0 }, {   0,   0 }, {  17,-1222 },
 {  18,-1222 }, {  19,-1222 }, {  20,-1222 }, {  21,-1222 }, {  22,-1222 },
 {  23,-1222 }, {  24,-1222 }, {  25,-1222 }, {  26,-1222 }, {  27,-1222 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1222 }, {  32,-1222 },
 {  33,-1222 }, {  34,-1222 }, {  35,-1222 }, {  36,-1222 }, {  37,-1222 },
 {  38,-1222 }, {  39,-1222 }, {  40,-1222 }, {  41,-1222 }, {  42,-1222 },
 {  43,-1222 }, {  44,-1222 }, {  45,-1222 }, {  46,-1222 }, {  47,-1222 },
 {  48,-1222 }, {  49,-1222 }, {  50,-1222 }, {   0,   0 }, {   0,4192 },

 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,  54 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },

 {  51,   0 }, {  52,   0 }, {   0,   0 }, {   0,4138 }, {   1, 943 },
 {   2, 943 }, {   3, 943 }, {   4, 943 }, {   5, 943 }, {   6, 943 },
 {   7, 943 }, {   8, 997 }, {   9, 943 }, {  10, 943 }, {  11, 919 },
 {  12, 943 }, {  13, 943 }, {  14, 943 }, {  15, 943 }, {  16, 943 },
 {  17, 943 }, {  18, 943 }, {  19, 943 }, {  20, 943 }, {  21, 943 },
 {  22, 943 }, {  23, 943 }, {  24, 943 }, {  25, 943 }, {  26, 943 },
 {  27, 943 }, {  28, 943 }, {  29, 943 }, {  30, 943 }, {  31, 943 },
 {  32, 943 }, {  33, 943 }, {  34, 943 }, {  35, 943 }, {  36, 943 },
 {  37, 943 }, {  38, 943 }, {  39, 943 }, {  40, 943 }, {  41, 943 },
 {  42, 943 }, {  43, 943 }, {  44, 943 }, {  45, 943 }, {  46, 943 },

 {  47, 943 }, {  48, 943 }, {  49, 943 }, {  50, 943 }, {  51, 943 },
 {  52, 943 }, {   0,   0 }, {   0,4084 }, {   1,   0 }, {   2,   0 },
 {   3,-963 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },
 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,  54 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },

 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {   0,   0 }, {   0,4030 }, {   1, 943 }, {   2, 943 }, {   3, 943 },
 {   4, 943 }, {   5, 943 }, {   6, 943 }, {   7, 943 }, {   8, 943 },
 {   9, 943 }, {  10, 943 }, {  11, 943 }, {  12, 943 }, {  13, 943 },
 {  14, 943 }, {  15, 943 }, {  16, 943 }, {  17, 943 }, {  18, 943 },
 {  19, 943 }, {  20, 943 }, {  21, 943 }, {  22, 943 }, {  23, 943 },
 {  24, 943 }, {  25, 943 }, {  26, 943 }, {  27, 943 }, {  28, 943 },
 {  29,   0 }, {  30, 943 }, {  31, 943 }, {  32, 943 }, {  33, 943 },
 {  34, 943 }, {  35, 943 }, {  36, 943 }, {  37, 943 }, {  38, 943 },

 {  39, 943 }, {  40, 943 }, {  41, 943 }, {  42, 943 }, {  43, 943 },
 {  44, 943 }, {  45, 943 }, {  46, 943 }, {  47, 943 }, {  48, 943 },
 {  49, 943 }, {  50, 943 }, {  51, 943 }, {  52, 943 }, {   0,  25 },
 {   0,3976 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1490 }, {   0,   0 }, {  12,-1490 }, {  13,-1490 }, {  14,-1490 },
 {   0,   0 }, {   0,   0 }, {  17,-1490 }, {  18,-1490 }, {  19,-1490 },
 {  20,-1490 }, {  21,-1490 }, {  22, 947 }, {  23,-1490 }, {  24,-1490 },
 {  25,-1490 }, {  26,-1490 }, {  27,-1490 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-1490 }, {  32,-1490 }, {  33,-1490 }, {  34,-1490 },

 {  35,-1490 }, {  36,-1490 }, {  37,-1490 }, {  38,-1490 }, {  39,-1490 },
 {  40,-1490 }, {  41,-1490 }, {  42,-1490 }, {  43,-1490 }, {  44,-1490 },
 {  45,-1490 }, {  46,-1490 }, {  47,-1490 }, {  48,-1490 }, {  49,-1490 },
 {  50,-1490 }, {   0,  25 }, {   0,3924 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1542 }, {   0,   0 }, {  12,-1542 },
 {  13,-1542 }, {  14,-1542 }, {   0,   0 }, {   0,   0 }, {  17,-1542 },
 {  18,-1542 }, {  19,-1542 }, {  20,-1542 }, {  21,-1542 }, {  22,-1542 },
 {  23,-1542 }, {  24,-1542 }, {  25,-1542 }, {  26,-1542 }, {  27,-1542 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1542 }, {  32,-1542 },

 {  33,-1542 }, {  34,-1542 }, {  35,-1542 }, {  36,-1542 }, {  37,-1542 },
 {  38,-1542 }, {  39,-1542 }, {  40,-1542 }, {  41,-1542 }, {  42,-1542 },
 {  43,-1542 }, {  44,-1542 }, {  45,-1542 }, {  46,-1542 }, {  47,-1542 },
 {  48, 947 }, {  49,-1542 }, {  50,-1542 }, {   0,  25 }, {   0,3872 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1594 },
 {   0,   0 }, {  12,-1594 }, {  13,-1594 }, {  14,-1594 }, {   0,   0 },
 {   0,   0 }, {  17,-1594 }, {  18,-1594 }, {  19,-1594 }, {  20,-1594 },
 {  21,-1594 }, {  22,-1594 }, {  23,-1594 }, {  24,-1594 }, {  25,-1594 },
 {  26,-1594 }, {  27,-1594 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  31,-1594 }, {  32,-1594 }, {  33,-1594 }, {  34,-1594 }, {  35,-1594 },
 {  36,-1594 }, {  37,-1594 }, {  38,-1594 }, {  39,-1594 }, {  40,-1594 },
 {  41,-1594 }, {  42,-1594 }, {  43,-1594 }, {  44,-1594 }, {  45,-1594 },
 {  46,-1594 }, {  47, 947 }, {  48,-1594 }, {  49,-1594 }, {  50,-1594 },
 {   0,  25 }, {   0,3820 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1646 }, {   0,   0 }, {  12,-1646 }, {  13,-1646 },
 {  14,-1646 }, {   0,   0 }, {   0,   0 }, {  17,-1646 }, {  18,-1646 },
 {  19,-1646 }, {  20,-1646 }, {  21, 947 }, {  22,-1646 }, {  23,-1646 },
 {  24,-1646 }, {  25,-1646 }, {  26,-1646 }, {  27,-1646 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31,-1646 }, {  32,-1646 }, {  33,-1646 },
 {  34,-1646 }, {  35,-1646 }, {  36,-1646 }, {  37,-1646 }, {  38,-1646 },
 {  39,-1646 }, {  40,-1646 }, {  41,-1646 }, {  42,-1646 }, {  43,-1646 },
 {  44,-1646 }, {  45,-1646 }, {  46,-1646 }, {  47,-1646 }, {  48,-1646 },
 {  49,-1646 }, {  50,-1646 }, {   0,  25 }, {   0,3768 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1698 }, {   0,   0 },
 {  12,-1698 }, {  13,-1698 }, {  14,-1698 }, {   0,   0 }, {   0,   0 },
 {  17,-1698 }, {  18,-1698 }, {  19,-1698 }, {  20,-1698 }, {  21,-1698 },
 {  22,-1698 }, {  23,-1698 }, {  24,-1698 }, {  25,-1698 }, {  26,-1698 },

 {  27,-1698 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1698 },
 {  32,-1698 }, {  33,-1698 }, {  34,-1698 }, {  35,-1698 }, {  36,-1698 },
 {  37,-1698 }, {  38,-1698 }, {  39,-1698 }, {  40,-1698 }, {  41,-1698 },
 {  42,-1698 }, {  43,-1698 }, {  44,-1698 }, {  45,-1698 }, {  46,-1698 },
 {  47,-1698 }, {  48,-1698 }, {  49, 947 }, {  50,-1698 }, {   0,  25 },
 {   0,3716 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-1750 }, {   0,   0 }, {  12,-1750 }, {  13,-1750 }, {  14,-1750 },
 {   0,   0 }, {   0,   0 }, {  17,-1750 }, {  18,-1750 }, {  19,-1750 },
 {  20,-1750 }, {  21,-1750 }, {  22,-1750 }, {  23,-1750 }, {  24,-1750 },

 {  25,-1750 }, {  26,-1750 }, {  27,-1750 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-1750 }, {  32,-1750 }, {  33,-1750 }, {  34,-1750 },
 {  35, 947 }, {  36,-1750 }, {  37,-1750 }, {  38,-1750 }, {  39,-1750 },
 {  40,-1750 }, {  41,-1750 }, {  42,-1750 }, {  43,-1750 }, {  44,-1750 },
 {  45,-1750 }, {  46,-1750 }, {  47,-1750 }, {  48,-1750 }, {  49,-1750 },
 {  50,-1750 }, {   0,  21 }, {   0,3664 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-1802 }, {   0,   0 }, {  12,-1802 },
 {  13,-1802 }, {  14,-1802 }, {   0,   0 }, {   0,   0 }, {  17,-1802 },
 {  18,-1802 }, {  19,-1802 }, {  20,-1802 }, {  21,-1802 }, {  22,-1802 },

 {  23,-1802 }, {  24,-1802 }, {  25,-1802 }, {  26,-1802 }, {  27,-1802 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1802 }, {  32,-1802 },
 {  33,-1802 }, {  34,-1802 }, {  35,-1802 }, {  36,-1802 }, {  37,-1802 },
 {  38,-1802 }, {  39,-1802 }, {  40,-1802 }, {  41,-1802 }, {  42,-1802 },
 {  43,-1802 }, {  44,-1802 }, {  45,-1802 }, {  46,-1802 }, {  47,-1802 },
 {  48,-1802 }, {  49,-1802 }, {  50,-1802 }, {   0,  25 }, {   0,3612 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1854 },
 {   0,   0 }, {  12,-1854 }, {  13,-1854 }, {  14,-1854 }, {   0,   0 },
 {   0,   0 }, {  17,-1854 }, {  18,-1854 }, {  19,-1854 }, {  20,-1854 },

 {  21,-1854 }, {  22,-1854 }, {  23,-1854 }, {  24,-1854 }, {  25,-1854 },
 {  26,-1854 }, {  27,-1854 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-1854 }, {  32,-1854 }, {  33,-1854 }, {  34,-1854 }, {  35,-1854 },
 {  36,-1854 }, {  37,-1854 }, {  38,-1854 }, {  39,-1854 }, {  40,-1854 },
 {  41,-1854 }, {  42,-1854 }, {  43,-1854 }, {  44,-1854 }, {  45,-1854 },
 {  46,-1854 }, {  47, 895 }, {  48,-1854 }, {  49,-1854 }, {  50,-1854 },
 {   0,  25 }, {   0,3560 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-1906 }, {   0,   0 }, {  12,-1906 }, {  13,-1906 },
 {  14,-1906 }, {   0,   0 }, {   0,   0 }, {  17,-1906 }, {  18,-1906 },

 {  19,-1906 }, {  20,-1906 }, {  21,-1906 }, {  22,-1906 }, {  23,-1906 },
 {  24,-1906 }, {  25,-1906 }, {  26,-1906 }, {  27,-1906 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-1906 }, {  32,-1906 }, {  33, 895 },
 {  34,-1906 }, {  35,-1906 }, {  36,-1906 }, {  37,-1906 }, {  38,-1906 },
 {  39,-1906 }, {  40,-1906 }, {  41,-1906 }, {  42,-1906 }, {  43,-1906 },
 {  44,-1906 }, {  45,-1906 }, {  46,-1906 }, {  47,-1906 }, {  48,-1906 },
 {  49,-1906 }, {  50,-1906 }, {   0,  25 }, {   0,3508 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-1958 }, {   0,   0 },
 {  12,-1958 }, {  13,-1958 }, {  14,-1958 }, {   0,   0 }, {   0,   0 },

 {  17,-1958 }, {  18,-1958 }, {  19,-1958 }, {  20,-1958 }, {  21,-1958 },
 {  22,-1958 }, {  23,-1958 }, {  24,-1958 }, {  25,-1958 }, {  26,-1958 },
 {  27,-1958 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-1958 },
 {  32,-1958 }, {  33,-1958 }, {  34,-1958 }, {  35,-1958 }, {  36,-1958 },
 {  37, 895 }, {  38,-1958 }, {  39,-1958 }, {  40,-1958 }, {  41,-1958 },
 {  42,-1958 }, {  43,-1958 }, {  44,-1958 }, {  45,-1958 }, {  46,-1958 },
 {  47,-1958 }, {  48,-1958 }, {  49,-1958 }, {  50,-1958 }, {   0,  25 },
 {   0,3456 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2010 }, {   0,   0 }, {  12,-2010 }, {  13,-2010 }, {  14,-2010 },

 {   0,   0 }, {   0,   0 }, {  17,-2010 }, {  18,-2010 }, {  19,-2010 },
 {  20,-2010 }, {  21,-2010 }, {  22,-2010 }, {  23,-2010 }, {  24,-2010 },
 {  25,-2010 }, {  26,-2010 }, {  27,-2010 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-2010 }, {  32,-2010 }, {  33,-2010 }, {  34,-2010 },
 {  35,-2010 }, {  36,-2010 }, {  37,-2010 }, {  38,-2010 }, {  39,-2010 },
 {  40,-2010 }, {  41,-2010 }, {  42,-2010 }, {  43,-2010 }, {  44, 895 },
 {  45,-2010 }, {  46,-2010 }, {  47,-2010 }, {  48,-2010 }, {  49,-2010 },
 {  50,-2010 }, {   0,  25 }, {   0,3404 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2062 }, {   0,   0 }, {  12,-2062 },

 {  13,-2062 }, {  14,-2062 }, {   0,   0 }, {   0,   0 }, {  17,-2062 },
 {  18,-2062 }, {  19,-2062 }, {  20,-2062 }, {  21,-2062 }, {  22,-2062 },
 {  23,-2062 }, {  24,-2062 }, {  25,-2062 }, {  26,-2062 }, {  27,-2062 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2062 }, {  32,-2062 },
 {  33,-2062 }, {  34, 895 }, {  35,-2062 }, {  36,-2062 }, {  37,-2062 },
 {  38,-2062 }, {  39,-2062 }, {  40,-2062 }, {  41,-2062 }, {  42,-2062 },
 {  43,-2062 }, {  44,-2062 }, {  45,-2062 }, {  46,-2062 }, {  47,-2062 },
 {  48,-2062 }, {  49,-2062 }, {  50,-2062 }, {   0,  25 }, {   0,3352 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2114 },

 {   0,   0 }, {  12,-2114 }, {  13,-2114 }, {  14,-2114 }, {   0,   0 },
 {   0,   0 }, {  17,-2114 }, {  18,-2114 }, {  19,-2114 }, {  20,-2114 },
 {  21,-2114 }, {  22,-2114 }, {  23,-2114 }, {  24,-2114 }, {  25,-2114 },
 {  26,-2114 }, {  27,-2114 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-2114 }, {  32,-2114 }, {  33,-2114 }, {  34,-2114 }, {  35,-2114 },
 {  36,-2114 }, {  37, 895 }, {  38,-2114 }, {  39,-2114 }, {  40,-2114 },
 {  41,-2114 }, {  42,-2114 }, {  43,-2114 }, {  44,-2114 }, {  45,-2114 },
 {  46,-2114 }, {  47,-2114 }, {  48,-2114 }, {  49,-2114 }, {  50,-2114 },
 {   0,  25 }, {   0,3300 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  10,-2166 }, {   0,   0 }, {  12,-2166 }, {  13,-2166 },
 {  14,-2166 }, {   0,   0 }, {   0,   0 }, {  17,-2166 }, {  18,-2166 },
 {  19,-2166 }, {  20,-2166 }, {  21,-2166 }, {  22,-2166 }, {  23,-2166 },
 {  24,-2166 }, {  25,-2166 }, {  26,-2166 }, {  27,-2166 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-2166 }, {  32,-2166 }, {  33,-2166 },
 {  34,-2166 }, {  35,-2166 }, {  36,-2166 }, {  37,-2166 }, {  38, 895 },
 {  39,-2166 }, {  40,-2166 }, {  41,-2166 }, {  42,-2166 }, {  43,-2166 },
 {  44,-2166 }, {  45,-2166 }, {  46,-2166 }, {  47,-2166 }, {  48,-2166 },
 {  49,-2166 }, {  50,-2166 }, {   0,  25 }, {   0,3248 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2218 }, {   0,   0 },
 {  12,-2218 }, {  13,-2218 }, {  14,-2218 }, {   0,   0 }, {   0,3232 },
 {  17,-2218 }, {  18,-2218 }, {  19,-2218 }, {  20,-2218 }, {  21,-2218 },
 {  22,-2218 }, {  23,-2218 }, {  24,-2218 }, {  25,-2218 }, {  26,-2218 },
 {  27,-2218 }, {   0,  36 }, {   0,3219 }, {   0,   0 }, {  31,-2218 },
 {  32,-2218 }, {  33,-2218 }, {  34,-2218 }, {  35, 895 }, {  36,-2218 },
 {  37,-2218 }, {  38,-2218 }, {  39,-2218 }, {  40,-2218 }, {  41,-2218 },
 {  42,-2218 }, {  43,-2218 }, {  44,-2218 }, {  45,-2218 }, {  46,-2218 },
 {  47,-2218 }, {  48,-2218 }, {  49,-2218 }, {  50,-2218 }, {  35, 232 },
 {   0,   0 }, {   0,3195 }, {   1, 894 }, {   2, 894 }, {   3, 894 },

 {   4, 894 }, {   5, 894 }, {   6, 894 }, {   7, 894 }, {   8,  54 },
 {   9, 894 }, {  10, 894 }, {  11, 948 }, {  12, 894 }, {  13, 894 },
 {  14, 894 }, {  15, 894 }, {  16, 894 }, {  17, 894 }, {  18, 894 },
 {  19, 894 }, {  20, 894 }, {  21, 894 }, {  22, 894 }, {  23, 894 },
 {  24, 894 }, {  25, 894 }, {  26, 894 }, {  27, 894 }, {  28, 894 },
 {  29, 894 }, {  30, 894 }, {  31, 894 }, {  32, 894 }, {  33, 894 },
 {  34, 894 }, {  35, 894 }, {  36, 894 }, {  37, 894 }, {  38, 894 },
 {  39, 894 }, {  40, 894 }, {  41, 894 }, {  42, 894 }, {  43, 894 },
 {  44, 894 }, {  45, 894 }, {  46, 894 }, {  47, 894 }, {  48, 894 },
 {  49, 894 }, {  50, 894 }, {  51, 894 }, {  52, 894 }, {   0,   0 },

 {   0,3141 }, {   1, -54 }, {   2, -54 }, {   3, -54 }, {   4, -54 },
 {   5, -54 }, {   6, -54 }, {   7, -54 }, {   8,   0 }, {   9, -54 },
 {  10, -54 }, {  11, -78 }, {  12, -54 }, {  13, -54 }, {  14, -54 },
 {  15, -54 }, {  16, -54 }, {  17, -54 }, {  18, -54 }, {  19, -54 },
 {  20, -54 }, {  21, -54 }, {  22, -54 }, {  23, -54 }, {  24, -54 },
 {  25, -54 }, {  26, -54 }, {  27, -54 }, {  28, -54 }, {  29, -54 },
 {  30, -54 }, {  31, -54 }, {  32, -54 }, {  33, -54 }, {  34, -54 },
 {  35, -54 }, {  36, -54 }, {  37, -54 }, {  38, -54 }, {  39, -54 },
 {  40, -54 }, {  41, -54 }, {  42, -54 }, {  43, -54 }, {  44, -54 },
 {  45, -54 }, {  46, -54 }, {  47, -54 }, {  48, -54 }, {  49, -54 },

 {  50, -54 }, {  51, -54 }, {  52, -54 }, {   0,   0 }, {   0,3087 },
 {   1, 894 }, {   2, 894 }, {   3,-1960 }, {   4, 894 }, {   5, 894 },
 {   6, 894 }, {   7, 894 }, {   8, 894 }, {   9, 894 }, {  10, 894 },
 {  11, 894 }, {  12, 894 }, {  13, 894 }, {  14, 894 }, {  15, 894 },
 {  16, 894 }, {  17, 894 }, {  18, 894 }, {  19, 894 }, {  20, 894 },
 {  21, 894 }, {  22, 894 }, {  23, 894 }, {  24, 894 }, {  25, 894 },
 {  26, 894 }, {  27, 894 }, {  28, 894 }, {  29,-943 }, {  30, 894 },
 {  31, 894 }, {  32, 894 }, {  33, 894 }, {  34, 894 }, {  35, 894 },
 {  36, 894 }, {  37, 894 }, {  38, 894 }, {  39, 894 }, {  40, 894 },
 {  41, 894 }, {  42, 894 }, {  43, 894 }, {  44, 894 }, {  45, 894 },

 {  46, 894 }, {  47, 894 }, {  48, 894 }, {  49, 894 }, {  50, 894 },
 {  51, 894 }, {  52, 894 }, {   0,  20 }, {   0,3033 }, {   0,   0 },
 {   0,   0 }, {   0,  25 }, {   0,3029 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  12,   0 }, {  13,   0 }, {  10,-2437 }, {   0,   0 }, {  12,-2437 },
 {  13,-2437 }, {  14,-2437 }, {   0,   0 }, {   0,3013 }, {  17, 890 },
 {  18,-2437 }, {  19,-2437 }, {  20,-2437 }, {  21,-2437 }, {  22,-2437 },
 {  23,-2437 }, {  24,-2437 }, {  25,-2437 }, {  26,-2437 }, {  27,-2437 },
 {   0,  10 }, {   0,3000 }, {   0,   0 }, {  31,-2437 }, {  32,-2437 },
 {  33,-2437 }, {  34,-2437 }, {  35,-2437 }, {  36,-2437 }, {  37,-2437 },

 {  38,-2437 }, {  39,-2437 }, {  40,-2437 }, {  41,-2437 }, {  42,-2437 },
 {  43,-2437 }, {  44,-2437 }, {  45,-2437 }, {  46,-2437 }, {  47,-2437 },
 {  48,-2437 }, {  49,-2437 }, {  50,-2437 }, {   0,  25 }, {   0,2977 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  40,  42 }, {   0,   0 },
 {   0,2971 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2489 },
 {   0,   0 }, {  12,-2489 }, {  13,-2489 }, {  14,-2489 }, {   0,   0 },
 {   0,   0 }, {  17,-2489 }, {  18,-2489 }, {  19,-2489 }, {  20,-2489 },
 {  21,-2489 }, {  22,-2489 }, {  23,-2489 }, {  24,-2489 }, {  25,-2489 },
 {  26,-2489 }, {  27,-2489 }, {   0,   0 }, {   0,2948 }, {   0,   0 },
 {  31,-2489 }, {  32,-2489 }, {  33,-2489 }, {  34,-2489 }, {  35,-2489 },

 {  36,-2489 }, {  37,-2489 }, {  38,-2489 }, {  39,-2489 }, {  40,-2489 },
 {  41,-2489 }, {  42,-2489 }, {  43,-2489 }, {  44,-2489 }, {  45,-2489 },
 {  46, 890 }, {  47,-2489 }, {  48,-2489 }, {  49,-2489 }, {  50,-2489 },
 {   0,  25 }, {   0,2925 }, {   0,   0 }, {   0,   0 }, {  49,  23 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-2541 }, {  34,2229 }, {  12,-2541 }, {  13,-2541 },
 {  14,-2541 }, {   0,   0 }, {   0,   0 }, {  17,-2541 }, {  18,-2541 },
 {  19,-2541 }, {  20,-2541 }, {  21,-2541 }, {  22,-2541 }, {  23,-2541 },
 {  24,-2541 }, {  25,-2541 }, {  26,-2541 }, {  27,-2541 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-2541 }, {  32,-2541 }, {  33,-2541 },

 {  34,-2541 }, {  35, 890 }, {  36,-2541 }, {  37,-2541 }, {  38,-2541 },
 {  39,-2541 }, {  40,-2541 }, {  41,-2541 }, {  42,-2541 }, {  43,-2541 },
 {  44,-2541 }, {  45,-2541 }, {  46,-2541 }, {  47,-2541 }, {  48,-2541 },
 {  49,-2541 }, {  50,-2541 }, {   0,  25 }, {   0,2873 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2593 }, {   0,   0 },
 {  12,-2593 }, {  13,-2593 }, {  14,-2593 }, {   0,   0 }, {   0,   0 },
 {  17,-2593 }, {  18,-2593 }, {  19,-2593 }, {  20,-2593 }, {  21,-2593 },
 {  22,-2593 }, {  23,-2593 }, {  24,-2593 }, {  25,-2593 }, {  26,-2593 },
 {  27,-2593 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2593 },

 {  32,-2593 }, {  33,-2593 }, {  34,-2593 }, {  35,-2593 }, {  36,-2593 },
 {  37,-2593 }, {  38,-2593 }, {  39,-2593 }, {  40,-2593 }, {  41,-2593 },
 {  42,-2593 }, {  43,-2593 }, {  44,-2593 }, {  45,-2593 }, {  46, 890 },
 {  47,-2593 }, {  48,-2593 }, {  49,-2593 }, {  50,-2593 }, {   0,  25 },
 {   0,2821 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2645 }, {   0,   0 }, {  12,-2645 }, {  13,-2645 }, {  14,-2645 },
 {   0,   0 }, {   0,   0 }, {  17,-2645 }, {  18,-2645 }, {  19,-2645 },
 {  20,-2645 }, {  21,-2645 }, {  22,-2645 }, {  23,-2645 }, {  24,-2645 },
 {  25,-2645 }, {  26,-2645 }, {  27,-2645 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  31,-2645 }, {  32,-2645 }, {  33,-2645 }, {  34,-2645 },
 {  35,-2645 }, {  36,-2645 }, {  37,-2645 }, {  38,-2645 }, {  39,-2645 },
 {  40,-2645 }, {  41,-2645 }, {  42,-2645 }, {  43,-2645 }, {  44, 890 },
 {  45,-2645 }, {  46,-2645 }, {  47,-2645 }, {  48,-2645 }, {  49,-2645 },
 {  50,-2645 }, {   0,  25 }, {   0,2769 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2697 }, {   0,   0 }, {  12,-2697 },
 {  13,-2697 }, {  14,-2697 }, {   0,   0 }, {   0,   0 }, {  17,-2697 },
 {  18,-2697 }, {  19,-2697 }, {  20,-2697 }, {  21,-2697 }, {  22,-2697 },
 {  23,-2697 }, {  24,-2697 }, {  25,-2697 }, {  26,-2697 }, {  27,-2697 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2697 }, {  32,-2697 },
 {  33,-2697 }, {  34,-2697 }, {  35,-2697 }, {  36,-2697 }, {  37,-2697 },
 {  38,-2697 }, {  39,-2697 }, {  40,-2697 }, {  41,-2697 }, {  42,-2697 },
 {  43,-2697 }, {  44,-2697 }, {  45,-2697 }, {  46, 890 }, {  47,-2697 },
 {  48,-2697 }, {  49,-2697 }, {  50,-2697 }, {   0,   5 }, {   0,2717 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2749 },
 {   0,   0 }, {  12,-2749 }, {  13,-2749 }, {  14,-2749 }, {   0,   0 },
 {   0,   0 }, {  17,-2749 }, {  18,-2749 }, {  19,-2749 }, {  20,-2749 },
 {  21,-2749 }, {  22,-2749 }, {  23,-2749 }, {  24,-2749 }, {  25,-2749 },

 {  26,-2749 }, {  27,-2749 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-2749 }, {  32,-2749 }, {  33,-2749 }, {  34,-2749 }, {  35,-2749 },
 {  36,-2749 }, {  37,-2749 }, {  38,-2749 }, {  39,-2749 }, {  40,-2749 },
 {  41,-2749 }, {  42,-2749 }, {  43,-2749 }, {  44,-2749 }, {  45,-2749 },
 {  46,-2749 }, {  47,-2749 }, {  48,-2749 }, {  49,-2749 }, {  50,-2749 },
 {   0,  25 }, {   0,2665 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-2801 }, {   0,   0 }, {  12,-2801 }, {  13,-2801 },
 {  14,-2801 }, {   0,   0 }, {   0,   0 }, {  17,-2801 }, {  18,-2801 },
 {  19,-2801 }, {  20,-2801 }, {  21,-2801 }, {  22,-2801 }, {  23,-2801 },

 {  24,-2801 }, {  25,-2801 }, {  26,-2801 }, {  27,-2801 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-2801 }, {  32,-2801 }, {  33,-2801 },
 {  34,-2801 }, {  35,-2801 }, {  36,-2801 }, {  37,-2801 }, {  38, 838 },
 {  39,-2801 }, {  40,-2801 }, {  41,-2801 }, {  42,-2801 }, {  43,-2801 },
 {  44,-2801 }, {  45,-2801 }, {  46,-2801 }, {  47,-2801 }, {  48,-2801 },
 {  49,-2801 }, {  50,-2801 }, {   0,  25 }, {   0,2613 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-2853 }, {   0,   0 },
 {  12,-2853 }, {  13,-2853 }, {  14,-2853 }, {   0,   0 }, {   0,   0 },
 {  17,-2853 }, {  18,-2853 }, {  19,-2853 }, {  20,-2853 }, {  21,-2853 },

 {  22,-2853 }, {  23,-2853 }, {  24,-2853 }, {  25,-2853 }, {  26,-2853 },
 {  27,-2853 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2853 },
 {  32,-2853 }, {  33,-2853 }, {  34,-2853 }, {  35,-2853 }, {  36,-2853 },
 {  37,-2853 }, {  38,-2853 }, {  39,-2853 }, {  40,-2853 }, {  41,-2853 },
 {  42,-2853 }, {  43,-2853 }, {  44,-2853 }, {  45,-2853 }, {  46, 838 },
 {  47,-2853 }, {  48,-2853 }, {  49,-2853 }, {  50,-2853 }, {   0,  25 },
 {   0,2561 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-2905 }, {   0,   0 }, {  12,-2905 }, {  13,-2905 }, {  14,-2905 },
 {   0,   0 }, {   0,   0 }, {  17,-2905 }, {  18,-2905 }, {  19,-2905 },

 {  20,-2905 }, {  21,-2905 }, {  22,-2905 }, {  23,-2905 }, {  24,-2905 },
 {  25,-2905 }, {  26,-2905 }, {  27,-2905 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-2905 }, {  32,-2905 }, {  33,-2905 }, {  34,-2905 },
 {  35,-2905 }, {  36,-2905 }, {  37,-2905 }, {  38,-2905 }, {  39,-2905 },
 {  40, 838 }, {  41,-2905 }, {  42,-2905 }, {  43,-2905 }, {  44,-2905 },
 {  45,-2905 }, {  46,-2905 }, {  47,-2905 }, {  48,-2905 }, {  49,-2905 },
 {  50,-2905 }, {   0,  25 }, {   0,2509 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-2957 }, {   0,   0 }, {  12,-2957 },
 {  13,-2957 }, {  14,-2957 }, {   0,   0 }, {   0,   0 }, {  17,-2957 },

 {  18,-2957 }, {  19,-2957 }, {  20,-2957 }, {  21,-2957 }, {  22,-2957 },
 {  23,-2957 }, {  24,-2957 }, {  25,-2957 }, {  26,-2957 }, {  27,-2957 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-2957 }, {  32,-2957 },
 {  33,-2957 }, {  34,-2957 }, {  35, 838 }, {  36,-2957 }, {  37,-2957 },
 {  38,-2957 }, {  39,-2957 }, {  40,-2957 }, {  41,-2957 }, {  42,-2957 },
 {  43,-2957 }, {  44,-2957 }, {  45,-2957 }, {  46,-2957 }, {  47,-2957 },
 {  48,-2957 }, {  49,-2957 }, {  50,-2957 }, {   0,  25 }, {   0,2457 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3009 },
 {   0,   0 }, {  12,-3009 }, {  13,-3009 }, {  14,-3009 }, {   0,   0 },

 {   0,   0 }, {  17,-3009 }, {  18,-3009 }, {  19,-3009 }, {  20,-3009 },
 {  21,-3009 }, {  22,-3009 }, {  23,-3009 }, {  24,-3009 }, {  25,-3009 },
 {  26,-3009 }, {  27,-3009 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-3009 }, {  32,-3009 }, {  33,-3009 }, {  34,-3009 }, {  35, 838 },
 {  36,-3009 }, {  37,-3009 }, {  38,-3009 }, {  39,-3009 }, {  40,-3009 },
 {  41,-3009 }, {  42,-3009 }, {  43,-3009 }, {  44,-3009 }, {  45,-3009 },
 {  46,-3009 }, {  47,-3009 }, {  48,-3009 }, {  49,-3009 }, {  50,-3009 },
 {   0,  25 }, {   0,2405 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3061 }, {   0,   0 }, {  12,-3061 }, {  13,-3061 },

 {  14,-3061 }, {   0,   0 }, {   0,   0 }, {  17,-3061 }, {  18,-3061 },
 {  19,-3061 }, {  20,-3061 }, {  21,-3061 }, {  22,-3061 }, {  23,-3061 },
 {  24,-3061 }, {  25,-3061 }, {  26,-3061 }, {  27,-3061 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-3061 }, {  32,-3061 }, {  33,-3061 },
 {  34,-3061 }, {  35,-3061 }, {  36,-3061 }, {  37,-3061 }, {  38,-3061 },
 {  39,-3061 }, {  40,-3061 }, {  41,-3061 }, {  42, 838 }, {  43,-3061 },
 {  44,-3061 }, {  45,-3061 }, {  46,-3061 }, {  47,-3061 }, {  48,-3061 },
 {  49,-3061 }, {  50,-3061 }, {   0,  23 }, {   0,2353 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3113 }, {   0,   0 },

 {  12,-3113 }, {  13,-3113 }, {  14,-3113 }, {   0,   0 }, {   0,   0 },
 {  17,-3113 }, {  18,-3113 }, {  19,-3113 }, {  20,-3113 }, {  21,-3113 },
 {  22,-3113 }, {  23,-3113 }, {  24,-3113 }, {  25,-3113 }, {  26,-3113 },
 {  27,-3113 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3113 },
 {  32,-3113 }, {  33,-3113 }, {  34,-3113 }, {  35,-3113 }, {  36,-3113 },
 {  37,-3113 }, {  38,-3113 }, {  39,-3113 }, {  40,-3113 }, {  41,-3113 },
 {  42,-3113 }, {  43,-3113 }, {  44,-3113 }, {  45,-3113 }, {  46,-3113 },
 {  47,-3113 }, {  48,-3113 }, {  49,-3113 }, {  50,-3113 }, {   0,   0 },
 {   0,2301 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,-840 }, {   9,   0 },

 {  10,   0 }, {  11,  54 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {   0,   0 }, {   0,2247 },
 {   1, -54 }, {   2, -54 }, {   3, -54 }, {   4, -54 }, {   5, -54 },

 {   6, -54 }, {   7, -54 }, {   8,-894 }, {   9, -54 }, {  10, -54 },
 {  11,   0 }, {  12, -54 }, {  13, -54 }, {  14, -54 }, {  15, -54 },
 {  16, -54 }, {  17, -54 }, {  18, -54 }, {  19, -54 }, {  20, -54 },
 {  21, -54 }, {  22, -54 }, {  23, -54 }, {  24, -54 }, {  25, -54 },
 {  26, -54 }, {  27, -54 }, {  28, -54 }, {  29, -54 }, {  30, -54 },
 {  31, -54 }, {  32, -54 }, {  33, -54 }, {  34, -54 }, {  35, -54 },
 {  36, -54 }, {  37, -54 }, {  38, -54 }, {  39, -54 }, {  40, -54 },
 {  41, -54 }, {  42, -54 }, {  43, -54 }, {  44, -54 }, {  45, -54 },
 {  46, -54 }, {  47, -54 }, {  48, -54 }, {  49, -54 }, {  50, -54 },
 {  51, -54 }, {  52, -54 }, {   0,   0 }, {   0,2193 }, {   1,   0 },

 {   2,   0 }, {   3,-2854 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,-1837 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },

 {  52,   0 }, {   0,  25 }, {   0,2139 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3327 }, {   0,   0 }, {  12,-3327 },
 {  13,-3327 }, {  14,-3327 }, {   0,   0 }, {   0,   0 }, {  17,-3327 },
 {  18,-3327 }, {  19,-3327 }, {  20,-3327 }, {  21,-3327 }, {  22,-3327 },
 {  23,-3327 }, {  24,-3327 }, {  25,-3327 }, {  26,-3327 }, {  27, 624 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3327 }, {  32,-3327 },
 {  33,-3327 }, {  34,-3327 }, {  35,-3327 }, {  36,-3327 }, {  37,-3327 },
 {  38,-3327 }, {  39,-3327 }, {  40,-3327 }, {  41,-3327 }, {  42,-3327 },
 {  43,-3327 }, {  44,-3327 }, {  45,-3327 }, {  46,-3327 }, {  47,-3327 },

 {  48,-3327 }, {  49,-3327 }, {  50,-3327 }, {   0,  25 }, {   0,2087 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3379 },
 {   0,   0 }, {  12,-3379 }, {  13,-3379 }, {  14,-3379 }, {   0,   0 },
 {   0,   0 }, {  17,-3379 }, {  18,-3379 }, {  19,-3379 }, {  20,-3379 },
 {  21,-3379 }, {  22,-3379 }, {  23,-3379 }, {  24,-3379 }, {  25,-3379 },
 {  26,-3379 }, {  27,-3379 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-3379 }, {  32,-3379 }, {  33,-3379 }, {  34,-3379 }, {  35,-3379 },
 {  36,-3379 }, {  37,-3379 }, {  38,-3379 }, {  39,-3379 }, {  40,-3379 },
 {  41,-3379 }, {  42,-3379 }, {  43, 624 }, {  44,-3379 }, {  45,-3379 },

 {  46,-3379 }, {  47,-3379 }, {  48,-3379 }, {  49,-3379 }, {  50,-3379 },
 {   0,  24 }, {   0,2035 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3431 }, {   0,   0 }, {  12,-3431 }, {  13,-3431 },
 {  14,-3431 }, {   0,   0 }, {   0,   0 }, {  17,-3431 }, {  18,-3431 },
 {  19,-3431 }, {  20,-3431 }, {  21,-3431 }, {  22,-3431 }, {  23,-3431 },
 {  24,-3431 }, {  25,-3431 }, {  26,-3431 }, {  27,-3431 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-3431 }, {  32,-3431 }, {  33,-3431 },
 {  34,-3431 }, {  35,-3431 }, {  36,-3431 }, {  37,-3431 }, {  38,-3431 },
 {  39,-3431 }, {  40,-3431 }, {  41,-3431 }, {  42,-3431 }, {  43,-3431 },

 {  44,-3431 }, {  45,-3431 }, {  46,-3431 }, {  47,-3431 }, {  48,-3431 },
 {  49,-3431 }, {  50,-3431 }, {   0,  25 }, {   0,1983 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3483 }, {   0,   0 },
 {  12,-3483 }, {  13,-3483 }, {  14,-3483 }, {   0,   0 }, {   0,   0 },
 {  17,-3483 }, {  18,-3483 }, {  19,-3483 }, {  20,-3483 }, {  21,-3483 },
 {  22,-3483 }, {  23,-3483 }, {  24,-3483 }, {  25,-3483 }, {  26,-3483 },
 {  27,-3483 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3483 },
 {  32, 572 }, {  33,-3483 }, {  34,-3483 }, {  35,-3483 }, {  36,-3483 },
 {  37,-3483 }, {  38,-3483 }, {  39,-3483 }, {  40,-3483 }, {  41,-3483 },

 {  42,-3483 }, {  43,-3483 }, {  44,-3483 }, {  45,-3483 }, {  46,-3483 },
 {  47,-3483 }, {  48,-3483 }, {  49,-3483 }, {  50,-3483 }, {   0,   6 },
 {   0,1931 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3535 }, {   0,   0 }, {  12,-3535 }, {  13,-3535 }, {  14,-3535 },
 {   0,   0 }, {   0,   0 }, {  17,-3535 }, {  18,-3535 }, {  19,-3535 },
 {  20,-3535 }, {  21,-3535 }, {  22,-3535 }, {  23,-3535 }, {  24,-3535 },
 {  25,-3535 }, {  26,-3535 }, {  27,-3535 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-3535 }, {  32,-3535 }, {  33,-3535 }, {  34,-3535 },
 {  35,-3535 }, {  36,-3535 }, {  37,-3535 }, {  38,-3535 }, {  39,-3535 },

 {  40,-3535 }, {  41,-3535 }, {  42,-3535 }, {  43,-3535 }, {  44,-3535 },
 {  45,-3535 }, {  46,-3535 }, {  47,-3535 }, {  48,-3535 }, {  49,-3535 },
 {  50,-3535 }, {   0,  25 }, {   0,1879 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3587 }, {   0,   0 }, {  12,-3587 },
 {  13,-3587 }, {  14,-3587 }, {   0,   0 }, {   0,   0 }, {  17,-3587 },
 {  18,-3587 }, {  19,-3587 }, {  20,-3587 }, {  21,-3587 }, {  22,-3587 },
 {  23,-3587 }, {  24,-3587 }, {  25,-3587 }, {  26,-3587 }, {  27,-3587 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3587 }, {  32,-3587 },
 {  33,-3587 }, {  34,-3587 }, {  35,-3587 }, {  36, 520 }, {  37,-3587 },

 {  38,-3587 }, {  39,-3587 }, {  40,-3587 }, {  41,-3587 }, {  42,-3587 },
 {  43,-3587 }, {  44,-3587 }, {  45,-3587 }, {  46,-3587 }, {  47,-3587 },
 {  48,-3587 }, {  49,-3587 }, {  50,-3587 }, {   0,  12 }, {   0,1827 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3639 },
 {   0,   0 }, {  12,-3639 }, {  13,-3639 }, {  14,-3639 }, {   0,   0 },
 {   0,   0 }, {  17,-3639 }, {  18,-3639 }, {  19,-3639 }, {  20,-3639 },
 {  21,-3639 }, {  22,-3639 }, {  23,-3639 }, {  24,-3639 }, {  25,-3639 },
 {  26,-3639 }, {  27,-3639 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-3639 }, {  32,-3639 }, {  33,-3639 }, {  34,-3639 }, {  35,-3639 },

 {  36,-3639 }, {  37,-3639 }, {  38,-3639 }, {  39,-3639 }, {  40,-3639 },
 {  41,-3639 }, {  42,-3639 }, {  43,-3639 }, {  44,-3639 }, {  45,-3639 },
 {  46,-3639 }, {  47,-3639 }, {  48,-3639 }, {  49,-3639 }, {  50,-3639 },
 {   0,  25 }, {   0,1775 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3691 }, {   0,   0 }, {  12,-3691 }, {  13,-3691 },
 {  14,-3691 }, {   0,   0 }, {   0,   0 }, {  17,-3691 }, {  18,-3691 },
 {  19,-3691 }, {  20,-3691 }, {  21,-3691 }, {  22,-3691 }, {  23,-3691 },
 {  24,-3691 }, {  25,-3691 }, {  26,-3691 }, {  27,-3691 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-3691 }, {  32, 468 }, {  33,-3691 },

 {  34,-3691 }, {  35,-3691 }, {  36,-3691 }, {  37,-3691 }, {  38,-3691 },
 {  39,-3691 }, {  40,-3691 }, {  41,-3691 }, {  42,-3691 }, {  43,-3691 },
 {  44,-3691 }, {  45,-3691 }, {  46,-3691 }, {  47,-3691 }, {  48,-3691 },
 {  49,-3691 }, {  50,-3691 }, {   0,  25 }, {   0,1723 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3743 }, {   0,   0 },
 {  12,-3743 }, {  13,-3743 }, {  14,-3743 }, {   0,   0 }, {   0,   0 },
 {  17,-3743 }, {  18,-3743 }, {  19,-3743 }, {  20,-3743 }, {  21,-3743 },
 {  22,-3743 }, {  23,-3743 }, {  24,-3743 }, {  25,-3743 }, {  26,-3743 },
 {  27,-3743 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3743 },

 {  32,-3743 }, {  33,-3743 }, {  34,-3743 }, {  35, 468 }, {  36,-3743 },
 {  37,-3743 }, {  38,-3743 }, {  39,-3743 }, {  40,-3743 }, {  41,-3743 },
 {  42,-3743 }, {  43,-3743 }, {  44,-3743 }, {  45,-3743 }, {  46,-3743 },
 {  47,-3743 }, {  48,-3743 }, {  49,-3743 }, {  50,-3743 }, {   0,  25 },
 {   0,1671 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-3795 }, {   0,   0 }, {  12,-3795 }, {  13,-3795 }, {  14,-3795 },
 {   0,   0 }, {   0,   0 }, {  17,-3795 }, {  18,-3795 }, {  19,-3795 },
 {  20,-3795 }, {  21,-3795 }, {  22,-3795 }, {  23,-3795 }, {  24,-3795 },
 {  25,-3795 }, {  26,-3795 }, {  27,-3795 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  31,-3795 }, {  32,-3795 }, {  33,-3795 }, {  34,-3795 },
 {  35,-3795 }, {  36,-3795 }, {  37,-3795 }, {  38,-3795 }, {  39,-3795 },
 {  40,-3795 }, {  41,-3795 }, {  42,-3795 }, {  43,-3795 }, {  44,-3795 },
 {  45,-3795 }, {  46, 468 }, {  47,-3795 }, {  48,-3795 }, {  49,-3795 },
 {  50,-3795 }, {   0,  25 }, {   0,1619 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-3847 }, {   0,   0 }, {  12,-3847 },
 {  13,-3847 }, {  14,-3847 }, {   0,   0 }, {   0,   0 }, {  17,-3847 },
 {  18,-3847 }, {  19,-3847 }, {  20,-3847 }, {  21,-3847 }, {  22,-3847 },
 {  23,-3847 }, {  24,-3847 }, {  25,-3847 }, {  26,-3847 }, {  27,-3847 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-3847 }, {  32,-3847 },
 {  33,-3847 }, {  34,-3847 }, {  35,-3847 }, {  36,-3847 }, {  37,-3847 },
 {  38,-3847 }, {  39,-3847 }, {  40,-3847 }, {  41,-3847 }, {  42,-3847 },
 {  43,-3847 }, {  44,-3847 }, {  45,-3847 }, {  46,-3847 }, {  47, 468 },
 {  48,-3847 }, {  49,-3847 }, {  50,-3847 }, {   0,  25 }, {   0,1567 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-3899 },
 {   0,   0 }, {  12,-3899 }, {  13,-3899 }, {  14,-3899 }, {   0,   0 },
 {   0,   0 }, {  17,-3899 }, {  18,-3899 }, {  19,-3899 }, {  20,-3899 },
 {  21,-3899 }, {  22,-3899 }, {  23,-3899 }, {  24,-3899 }, {  25,-3899 },

 {  26,-3899 }, {  27,-3899 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-3899 }, {  32,-3899 }, {  33,-3899 }, {  34,-3899 }, {  35,-3899 },
 {  36,-3899 }, {  37,-3899 }, {  38,-3899 }, {  39, 468 }, {  40,-3899 },
 {  41,-3899 }, {  42,-3899 }, {  43,-3899 }, {  44,-3899 }, {  45,-3899 },
 {  46,-3899 }, {  47,-3899 }, {  48,-3899 }, {  49,-3899 }, {  50,-3899 },
 {   0,  25 }, {   0,1515 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-3951 }, {   0,   0 }, {  12,-3951 }, {  13,-3951 },
 {  14,-3951 }, {   0,   0 }, {   0,   0 }, {  17,-3951 }, {  18,-3951 },
 {  19,-3951 }, {  20,-3951 }, {  21,-3951 }, {  22,-3951 }, {  23, 468 },

 {  24,-3951 }, {  25,-3951 }, {  26,-3951 }, {  27,-3951 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-3951 }, {  32,-3951 }, {  33,-3951 },
 {  34,-3951 }, {  35,-3951 }, {  36,-3951 }, {  37,-3951 }, {  38,-3951 },
 {  39,-3951 }, {  40,-3951 }, {  41,-3951 }, {  42,-3951 }, {  43,-3951 },
 {  44,-3951 }, {  45,-3951 }, {  46,-3951 }, {  47,-3951 }, {  48,-3951 },
 {  49,-3951 }, {  50,-3951 }, {   0,  25 }, {   0,1463 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4003 }, {   0,   0 },
 {  12,-4003 }, {  13,-4003 }, {  14,-4003 }, {   0,   0 }, {   0,   0 },
 {  17,-4003 }, {  18,-4003 }, {  19,-4003 }, {  20,-4003 }, {  21,-4003 },

 {  22,-4003 }, {  23,-4003 }, {  24,-4003 }, {  25,-4003 }, {  26,-4003 },
 {  27,-4003 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4003 },
 {  32,-4003 }, {  33,-4003 }, {  34,-4003 }, {  35,-4003 }, {  36,-4003 },
 {  37,-4003 }, {  38,-4003 }, {  39, 468 }, {  40,-4003 }, {  41,-4003 },
 {  42,-4003 }, {  43,-4003 }, {  44,-4003 }, {  45,-4003 }, {  46,-4003 },
 {  47,-4003 }, {  48,-4003 }, {  49,-4003 }, {  50,-4003 }, {   0,  25 },
 {   0,1411 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-4055 }, {   0,   0 }, {  12,-4055 }, {  13,-4055 }, {  14,-4055 },
 {   0,   0 }, {   0,   0 }, {  17,-4055 }, {  18,-4055 }, {  19,-4055 },

 {  20,-4055 }, {  21,-4055 }, {  22,-4055 }, {  23,-4055 }, {  24,-4055 },
 {  25,-4055 }, {  26,-4055 }, {  27,-4055 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-4055 }, {  32,-4055 }, {  33,-4055 }, {  34,-4055 },
 {  35,-4055 }, {  36,-4055 }, {  37, 468 }, {  38,-4055 }, {  39,-4055 },
 {  40,-4055 }, {  41,-4055 }, {  42,-4055 }, {  43,-4055 }, {  44,-4055 },
 {  45,-4055 }, {  46,-4055 }, {  47,-4055 }, {  48,-4055 }, {  49,-4055 },
 {  50,-4055 }, {   0,  25 }, {   0,1359 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-4107 }, {   0,   0 }, {  12,-4107 },
 {  13,-4107 }, {  14,-4107 }, {   0,   0 }, {   0,   0 }, {  17,-4107 },

 {  18,-4107 }, {  19,-4107 }, {  20,-4107 }, {  21,-4107 }, {  22,-4107 },
 {  23,-4107 }, {  24,-4107 }, {  25,-4107 }, {  26,-4107 }, {  27,-4107 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4107 }, {  32, 468 },
 {  33,-4107 }, {  34,-4107 }, {  35,-4107 }, {  36,-4107 }, {  37,-4107 },
 {  38,-4107 }, {  39,-4107 }, {  40,-4107 }, {  41,-4107 }, {  42,-4107 },
 {  43,-4107 }, {  44,-4107 }, {  45,-4107 }, {  46,-4107 }, {  47,-4107 },
 {  48,-4107 }, {  49,-4107 }, {  50,-4107 }, {   0,  25 }, {   0,1307 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4159 },
 {   0,   0 }, {  12,-4159 }, {  13,-4159 }, {  14,-4159 }, {   0,   0 },

 {   0,   0 }, {  17,-4159 }, {  18,-4159 }, {  19,-4159 }, {  20,-4159 },
 {  21,-4159 }, {  22,-4159 }, {  23,-4159 }, {  24,-4159 }, {  25,-4159 },
 {  26,-4159 }, {  27,-4159 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-4159 }, {  32,-4159 }, {  33,-4159 }, {  34,-4159 }, {  35,-4159 },
 {  36,-4159 }, {  37,-4159 }, {  38,-4159 }, {  39,-4159 }, {  40,-4159 },
 {  41, 468 }, {  42,-4159 }, {  43,-4159 }, {  44,-4159 }, {  45,-4159 },
 {  46,-4159 }, {  47,-4159 }, {  48,-4159 }, {  49,-4159 }, {  50,-4159 },
 {   0,  25 }, {   0,1255 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-4211 }, {   0,   0 }, {  12,-4211 }, {  13,-4211 },

 {  14,-4211 }, {   0,   0 }, {   0,   0 }, {  17,-4211 }, {  18,-4211 },
 {  19,-4211 }, {  20,-4211 }, {  21,-4211 }, {  22,-4211 }, {  23,-4211 },
 {  24,-4211 }, {  25,-4211 }, {  26,-4211 }, {  27,-4211 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-4211 }, {  32,-4211 }, {  33,-4211 },
 {  34,-4211 }, {  35,-4211 }, {  36,-4211 }, {  37,-4211 }, {  38,-4211 },
 {  39,-4211 }, {  40,-4211 }, {  41,-4211 }, {  42,-4211 }, {  43,-4211 },
 {  44,-4211 }, {  45,-4211 }, {  46, 468 }, {  47,-4211 }, {  48,-4211 },
 {  49,-4211 }, {  50,-4211 }, {   0,   7 }, {   0,1203 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4263 }, {   0,   0 },

 {  12,-4263 }, {  13,-4263 }, {  14,-4263 }, {   0,   0 }, {   0,   0 },
 {  17,-4263 }, {  18,-4263 }, {  19,-4263 }, {  20,-4263 }, {  21,-4263 },
 {  22,-4263 }, {  23,-4263 }, {  24,-4263 }, {  25,-4263 }, {  26,-4263 },
 {  27,-4263 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4263 },
 {  32,-4263 }, {  33,-4263 }, {  34,-4263 }, {  35,-4263 }, {  36,-4263 },
 {  37,-4263 }, {  38,-4263 }, {  39,-4263 }, {  40,-4263 }, {  41,-4263 },
 {  42,-4263 }, {  43,-4263 }, {  44,-4263 }, {  45,-4263 }, {  46,-4263 },
 {  47,-4263 }, {  48,-4263 }, {  49,-4263 }, {  50,-4263 }, {   0,   3 },
 {   0,1151 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  10,-4315 }, {   0,   0 }, {  12,-4315 }, {  13,-4315 }, {  14,-4315 },
 {   0,   0 }, {   0,   0 }, {  17,-4315 }, {  18,-4315 }, {  19,-4315 },
 {  20,-4315 }, {  21,-4315 }, {  22,-4315 }, {  23,-4315 }, {  24,-4315 },
 {  25,-4315 }, {  26,-4315 }, {  27,-4315 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-4315 }, {  32,-4315 }, {  33,-4315 }, {  34,-4315 },
 {  35,-4315 }, {  36,-4315 }, {  37,-4315 }, {  38,-4315 }, {  39,-4315 },
 {  40,-4315 }, {  41,-4315 }, {  42,-4315 }, {  43,-4315 }, {  44,-4315 },
 {  45,-4315 }, {  46,-4315 }, {  47,-4315 }, {  48,-4315 }, {  49,-4315 },
 {  50,-4315 }, {   0,  25 }, {   0,1099 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  10,-4367 }, {   0,   0 }, {  12,-4367 },
 {  13,-4367 }, {  14,-4367 }, {   0,   0 }, {   0,   0 }, {  17,-4367 },
 {  18,-4367 }, {  19,-4367 }, {  20,-4367 }, {  21,-4367 }, {  22,-4367 },
 {  23,-4367 }, {  24,-4367 }, {  25,-4367 }, {  26,-4367 }, {  27,-4367 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4367 }, {  32,-4367 },
 {  33,-4367 }, {  34,-4367 }, {  35,-4367 }, {  36,-4367 }, {  37,-4367 },
 {  38,-4367 }, {  39,-4367 }, {  40,-4367 }, {  41,-4367 }, {  42,-4367 },
 {  43,-4367 }, {  44,-4367 }, {  45, 364 }, {  46,-4367 }, {  47,-4367 },
 {  48,-4367 }, {  49,-4367 }, {  50,-4367 }, {   0,  25 }, {   0,1047 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4419 },
 {   0,   0 }, {  12,-4419 }, {  13,-4419 }, {  14,-4419 }, {   0,   0 },
 {   0,   0 }, {  17,-4419 }, {  18,-4419 }, {  19,-4419 }, {  20,-4419 },
 {  21,-4419 }, {  22,-4419 }, {  23,-4419 }, {  24,-4419 }, {  25,-4419 },
 {  26, 365 }, {  27,-4419 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-4419 }, {  32,-4419 }, {  33,-4419 }, {  34,-4419 }, {  35,-4419 },
 {  36,-4419 }, {  37,-4419 }, {  38,-4419 }, {  39,-4419 }, {  40,-4419 },
 {  41,-4419 }, {  42,-4419 }, {  43,-4419 }, {  44,-4419 }, {  45,-4419 },
 {  46,-4419 }, {  47,-4419 }, {  48,-4419 }, {  49,-4419 }, {  50,-4419 },
 {   0,  25 }, {   0, 995 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-4471 }, {   0,   0 }, {  12,-4471 }, {  13,-4471 },
 {  14,-4471 }, {   0,   0 }, {   0,   0 }, {  17,-4471 }, {  18,-4471 },
 {  19,-4471 }, {  20,-4471 }, {  21,-4471 }, {  22,-4471 }, {  23,-4471 },
 {  24,-4471 }, {  25,-4471 }, {  26,-4471 }, {  27,-4471 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-4471 }, {  32,-4471 }, {  33,-4471 },
 {  34,-832 }, {  35,-4471 }, {  36,-4471 }, {  37,-4471 }, {  38,-4471 },
 {  39,-4471 }, {  40,-4471 }, {  41,-4471 }, {  42,-4471 }, {  43,-4471 },
 {  44,-4471 }, {  45,-4471 }, {  46,-4471 }, {  47,-4471 }, {  48,-4471 },
 {  49,-4471 }, {  50,-4471 }, {   0,  25 }, {   0, 943 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4523 }, {   0,   0 },
 {  12,-4523 }, {  13,-4523 }, {  14,-4523 }, {   0,   0 }, {   0,   0 },
 {  17,-4523 }, {  18,-4523 }, {  19,-4523 }, {  20, 313 }, {  21,-4523 },
 {  22,-4523 }, {  23,-4523 }, {  24,-4523 }, {  25,-4523 }, {  26,-4523 },
 {  27,-4523 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4523 },
 {  32,-4523 }, {  33,-4523 }, {  34,-4523 }, {  35,-4523 }, {  36,-4523 },
 {  37,-4523 }, {  38,-4523 }, {  39,-4523 }, {  40,-4523 }, {  41,-4523 },
 {  42,-4523 }, {  43,-4523 }, {  44,-4523 }, {  45,-4523 }, {  46,-4523 },
 {  47,-4523 }, {  48,-4523 }, {  49,-4523 }, {  50,-4523 }, {   0,  25 },

 {   0, 891 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-4575 }, {   0,   0 }, {  12,-4575 }, {  13,-4575 }, {  14,-4575 },
 {   0,   0 }, {   0,   0 }, {  17,-4575 }, {  18,-4575 }, {  19,-4575 },
 {  20,-4575 }, {  21,-4575 }, {  22,-4575 }, {  23,-4575 }, {  24,-4575 },
 {  25,-4575 }, {  26,-4575 }, {  27,-4575 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-4575 }, {  32,-4575 }, {  33, 313 }, {  34,-4575 },
 {  35,-4575 }, {  36,-4575 }, {  37,-4575 }, {  38,-4575 }, {  39,-4575 },
 {  40,-4575 }, {  41,-4575 }, {  42,-4575 }, {  43,-4575 }, {  44,-4575 },
 {  45,-4575 }, {  46,-4575 }, {  47,-4575 }, {  48,-4575 }, {  49,-4575 },

 {  50,-4575 }, {   0,   2 }, {   0, 839 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-4627 }, {   0,   0 }, {  12,-4627 },
 {  13,-4627 }, {  14,-4627 }, {   0,   0 }, {   0,   0 }, {  17,-4627 },
 {  18,-4627 }, {  19,-4627 }, {  20,-4627 }, {  21,-4627 }, {  22,-4627 },
 {  23,-4627 }, {  24,-4627 }, {  25,-4627 }, {  26,-4627 }, {  27,-4627 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4627 }, {  32,-4627 },
 {  33,-4627 }, {  34,-4627 }, {  35,-4627 }, {  36,-4627 }, {  37,-4627 },
 {  38,-4627 }, {  39,-4627 }, {  40,-4627 }, {  41,-4627 }, {  42,-4627 },
 {  43,-4627 }, {  44,-4627 }, {  45,-4627 }, {  46,-4627 }, {  47,-4627 },

 {  48,-4627 }, {  49,-4627 }, {  50,-4627 }, {   0,   9 }, {   0, 787 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-4679 },
 {   0,   0 }, {  12,-4679 }, {  13,-4679 }, {  14,-4679 }, {   0,   0 },
 {   0,   0 }, {  17,-4679 }, {  18,-4679 }, {  19,-4679 }, {  20,-4679 },
 {  21,-4679 }, {  22,-4679 }, {  23,-4679 }, {  24,-4679 }, {  25,-4679 },
 {  26,-4679 }, {  27,-4679 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-4679 }, {  32,-4679 }, {  33,-4679 }, {  34,-4679 }, {  35,-4679 },
 {  36,-4679 }, {  37,-4679 }, {  38,-4679 }, {  39,-4679 }, {  40,-4679 },
 {  41,-4679 }, {  42,-4679 }, {  43,-4679 }, {  44,-4679 }, {  45,-4679 },

 {  46,-4679 }, {  47,-4679 }, {  48,-4679 }, {  49,-4679 }, {  50,-4679 },
 {   0,  25 }, {   0, 735 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-4731 }, {   0,   0 }, {  12,-4731 }, {  13,-4731 },
 {  14,-4731 }, {   0,   0 }, {   0, 719 }, {  17,-4731 }, {  18,-4731 },
 {  19,-4731 }, {  20,-4731 }, {  21,-4731 }, {  22,-4731 }, {  23,-4731 },
 {  24,-4731 }, {  25,-4731 }, {  26,-4731 }, {  27,-4731 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-4731 }, {  32,-4731 }, {  33,-4731 },
 {  34,-4731 }, {  35,-4731 }, {  36,-4731 }, {  37,-4731 }, {  38,-4731 },
 {  39,-4731 }, {  40,-4731 }, {  41,-4731 }, {  42,-4731 }, {  43,-4731 },

 {  44,-4731 }, {  45,-4731 }, {  46,-4731 }, {  47,-4731 }, {  48,-4731 },
 {  49, 209 }, {  50,-4731 }, {  35,  39 }, {   0,  25 }, {   0, 682 },
 {   0,   0 }, {   0, 680 }, {   0,   0 }, {   2,   5 }, {   0,   0 },
 {   0,   0 }, {   0, 675 }, {   0,   0 }, {   2,   0 }, {  10,-4784 },
 {   4, 461 }, {  12,-4784 }, {  13,-4784 }, {  14,-4784 }, {   0,   0 },
 {   0,   0 }, {  17,-4784 }, {  18,-4784 }, {  19,-4784 }, {  20,-4784 },
 {  21,-4784 }, {  22,-4784 }, {  23,-4784 }, {  24,-4784 }, {  25, 208 },
 {  26,-4784 }, {  27,-4784 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  31,-4784 }, {  32,-4784 }, {  33,-4784 }, {  34,-4784 }, {  35,-4784 },
 {  36,-4784 }, {  37,-4784 }, {  38,-4784 }, {  39,-4784 }, {  40,-4784 },

 {  41,-4784 }, {  42,-4784 }, {  43,-4784 }, {  44,-4784 }, {  45,-4784 },
 {  46,-4784 }, {  47,-4784 }, {  48,-4784 }, {  49,-4784 }, {  50,-4784 },
 {   0,  25 }, {   0, 630 }, {   0,   0 }, {   0, 628 }, {   0,   0 },
 {   2,  52 }, {   3,  57 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-4836 }, {   0,   0 }, {  12,-4836 }, {  13,-4836 },
 {  14,-4836 }, {   0,   0 }, {   0,   0 }, {  17,-4836 }, {  18,-4836 },
 {  19,-4836 }, {  20,-4836 }, {  21,-4836 }, {  22,-4836 }, {  23,-4836 },
 {  24,-4836 }, {  25,-4836 }, {  26,-4836 }, {  27,-4836 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-4836 }, {  32,-4836 }, {  33,-4836 },
 {  34,-4836 }, {  35, 208 }, {  36,-4836 }, {  37,-4836 }, {  38,-4836 },

 {  39,-4836 }, {  40,-4836 }, {  41,-4836 }, {  42,-4836 }, {  43,-4836 },
 {  44,-4836 }, {  45,-4836 }, {  46,-4836 }, {  47,-4836 }, {  48,-4836 },
 {  49,-4836 }, {  50,-4836 }, {   0,  25 }, {   0, 578 }, {   0,   0 },
 {   0, 576 }, {   0,   0 }, {   2,   0 }, {   3,   5 }, {   0,  11 },
 {   0, 571 }, {   0,   0 }, {   0,   0 }, {  10,-4888 }, {   0,   0 },
 {  12,-4888 }, {  13,-4888 }, {  14,-4888 }, {   0,   0 }, {   0,   0 },
 {  17,-4888 }, {  18,-4888 }, {  19,-4888 }, {  20,-4888 }, {  21,-4888 },
 {  22,-4888 }, {  23,-4888 }, {  24,-4888 }, {  25,-4888 }, {  26,-4888 },
 {  27,-4888 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4888 },
 {  32,-4888 }, {  33,-4888 }, {  34,-4888 }, {  35, 208 }, {  36,-4888 },

 {  37,-4888 }, {  38,-4888 }, {  39,-4888 }, {  40,-4888 }, {  41,-4888 },
 {  42,-4888 }, {  43,-4888 }, {  44,-4888 }, {  45,-4888 }, {  46,-4888 },
 {  47,-4888 }, {  48,-4888 }, {  49,-4888 }, {  50,-4888 }, {   0,  25 },
 {   0, 526 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-4940 }, {   0,   0 }, {  12,-4940 }, {  13,-4940 }, {  14,-4940 },
 {   0,   0 }, {   0,   0 }, {  17,-4940 }, {  18,-4940 }, {  19,-4940 },
 {  20,-4940 }, {  21,-4940 }, {  22,-4940 }, {  23,-4940 }, {  24,-4940 },
 {  25,-4940 }, {  26,-4940 }, {  27,-4940 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-4940 }, {  32,-4940 }, {  33,-4940 }, {  34,-4940 },

 {  35, 208 }, {  36,-4940 }, {  37,-4940 }, {  38,-4940 }, {  39,-4940 },
 {  40,-4940 }, {  41,-4940 }, {  42,-4940 }, {  43,-4940 }, {  44,-4940 },
 {  45,-4940 }, {  46,-4940 }, {  47,-4940 }, {  48,-4940 }, {  49,-4940 },
 {  50,-4940 }, {   0,   1 }, {   0, 474 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-4992 }, {   0,   0 }, {  12,-4992 },
 {  13,-4992 }, {  14,-4992 }, {   0,   0 }, {   0,   0 }, {  17,-4992 },
 {  18,-4992 }, {  19,-4992 }, {  20,-4992 }, {  21,-4992 }, {  22,-4992 },
 {  23,-4992 }, {  24,-4992 }, {  25,-4992 }, {  26,-4992 }, {  27,-4992 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-4992 }, {  32,-4992 },

 {  33,-4992 }, {  34,-4992 }, {  35,-4992 }, {  36,-4992 }, {  37,-4992 },
 {  38,-4992 }, {  39,-4992 }, {  40,-4992 }, {  41,-4992 }, {  42,-4992 },
 {  43,-4992 }, {  44,-4992 }, {  45,-4992 }, {  46,-4992 }, {  47,-4992 },
 {  48,-4992 }, {  49,-4992 }, {  50,-4992 }, {   0,  25 }, {   0, 422 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-5044 },
 {   0,   0 }, {  12,-5044 }, {  13,-5044 }, {  14,-5044 }, {   0,   0 },
 {   0,   0 }, {  17,-5044 }, {  18,-5044 }, {  19,-5044 }, {  20,-5044 },
 {  21,-5044 }, {  22,-5044 }, {  23,-5044 }, {  24,-5044 }, {  25,-5044 },
 {  26,-5044 }, {  27,-5044 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  31,-5044 }, {  32,-5044 }, {  33,-5044 }, {  34,-5044 }, {  35,-5044 },
 {  36,-5044 }, {  37,-5044 }, {  38,-5044 }, {  39,-5044 }, {  40,-5044 },
 {  41,-5044 }, {  42,-5044 }, {  43,-5044 }, {  44, 156 }, {  45,-5044 },
 {  46,-5044 }, {  47,-5044 }, {  48,-5044 }, {  49,-5044 }, {  50,-5044 },
 {   0,   8 }, {   0, 370 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-5096 }, {   0,   0 }, {  12,-5096 }, {  13,-5096 },
 {  14,-5096 }, {   0,   0 }, {   0,   0 }, {  17,-5096 }, {  18,-5096 },
 {  19,-5096 }, {  20,-5096 }, {  21,-5096 }, {  22,-5096 }, {  23,-5096 },
 {  24,-5096 }, {  25,-5096 }, {  26,-5096 }, {  27,-5096 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  31,-5096 }, {  32,-5096 }, {  33,-5096 },
 {  34,-5096 }, {  35,-5096 }, {  36,-5096 }, {  37,-5096 }, {  38,-5096 },
 {  39,-5096 }, {  40,-5096 }, {  41,-5096 }, {  42,-5096 }, {  43,-5096 },
 {  44,-5096 }, {  45,-5096 }, {  46,-5096 }, {  47,-5096 }, {  48,-5096 },
 {  49,-5096 }, {  50,-5096 }, {   0,   4 }, {   0, 318 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  10,-5148 }, {   0,   0 },
 {  12,-5148 }, {  13,-5148 }, {  14,-5148 }, {   0,   0 }, {   0,   0 },
 {  17,-5148 }, {  18,-5148 }, {  19,-5148 }, {  20,-5148 }, {  21,-5148 },
 {  22,-5148 }, {  23,-5148 }, {  24,-5148 }, {  25,-5148 }, {  26,-5148 },

 {  27,-5148 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-5148 },
 {  32,-5148 }, {  33,-5148 }, {  34,-5148 }, {  35,-5148 }, {  36,-5148 },
 {  37,-5148 }, {  38,-5148 }, {  39,-5148 }, {  40,-5148 }, {  41,-5148 },
 {  42,-5148 }, {  43,-5148 }, {  44,-5148 }, {  45,-5148 }, {  46,-5148 },
 {  47,-5148 }, {  48,-5148 }, {  49,-5148 }, {  50,-5148 }, {   0,  25 },
 {   0, 266 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  10,-5200 }, {   0,   0 }, {  12,-5200 }, {  13,-5200 }, {  14,-5200 },
 {   0,   0 }, {   0,   0 }, {  17,-5200 }, {  18,-5200 }, {  19,-5200 },
 {  20,-5200 }, {  21,-5200 }, {  22,-5200 }, {  23,-5200 }, {  24,-5200 },

 {  25,-5200 }, {  26,-5200 }, {  27,-5200 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  31,-5200 }, {  32,-5200 }, {  33,-5200 }, {  34,-5200 },
 {  35,-5200 }, {  36,-5200 }, {  37,-5200 }, {  38,-5200 }, {  39,-5200 },
 {  40,-5200 }, {  41,-5200 }, {  42,-5200 }, {  43,-5200 }, {  44,-5200 },
 {  45,-5200 }, {  46,-5200 }, {  47,-5200 }, {  48, 106 }, {  49,-5200 },
 {  50,-5200 }, {   0,   0 }, {   0, 214 }, {   1, 106 }, {   2, 106 },
 {   0,   0 }, {   4,-414 }, {   5, 106 }, {   6, 106 }, {   7, 106 },
 {   8, 106 }, {   9, 106 }, {  10, 106 }, {  11, 106 }, {  12, 106 },
 {  13, 106 }, {  14, 106 }, {  15, 106 }, {  16, 106 }, {  17, 106 },
 {  18, 106 }, {  19, 106 }, {  20, 106 }, {  21, 106 }, {  22, 106 },

 {  23, 106 }, {  24, 106 }, {  25, 106 }, {  26, 106 }, {  27, 106 },
 {  28, 106 }, {  29, 106 }, {  30, 106 }, {  31, 106 }, {  32, 106 },
 {  33, 106 }, {  34, 106 }, {  35, 106 }, {  36, 106 }, {  37, 106 },
 {  38, 106 }, {  39, 106 }, {  40, 106 }, {  41, 106 }, {  42, 106 },
 {  43, 106 }, {  44, 106 }, {  45, 106 }, {  46, 106 }, {  47, 106 },
 {  48, 106 }, {  49, 106 }, {  50, 106 }, {  51, 106 }, {  52, 106 },
 {   0,  25 }, {   0, 160 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  10,-5306 }, {   0,   0 }, {  12,-5306 }, {  13,-5306 },
 {  14,-5306 }, {   0,   0 }, {   0,   0 }, {  17,-5306 }, {  18,-5306 },

 {  19,-5306 }, {  20,-5306 }, {  21,-5306 }, {  22,-5306 }, {  23,-5306 },
 {  24,-5306 }, {  25,-5306 }, {  26,-5306 }, {  27,-5306 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  31,-5306 }, {  32,-5306 }, {  33,-5306 },
 {  34,-5306 }, {  35,-5306 }, {  36,-5306 }, {  37,-5306 }, {  38, 106 },
 {  39,-5306 }, {  40,-5306 }, {  41,-5306 }, {  42,-5306 }, {  43,-5306 },
 {  44,-5306 }, {  45,-5306 }, {  46,-5306 }, {  47,-5306 }, {  48,-5306 },
 {  49,-5306 }, {  50,-5306 }, {   0,   0 }, {   0, 108 }, {   1,   0 },
 {   2,   0 }, {   0,   0 }, {   4,-520 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },

 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {   0,  22 }, {   0,  54 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  10,-5412 }, {   0,   0 }, {  12,-5412 },

 {  13,-5412 }, {  14,-5412 }, {   0,   0 }, {   0,   0 }, {  17,-5412 },
 {  18,-5412 }, {  19,-5412 }, {  20,-5412 }, {  21,-5412 }, {  22,-5412 },
 {  23,-5412 }, {  24,-5412 }, {  25,-5412 }, {  26,-5412 }, {  27,-5412 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  31,-5412 }, {  32,-5412 },
 {  33,-5412 }, {  34,-5412 }, {  35,-5412 }, {  36,-5412 }, {  37,-5412 },
 {  38,-5412 }, {  39,-5412 }, {  40,-5412 }, {  41,-5412 }, {  42,-5412 },
 {  43,-5412 }, {  44,-5412 }, {  45,-5412 }, {  46,-5412 }, {  47,-5412 },
 {  48,-5412 }, {  49,-5412 }, {  50,-5412 }, {   0,   0 }, {   0,   0 },
 {  53,  40 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[3] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[57],

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        7,    8,    1,    9,    1,   10,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   18,   21,
       18,   18,   18,   18,   18,   22,   18,   18,   23,   18,
       18,   18,   24,   25,   26,   18,   18,   18,   27,   18,
       28,   29,   30,    1,   31,    1,   32,   18,   33,   34,

       35,   36,   37,   38,   39,   18,   18,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   18,   18,
       18,   18,   51,    1,   52,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[40] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int glfx_flex_debug;
int glfx_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *glfxtext;
#line 1 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
/*
Flex and Bison files have three sections:

the first is sort of "control" information,
the second is the actual token/grammar definitions,
the last is C code to be copied verbatim to the output.
*/
#line 16 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
    #ifdef _MSC_VER
    // MS's C++ compiler is more strict than gcc

    // No unistd.h
    #define YY_NO_UNISTD_H

    // Direct IO functions (read and such)
    #include <io.h>

    // Disable the warning for glfxwrap
    #pragma warning( disable: 4003 )

    // Disable the warning about depracted naming of _read and friends
    #pragma warning( disable: 4996 )

    #endif

    #ifdef _M_X64
    // flex is (still) incompatible with x64
    // it makes some casts from pointers to integers (pointer casts seem to be fixed in the latest version) and from size_t to integers
    // it should work though, nothing too serious
    #pragma warning( disable:4267 )
    #pragma warning( disable:4244 )
    #endif

    #include <iostream>
    #include <string>
    #include <sstream>

    #include "glfxParser.h"
    #include "glfxClasses.h"
    #include "glfxEffect.h"

    // tokens from parser generator
    #include "glfxLALRParser.hpp"

    static void errLex(const char* tok);

    using namespace std;
    using namespace glfxParser;
#pragma optimize("",off)
/* The %% means that we are done with the CONTROL section, and now move onto the token definitions*/
#line 1906 "src/glfxScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int glfxlex_destroy (void );

int glfxget_debug (void );

void glfxset_debug (int debug_flag  );

YY_EXTRA_TYPE glfxget_extra (void );

void glfxset_extra (YY_EXTRA_TYPE user_defined  );

FILE *glfxget_in (void );

void glfxset_in  (FILE * in_str  );

FILE *glfxget_out (void );

void glfxset_out  (FILE * out_str  );

yy_size_t glfxget_leng (void );

char *glfxget_text (void );

int glfxget_lineno (void );

void glfxset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int glfxwrap (void );
#else
extern int glfxwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( glfxtext, glfxleng, 1, glfxout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(glfxin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(glfxin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int glfxlex (void);

#define YY_DECL int glfxlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after glfxtext and glfxleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( glfxleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(glfxtext[glfxleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 65 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"

#line 2077 "src/glfxScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! glfxin )
			glfxin = stdin;

		if ( ! glfxout )
			glfxout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			glfxensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				glfx_create_buffer(glfxin,YY_BUF_SIZE );
		}

		glfx_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of glfxtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = yy_ec[YY_SC_TO_UI(*++yy_cp)]  )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < glfxleng; ++yyl )
				if ( glfxtext[yyl] == '\n' )
					   
    glfxlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 66 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.strs[0]=glfxtext;return LAYOUT;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=false; return PROGRAM;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 68 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=true; return PROGRAM;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 69 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=false; return TECHNIQUE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=false; return PASS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 71 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.boolean=false; return GROUP;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 72 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return SHADER;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; return INTERFACE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 74 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return SAMPLER;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 75 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return LINE;
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 76 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
{
									    string tmp(glfxtext);
									    size_t firstLoc=tmp.find('"')+1;
									    size_t secondLoc=tmp.find('"', firstLoc);
									    glfxlval.strs[0]=tmp.substr(firstLoc, secondLoc-firstLoc);
									    glfxlval.lineno=glfxlineno-1; // flex has already jumped one line, since \n was eaten
									    return INCLUDE;
									}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 84 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.strs[0]=glfxtext; return STORAGET;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=VS; return SHADER_TYPE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 86 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TC; return SHADER_TYPE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 87 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=TE; return SHADER_TYPE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 88 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=GS; return SHADER_TYPE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 89 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=FS; return SHADER_TYPE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 90 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.sType=CS; return SHADER_TYPE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 91 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=atoi(glfxtext); glfxlval.strs[0]=glfxtext; return NUM;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 92 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.fnum=(float)atof(glfxtext); return FLOAT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 93 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return STORAGEQ;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 94 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return GL_FRAGDEPTH;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 95 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=1; return NUM;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 96 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.num=0; return NUM;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 97 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {glfxlval.lineno=glfxlineno; glfxlval.strs[0]=glfxtext; return IDENTIFIER;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 98 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LP;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 99 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return LB;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 101 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return RB;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 102 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EMPTY_ARRAY_BRACKETS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 103 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COMMA;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 104 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return EQUALS;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 105 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return SC;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 106 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {return COLON;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 107 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Single line comment (with possible continuation)
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 108 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; // Multiline comment
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 109 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 110 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
if(gLexPassthrough) gEffect->m_sharedCode<<glfxtext; else {errLex(glfxtext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 111 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"
ECHO;
	YY_BREAK
#line 2371 "src/glfxScanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed glfxin at a new source and called
			 * glfxlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = glfxin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( glfxwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * glfxtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of glfxlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glfxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			glfxrestart(glfxin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glfxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start) + YY_AT_BOL()];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 1;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up glfxtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --glfxlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					glfxrestart(glfxin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( glfxwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve glfxtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    glfxlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void glfxrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        glfxensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            glfx_create_buffer(glfxin,YY_BUF_SIZE );
	}

	glfx_init_buffer(YY_CURRENT_BUFFER,input_file );
	glfx_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void glfx_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		glfxpop_buffer_state();
	 *		glfxpush_buffer_state(new_buffer);
     */
	glfxensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	glfx_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (glfxwrap()) processing, but the only time this flag
	 * is looked at is after glfxwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void glfx_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	glfxin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE glfx_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glfxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_create_buffer()" );

	b->yy_is_our_buffer = 1;

	glfx_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with glfx_create_buffer()
 * 
 */
    void glfx_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glfxfree((void *) b->yy_ch_buf  );

	glfxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a glfxrestart() or at EOF.
 */
    static void glfx_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	glfx_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then glfx_init_buffer was _probably_
     * called from glfxrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void glfx_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		glfx_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void glfxpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	glfxensure_buffer_stack();

	/* This block is copied from glfx_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from glfx_switch_to_buffer. */
	glfx_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void glfxpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	glfx_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		glfx_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void glfxensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glfxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glfxensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE glfx_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) glfxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	glfx_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to glfxlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       glfx_scan_bytes() instead.
 */
YY_BUFFER_STATE glfx_scan_string (yyconst char * yystr )
{
    
	return glfx_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to glfxlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE glfx_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) glfxalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in glfx_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = glfx_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in glfx_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glfxtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		glfxtext[glfxleng] = (yy_hold_char); \
		(yy_c_buf_p) = glfxtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		glfxleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int glfxget_lineno  (void)
{
        
    return glfxlineno;
}

/** Get the input stream.
 * 
 */
FILE *glfxget_in  (void)
{
        return glfxin;
}

/** Get the output stream.
 * 
 */
FILE *glfxget_out  (void)
{
        return glfxout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t glfxget_leng  (void)
{
        return glfxleng;
}

/** Get the current token.
 * 
 */

char *glfxget_text  (void)
{
        return glfxtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void glfxset_lineno (int  line_number )
{
    
    glfxlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see glfx_switch_to_buffer
 */
void glfxset_in (FILE *  in_str )
{
        glfxin = in_str ;
}

void glfxset_out (FILE *  out_str )
{
        glfxout = out_str ;
}

int glfxget_debug  (void)
{
        return glfx_flex_debug;
}

void glfxset_debug (int  bdebug )
{
        glfx_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from glfxlex_destroy(), so don't allocate here.
     */

    /* We do not touch glfxlineno unless the option is enabled. */
    glfxlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    glfxin = stdin;
    glfxout = stdout;
#else
    glfxin = (FILE *) 0;
    glfxout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * glfxlex_init()
     */
    return 0;
}

/* glfxlex_destroy is for both reentrant and non-reentrant scanners. */
int glfxlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		glfx_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		glfxpop_buffer_state();
	}

	/* Destroy the stack itself. */
	glfxfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * glfxlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glfxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glfxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glfxfree (void * ptr )
{
	free( (char *) ptr );	/* see glfxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 111 "C:\\Simul\\master\\Simul\\External\\glfx\\src\\glfx.lpp"



void errLex(const char* tok)
{
    ostringstream errMsg;
    
    errMsg<<"0("<<glfxlineno<<") : error: Unkown token '"<<tok<<'\'';
    throw errMsg.str();
}

string glfxreadblock(unsigned char openChar, unsigned char closeChar)
{
    string str;
    int braceBalance=0;
    unsigned char c;
    bool done=false;
    do {
        c=(unsigned char)yyinput();
        str+=c;
        if(c==0)
		{
            throw "Brace balance error\n";
		}
        else if(c==openChar)
		{
            braceBalance++;
		}
        else if(c==closeChar) {
            braceBalance--;
            if(braceBalance<0)
			{
                throw "Brace balance error\n";
			}
            else if(braceBalance==0)
                done=true;
        }
    } while(!done);
    return str;
}

