%option yylineno
%option noyywrap
%option prefix="prepro_"
%option outfile="src/PreprocessLexer.cpp" header-file="src/PreprocessLexer.h"
%x IFILE PREPRO DEFINING DEFINING2 IF_STATEMENT

%{
    #ifdef _MSC_VER
		// MS's C++ compiler is more strict than gcc
		// No unistd.h
		#define YY_NO_UNISTD_H
		// Direct IO functions (read and such)
		#include <io.h>
		// Disable the warning for yywrap
		#pragma warning( disable: 4003 )
		// Disable the warning about depracted naming of _read and friends
		#pragma warning( disable: 4996 )
	#endif
	#include <sstream>			// for ostringstream
	#include <iostream>			// for cerr and cout
	#include <map>				// for map
	#include <vector>			// for std::vector
	#include "Preprocessor.h"
	#include "PreprocessParser.h"
	using namespace std;
	int chars = 0;
	int words = 0;
	int lines = 0;
	struct BufferStack
	{
		struct BufferStack *prev;	/* previous entry */
		YY_BUFFER_STATE bs;			/* saved buffer */
		int lineno;					/* saved line number */
		const char *filename;		/* name of this file */
		FILE *file;					/* current file */
	};
	BufferStack *currentBuffer = 0;
	std::string currentFilename;
	
	int newfile(const char *fn);
	int popfile(void);
	extern void prepro_error(const char *s);
	FILE* (*prepro_open)(const char *filename_utf8,string &fullPathName)=NULL;
	void (*prepro_close)(FILE *f)=NULL;
	ostringstream preproOutput;
	// Because many languages don't recognize filenames in the #line directive, e.g. #line 15 mycode.h,
	// we must create a list of filenames
	// that will correspond to file numbers, e.g. #line 15 1, where filenamesUtf8[1]=="mycode.h"
	map<string,int> filenamesUtf8;
	static int last_filenumber=0;
	void WriteLineNumber(int l)
	{
		if(inActiveBlock())
		{
			preproOutput<<"#line "<<l<<" "<<filenamesUtf8[currentFilename]<<std::endl;
		}
	}
	void WriteLineNumber()
	{
		WriteLineNumber(yylineno);
	}
	struct MacroDefinition
	{
		std::string definition;
		std::vector<std::string> parameters;
	};
	typedef map<string,MacroDefinition*> MacroMap;
	MacroMap macros;
	bool IsDefined(std::string name)
	{
		MacroMap::iterator i=macros.find(name);
		return (i!=macros.end());
	}
	void DefineMacro(std::string name,std::string definition)
	{
		macros[name]=new MacroDefinition;
	}
	void UndefineMacro(std::string name)
	{
		MacroMap::iterator i=macros.find(name);
		if(i!=macros.end())
		{
			delete i->second;
			macros.erase(i);
		}
	}
	void ClearMacros()
	{
		while(macros.size())
		{
			MacroMap::iterator i=macros.begin();
			delete i->second;
			macros.erase(i);
		}
		currentBuffer=NULL;
	}
%}

ID_BLCK [a-zA-Z_\.:][a-zA-Z0-9_\.:]*
NUM_BLCK 0|([1-9][0-9]*)

%%
"#"if {
				BEGIN IF_STATEMENT;
				prepro_lval.str=yytext;
				return IF;
			}
"#"ifndef {
				BEGIN PREPRO;
				prepro_lval.str=yytext;
				return IFNDEF;
			}
"#"ifdef {
				BEGIN PREPRO;
				prepro_lval.str=yytext;
				return IFDEF;
			}
"#"else {
				BEGIN PREPRO;
				prepro_lval.str=yytext;
				return ELSE;
			}
"#"endif {
				BEGIN PREPRO;
				prepro_lval.str=yytext;
				return ENDIF;
			}
<IF_STATEMENT>[^\n>]+ {
						/*handle up to the end of line*/
						{
							int c;
							while((c = yyinput()) && c != '\n') ;
						}
						yylineno++;
						BEGIN INITIAL;
						prepro_lval.str=yytext;
						return IF_CONDITION;
					}
<PREPRO>{ID_BLCK}	{
						prepro_lval.str=yytext;
						return IDENTIFIER;
					}

^"#"define {
				prepro_lval.str=yytext;
				BEGIN DEFINING;
				return DEFINE;
			}
<DEFINING>{ID_BLCK}	{
						prepro_lval.str=yytext;
						BEGIN DEFINING2;
						return IDENTIFIER;
					}
<DEFINING2>[^\n]+ {
						/*handle up to end of line*/
				/*		{
							int c;
							while((c = yyinput()) && c != '\n') ;
						}
						yylineno++;*/
						prepro_lval.str=yytext;
						//yytext();
						return MACRO_DEFINITION;
					}
^"#"[ \t]*include[ \t]*[\"<] {
								BEGIN IFILE; /*match #include statement up through the quote or <*/
								}
<IFILE>[^ \t\n\">]+ {
						/*handle filename up to the closing quote, >, or end of line*/
						{
							int c;
							while((c = yyinput()) && c != '\n') ;
						}
						yylineno++;
						if(!newfile(yytext))
						{
							ClearMacros();
							yyterminate(); /* no such file */
						}
						BEGIN INITIAL;
					}
<IFILE>.|\n {
				fprintf(stderr, "%4d bad include line\n", yylineno);
				ClearMacros();
				yyterminate();
			}
<PREPRO,DEFINING,DEFINING2>\n	{
				BEGIN INITIAL;
			}
<DEFINING,DEFINING2,PREPRO><<EOF>> {
			BEGIN INITIAL;
			if(!popfile())
			{
				ClearMacros();
				yyterminate();
			}
		}
<INITIAL><<EOF>> {
			if(!popfile())
			{
				ClearMacros();
				yyterminate();
			}
		}
^. {
	if(inActiveBlock())
		preproOutput<<yytext;// fprintf(yyout, "%4d %s", yylineno, yytext);
	}
^\n {
	if(inActiveBlock())
		preproOutput<<yytext;//fprintf(yyout, "%4d %s", yylineno++, yytext);
	}
\n {
	if(inActiveBlock())
		preproOutput<<yytext;//ECHO; yylineno++;
	}
. {
	if(inActiveBlock())
		preproOutput<<yytext;//ECHO;
	}
%%
void Preprocess(int argc, char **argv)
{
	yylex();
	printf("%8d%8d%8d\n", lines, words, chars);
}

int newfile(const char *fn)
{
	std::string fullPathName;
	FILE *f = prepro_open(fn,fullPathName);
	/* die if no file or no room */
	if(!f)
	{
		prepro_error(fn);
		return 0;
	}
	BufferStack *bs		=new BufferStack;
	if(!bs)
	{
		prepro_error("malloc");
		exit(1);
	}
	/* remember state */
	if(currentBuffer)
		currentBuffer->lineno	=yylineno;
	bs->prev			=currentBuffer;
	/* set up current entry */
	bs->bs				=yy_create_buffer(f, YY_BUF_SIZE);
	bs->file			=f;
	yy_switch_to_buffer(bs->bs);
	currentBuffer		=bs;
	yylineno			=1;
	currentFilename		=fullPathName;
	if(filenamesUtf8.find(fullPathName)==filenamesUtf8.end())
	{
		// Record the file number:
		filenamesUtf8[fullPathName]=last_filenumber;
		last_filenumber++;
	}
	bs->filename		=filenamesUtf8.find(fullPathName)->first.c_str();
	WriteLineNumber(yylineno);
	preproOutput<<"#line 1 "<<filenamesUtf8[currentFilename]<<std::endl;
	return 1;
}

int popfile()
{
	BufferStack *bs		=currentBuffer;
	BufferStack *prevbs;
	if(!bs)
	{
		std::cout<<"no buf";
		return 0;
	}
	/* get rid of current entry*/
	prepro_close(bs->file);
	yy_delete_buffer(bs->bs);
	/* switch back to previous */
	prevbs = bs->prev;
	if(!prevbs)
	{
		delete bs;
		ClearMacros();
		return 0;
	}
	yy_switch_to_buffer(prevbs->bs);
	currentBuffer		=prevbs;
	yylineno			=currentBuffer->lineno;
	currentFilename		=currentBuffer->filename;
	WriteLineNumber(yylineno-2);
	delete bs;
	return 1;
}

vector<string> GetPreprocessorFilenamesUtf8()
{
	vector<string> newvec;
	for(map<string,int>::iterator i=filenamesUtf8.begin();i!=filenamesUtf8.end();i++)
	{
		if(i->second>=newvec.size())
			newvec.resize(i->second+1);
		newvec[i->second]=i->first;
	}
	return newvec;
}
void preprocess(const char *filenameUtf8, map<string, string> defines)
{
	ClearParserState();
	preproOutput.str("");
	for (map<string, string>::const_iterator i = defines.begin(); i != defines.end(); i++)
	{
		preproOutput << "#define " << i->first << " " << i->second << std::endl;
		DefineMacro(i->first, i->second);
	}
	preproOutput.str("");
	filenamesUtf8.clear();
	last_filenumber=0;
	newfile(filenameUtf8);
	//	prepro__scan_string(newsrc.c_str());
	prepro_parse();
}