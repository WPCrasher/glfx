%name-prefix "glfx"
%output "src/glfxLALRParser.cpp"
%defines "src/glfxLALRParser.hpp"
%{
    #include <iostream>
    #include <map>
    #include <string>
    #include <vector>
    #include <sstream>
    
    #include "glfxParser.h"
    #include "glfxClasses.h"

    using namespace std;
    using namespace glfxParser;
    
    #ifdef _MSC_VER
    // MS's C++ compiler is more strict than gcc
    
    // bison related
    // Disable the warning about default being present but no other cases in switch
    #pragma warning( disable:4065 )

    // No unistd.h (for flex)
    #define YY_NO_UNISTD_H
		#define YYERROR_VERBOSE
    #endif
    #include "glfxScanner.h"
    #include "glfxEffect.h"

    static void errSyn(const char *e);
    static void errSem(const string& str, int line=-1);
	static int last_linenumber=0;
	static int current_filenumber=0;
	static int global_linenumber=0;
	std::string currentCsLayout;
	int last_recorded_linenum	=0;
	int global_linenum			=0;
	int filenum					=0;
	#pragma optimize("",off)
%}

%token 	SHADER PROGRAM INTERFACE IDENTIFIER STORAGEQ GL_FRAGDEPTH SHADER_COMMAND SET_RASTERIZER_COMMAND SET_DEPTH_COMMAND SET_BLEND_COMMAND
%token	LP RP LB RB SC COMMA COLON EQUALS NUM INCLUDE SAMPLER FLOAT LEFT_SQ RIGHT_SQ
%token  LAYOUT LINE TECHNIQUE PASS GROUP RENDER_STATE QUOTED_STRING SHADER_LINE SHADER_TYPE

%%

prog : prog tok
    | { // Initialization code
	    gEffect->m_sharedCode.str("");    // clear the stream
	    gLexPassthrough=true;
	};
	tok : INTERFACE lex_fx IDENTIFIER read_block SC lex_passthrough
	{
		gEffect->m_interfaces[$3.strs[0]]=Effect::InterfaceDcl($4.strs[0], $1.lineno);
	}
	| LINE lex_fx NUM NUM lex_passthrough
	{
		last_linenumber=$3.num;
		current_filenumber=$4.num;
		global_linenumber=$1.lineno;
		gEffect->m_sharedCode<<$1.strs[0]<<" "<<$3.num<<" "<<$4.num<<endl;
	}
	// GL-style, e.g. shader VSMain(in type param,out type param)
    | shader_and_layout IDENTIFIER IDENTIFIER LP param_declaration_list RP read_block lex_passthrough
	{
		ostringstream shaderCode;
		int true_linenumber=$1.lineno+(last_linenumber-global_linenumber);
		// Add shader parameters
		for(vector<YYSTYPE::variable>::const_iterator it=$5.vars->begin();it!=$5.vars->end();++it)
		{
			string type(it->type);
			map<string, Effect::InterfaceDcl>::const_iterator varType=gEffect->m_interfaces.find(type);
			int lineno;
			if(varType!=gEffect->m_interfaces.end())
			{
				type+=varType->second.id;
				lineno=varType->second.atLine;
			}
			else
				lineno=$1.lineno;
		// First put #line in to make sure that all our definitions produce correct-looking warnings/errors.
			shaderCode<<"#line "<<true_linenumber<<" "<<current_filenumber<<endl;
			shaderCode<<it->storage<<' '<<type<<' '<<it->identifier<<';'<<endl;
		}
		delete $5.vars;
		std::string shaderName=$4.strs[0];
		// Add definition and code
		shaderCode<<"#line "<<true_linenumber<<" "<<current_filenumber<<endl;
		shaderCode<<currentCsLayout<<"\nvoid main()"<<endl<<$7.strs[0];
		gEffect->m_shaders[shaderName]=shaderCode.str();
		// now we must put a #line directive in the shared code, because we've just snipped out a bunch of what was there:
		
		gEffect->m_sharedCode<<"#line "<<(glfxget_lineno()+(last_linenumber-global_linenumber))<<" "<<current_filenumber<<endl;
	}
    | PROGRAM lex_fx IDENTIFIER LB prog_def RB lex_passthrough
	{
		$5.prog->m_separable=$1.boolean;
		gEffect->m_programs[$3.strs[0]]=$5.prog;
	}
	| TECHNIQUE lex_fx IDENTIFIER LB tech_def RB lex_passthrough
	{
		gEffect->m_techniques[$3.strs[0]] = $5.tech;
	};
	shader_and_layout: SHADER shader_fx cslayout
	{
		string s1=$1.strs[0];
		$$.strs[0]=s1;
	};
	cslayout: LAYOUT layout_params
	{
		currentCsLayout="";
		currentCsLayout+=$1.strs[0];
		currentCsLayout+=$2.strs[0];
	}
	|
	{
	   currentCsLayout= "";
	};
layout_params:LP NUM COMMA NUM COMMA NUM RP
{
	std::string ret="(";
	ret+=$2.strs[0];
	ret+=",";
	ret+=$4.strs[0];
	ret+=",";
	ret+=$6.strs[0];
	ret+=")";
	$$.strs[0]=ret;
};
lex_fx :
{ /* Switch lex to fx scanning */
	read_shader=false;
    gLexPassthrough=false;
};

shader_fx :
{
	read_shader=true;
    gLexPassthrough=false;
};

number_or_filename : NUM
					 {
						 $$.num=$1.num;
						 $$.strs[0]=$1.strs[0];
					 }
					 | QUOTED_STRING
					 {
						 $$.strs[0]=$1.strs[0];
					 };
lex_passthrough :
{ /* Switch lex to passthrough mode */
    gLexPassthrough=true;
}
;

read_block : { /* Read next block */
    $$.strs[0]= glfxreadblock('{', '}');
    $$.lineno= glfxget_lineno();
}
;

samplerClass : IDENTIFIER {
    $$.strs[0]=$1.strs[0];
}
    | {
    $$.strs[0]="";
}
;

samplerVars : samplerVars COMMA samplerVar {
    $$.texNames=$1.texNames;
    
    YYSTYPE::samplerVar sv;
    sv.binding=$3.strs[0];
    sv.name=$3.strs[1];
    $$.texNames->push_back(sv);
}
    | samplerVar {
    $$.texNames=new vector<YYSTYPE::samplerVar>;
    YYSTYPE::samplerVar sv;
    sv.binding=$1.strs[0];
    sv.name=$1.strs[1];
    $$.texNames->push_back(sv);
}
;

samplerVar : IDENTIFIER location {
    ostringstream prepend;
    switch($2.rType) {
    case REGISTER_INT:
        prepend<<"layout(binding="<<$2.num<<") ";
        break;
    case REGISTER_NAME:
        prepend<<"layout(binding="<<$2.strs[0]<<") ";
        break;
    }
    
    $$.strs[0]=prepend.str();
    $$.strs[1]=$1.strs[0];
}
;
    

samplerParamList : samplerParamList samplerParam SC {
    $$.samp=$1.samp;
    switch($2.samplerParamType) {
    case SAMPLER_PARAM_STRING:
        $$.samp->SetParam($2.strs[0], $2.strs[1]);
        break;
    case SAMPLER_PARAM_INT:
        $$.samp->SetParam($2.strs[0], $2.unum);
        break;
    case SAMPLER_PARAM_FLOAT:
        $$.samp->SetParam($2.strs[0], $2.fnum);
        break;
    }
}
    | samplerParam SC {
    $$.samp=new Sampler();
    switch($1.samplerParamType) {
    case SAMPLER_PARAM_STRING:
        $$.samp->SetParam($1.strs[0], $1.strs[1]);
        break;
    case SAMPLER_PARAM_INT:
        $$.samp->SetParam($1.strs[0], $1.unum);
        break;
    case SAMPLER_PARAM_FLOAT:
        $$.samp->SetParam($1.strs[0], $1.fnum);
        break;
    }
}
;

samplerParam : IDENTIFIER EQUALS IDENTIFIER {
    $$.strs[0]=$1.strs[0];
    $$.strs[1]=$3.strs[0];
    $$.samplerParamType=SAMPLER_PARAM_STRING;
}
    | IDENTIFIER EQUALS FLOAT {
    $$.strs[0]=$1.strs[0];
    $$.fnum=$3.fnum;
    $$.samplerParamType=SAMPLER_PARAM_FLOAT;
}
    | IDENTIFIER EQUALS NUM {
    $$.strs[0]=$1.strs[0];
    $$.num=$3.num;
    $$.samplerParamType=SAMPLER_PARAM_INT;
}
;

num_list : num_list COMMA NUM
	{
		$$.vars=$1.vars;
		YYSTYPE::variable var;
		var.identifier=$3.strs[0];
		$$.vars->push_back(var);
	}
    | NUM
	{
		YYSTYPE::variable var;
		var.identifier=$1.strs[0];
		$$.vars = new vector<YYSTYPE::variable>;
		$$.vars->push_back(var);
	}
;
param_declaration_list : param_declaration_list COMMA param_declaration
	{
		$$.vars=$1.vars;

		YYSTYPE::variable var;
		var.storage=$3.strs[0];
		var.type=$3.strs[1];
		var.identifier=$3.strs[2];
    
		$$.vars->push_back(var);
	}
    | param_declaration
	{
		YYSTYPE::variable var;
		var.storage=$1.strs[0];
		var.type=$1.strs[1];
		var.identifier=$1.strs[2];
    
		$$.vars = new vector<YYSTYPE::variable>;
		$$.vars->push_back(var);
	}
    | {
		$$.vars = new vector<YYSTYPE::variable>;
	}
;

param_declaration : param opt_sq location {
    ostringstream prepend;

    switch($3.rType)
	{
    case REGISTER_INT:
        prepend<<"layout(location="<<$3.num<<") ";
        break;
    case REGISTER_NAME:
        prepend<<"layout(location="<<$3.strs[0]<<") ";
        break;
    }
    
    prepend<<$1.strs[0];

	string storage	=prepend.str();
	string type		=$1.strs[1];
	string id		=$1.strs[2]+$2.strs[0];

    $$.strs[0]=storage;
    $$.strs[1]=type;
    $$.strs[2]=id;

    $$.strs[3]=$2.strs[0];
    $$.strs[3]+=$3.strs[0];
};

opt_sq: LEFT_SQ RIGHT_SQ
				{
	$$.strs[0]="[]";
				}
				|
				{
					$$.strs[0]="";
				};

param : opt_storage IDENTIFIER IDENTIFIER
	{
		string storage	=$1.strs[0];
		string type		=$2.strs[0];
		string id		=$3.strs[0];
		$$.strs[0]		= storage	;
		$$.strs[1]		= type		;
		$$.strs[2]		= id		;
	}

;
	opt_storage : STORAGEQ
	{
		$$.strs[0]=$1.strs[0];
	}
	|
	{
		$$.strs[0]="";
	}
location : COLON NUM
	{
		$$.num=$2.num;
		$$.rType=REGISTER_INT;
	}
    | COLON IDENTIFIER
	{
		$$.strs[0]=$2.strs[0];
		$$.rType=REGISTER_NAME;
	}
    |
	{
		$$.rType=REGISTER_NONE;
	}
;

tech_def : pass_list
{
	Technique *t = new Technique(*($1.passes));
	$$.tech = t;
	delete $1.passes;
};

pass_list: pass_list pass_def
{
	$$.passes = $1.passes;
	string name = $2.strs[0];
	Program *p = $2.prog;
	if (p)
	{
		(*$$.passes)[name] = *(p);
	}
	delete $2.prog;
}
| pass_def
{
	map < string, Program > *m=new map < string, Program >;
	$$.passes = m;
	string name = $1.strs[0];
	Program *p = $1.prog;
	if (p)
	{
		Program &newp = (*m)[name];
		newp= *p;
	}
	delete p;
};

pass_def: PASS IDENTIFIER LB prog_def RB
{
	$4.prog->m_separable = $1.boolean;
	$$.prog = $4.prog;
	$$.strs[0] = $2.strs[0];
}

prog_def : shaders_list
{
    $$.prog = new Program(*($1.shaders));
    delete $1.shaders;
};

shaders_list : shaders_list shader_def
	{
		$$.shaders=$1.shaders;
		(*$$.shaders)[$2.sType].src=$2.strs[0];
		(*$$.shaders)[$2.sType].name=$2.strs[1];
	}
	| shader_def
	{
		$$.shaders=new map<ShaderType, Program::Shader>;
		(*$$.shaders)[$1.sType].src=$1.strs[0];
		(*$$.shaders)[$1.sType].name=$1.strs[1];
	};
vec4: IDENTIFIER LP FLOAT COMMA FLOAT COMMA FLOAT COMMA FLOAT RP
	  {
		  $$.strs[0]=$1.strs[0]+"(";
		  
		  $$.strs[0]+=$3.strs[0]+",";
		  $$.strs[0]+=$5.strs[0]+",";
		  $$.strs[0]+=$7.strs[0]+",";
		  $$.strs[0]+=$9.strs[0]+")";
	  };
	
shader_def : SET_RASTERIZER_COMMAND LP IDENTIFIER RP SC
			 {
				 string rast_name=$3.strs[0];
			 }
			 | SET_DEPTH_COMMAND LP IDENTIFIER COMMA NUM RP SC
			 {
				 string depth_name=$3.strs[0];
				 int index=$5.num;
			 }
			 | SET_BLEND_COMMAND LP IDENTIFIER COMMA vec4 COMMA NUM RP SC
			 {
				 string blend_name=$3.strs[0];
				 string vec4text=$5.strs[0];
				 unsigned mask=$7.unum;
			 }
|  shader_lvalue shader_rvalue SC
{
	// Assemble the shader
	ostringstream theShader;
	theShader<<"#version "<<$1.num<<endl;
	theShader<<$2.strs[1];
	glfxParser::ShaderType shaderType=$1.sType;
	glfxParser::ShaderCommand shaderCommand=$1.sCommand;
	// RVK: Must do this because layout(u,v,w) causes problems for non-compute shaders in some compilers:
	if(shaderType==COMPUTE_SHADER)
		theShader<<"#define USE_GL_COMPUTE_SHADER 1"<<endl;
	if(shaderType<NUM_OF_SHADER_TYPES&&$2.num>0)
	{
		string shaderName=($2.strs[0]);
		if(_stricmp(shaderName.c_str(),"NULL")!=0)
		{
			theShader<<gEffect->m_sharedCode.str();
			map<string, string>::const_iterator it=gEffect->m_shaders.find(shaderName);
			if(it==gEffect->m_shaders.end())
			{
				int ylineno=$2.lineno;
				int true_linenumber=ylineno+(last_linenumber-global_linenumber);
				ostringstream errMsg;
				errMsg<<"Unable to find referenced shader \""<<shaderName<<'\"';
				errSem(errMsg.str(), true_linenumber);
			}
			// Currently in case of error it never returns (throw)
			// TODO: Handle continuation in case of error
			theShader<<it->second;
		}
		$$.strs[1]=shaderName;
		$$.strs[0]=theShader.str();
	}
	else if(shaderCommand<NumShaderCommands)
	{
		$$.strs[0]=$1.strs[1];
		$$.strs[1]=$1.strs[0];
	}
	$$.sType=$1.sType;
};
//shader_def : SHADER_COMMAND LP IDENTIFIER RP shader_layout SC
shader_lvalue : SHADER_TYPE LP NUM RP
{
	$$.num	=$3.num;
	$$.sType=$1.sType;
}
| SHADER_COMMAND LP NUM COMMA IDENTIFIER RP
{
	ostringstream theShader;
	$$.num=$3.num;
	$$.sCommand = $1.sCommand;
	theShader << "#version " << $3.num << endl;
	glfxParser::ShaderCommand shaderCommand=$1.sCommand;
	if(shaderCommand==COMPUTE_SHADER)
		theShader<<"#define USE_GL_COMPUTE_SHADER 1"<<endl;
	if(shaderCommand<NumShaderCommands)
	{
		string shaderName=($5.strs[0]);
		if(_stricmp(shaderName.c_str(),"NULL")!=0)
		{
			theShader<<gEffect->m_sharedCode.str();
			map<string, string>::const_iterator it=gEffect->m_shaders.find(shaderName);
			if(it==gEffect->m_shaders.end())
			{
				ostringstream errMsg;
				errMsg<<"Unable to find referenced shader \""<<shaderName<<'\"';
				errSem(errMsg.str(), $5.lineno);
			}
			// Currently in case of error it never returns (throw)
			// TODO: Handle continuation in case of error
			theShader<<it->second;
		}
		$$.strs[0]=shaderName;
		$$.strs[1]=theShader.str();
	}
};

shader_rvalue : EQUALS IDENTIFIER LP RP shader_layout
{
	$$.lineno=$2.lineno;
	$$.strs[0]=$2.strs[0];
	$$.strs[1]=$5.strs[0];
}
|
{
	$$.num=0;
};
shader_layout : COLON shader_layout_list
{
	$$.strs[0]=$2.strs[0];
}
|
{
	$$.strs[0]="";
};

shader_layout_list : shader_layout_list COMMA layout
	{
		$$.strs[0]=$1.strs[0];
		$$.strs[0]+=$3.strs[0];
	}
    | layout
	{
		$$.strs[0]=$1.strs[0];
	}
;

layout : STORAGEQ read_parenthesis
	{
		ostringstream layoutDef;
		//layoutDef<<"#line "<<$1.lineno<<endl;
		layoutDef<<"layout"<<$2.strs[0]<<' '<<$1.strs[0]<<';'<<endl;
		$$.strs[0]=layoutDef.str();
	}
;

layout : GL_FRAGDEPTH read_parenthesis
	{
		ostringstream layoutDef;
		//layoutDef<<"#line "<<$1.lineno<<endl;
		layoutDef<<"layout"<<$2.strs[0]<<' '<<"out float "<<$1.strs[0]<<';'<<endl;
		$$.strs[0]=layoutDef.str();
	}
;

read_parenthesis :
	{ /* read parenthesis */
		$$.strs[0]=glfxreadblock('(', ')');
	}
;

%%

void glfxerror(const char* e)
{
    errSyn(e);
}

void errSyn(const char* e)
{
    ostringstream errMsg;
	int lex_linenumber=glfxget_lineno();
	int true_linenumber=lex_linenumber+last_linenumber-global_linenumber;
    errMsg<<current_filenumber<<"("<< true_linenumber<<") : glfx syntax error: \""<<glfxget_text()<<"\" "<<e;
    throw std::runtime_error(errMsg.str());
}

void errSem(const string& str, int lex_linenumber)
{
    ostringstream errMsg;
    
    if(lex_linenumber==-1)
        lex_linenumber= glfxget_lineno();
	int true_linenumber=lex_linenumber+last_linenumber-global_linenumber;
    errMsg<<current_filenumber<<"("<<true_linenumber<<") : psfx error: "<<str;
    throw errMsg.str();
}
